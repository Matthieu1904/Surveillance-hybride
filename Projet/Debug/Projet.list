
Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000823c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08008410  08008410  00018410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087a8  080087a8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080087a8  080087a8  000187a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087b0  080087b0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087b0  080087b0  000187b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087b4  080087b4  000187b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080087b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200001e0  08008998  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08008998  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bc6  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022e0  00000000  00000000  00030dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  000330b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd8  00000000  00000000  00034180  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000235fe  00000000  00000000  00035158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c678  00000000  00000000  00058756  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7b39  00000000  00000000  00064dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005884  00000000  00000000  0013c984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080083f4 	.word	0x080083f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080083f4 	.word	0x080083f4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <__io_putchar>:
/*
 * Ajouter ensuite le code lié à l’implémentation de cette fonction
 */

PUTCHAR_PROTOTYPE
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end of transmission */
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f30:	1d39      	adds	r1, r7, #4
 8000f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f36:	2201      	movs	r2, #1
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <__io_putchar+0x20>)
 8000f3a:	f003 fec4 	bl	8004cc6 <HAL_UART_Transmit>
return ch;
 8000f3e:	687b      	ldr	r3, [r7, #4]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000364 	.word	0x20000364
 8000f4c:	00000000 	.word	0x00000000

08000f50 <getTempI2C>:

void getTempI2C(void){
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af04      	add	r7, sp, #16
	 * L'adresse du Capteur de Temperature MCP9808 est '0011,A2,A1,A0' en binaire
	 * On met A2, A1 et A0 à '0'; ce qui donne 0011000
	 *
	 * En Hexadecimal, la valeur 0011000 est égale à 18
	 */
	 uint8_t DevAddress = 0x18<<1;	// Adresse de l'appareil (du capteur de température) avec declage vers la gauche pour le placer en 8 bits
 8000f56:	2330      	movs	r3, #48	; 0x30
 8000f58:	737b      	strb	r3, [r7, #13]
	 uint8_t RegistreAdress = 0x05;	// Adresse du Registre contenant la Température
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	733b      	strb	r3, [r7, #12]
	 // uint8_t RegistreAdress = 0x07;
	 uint8_t pData[2];				// Ce que je transmet
	pData[0] = RegistreAdress;		// Stockage de l'Adresse du Registre dans la 1ère case de pData
 8000f5e:	7b3b      	ldrb	r3, [r7, #12]
 8000f60:	713b      	strb	r3, [r7, #4]

		/*
			* Pour hi2c1		I2C_HandleTypeDef qui contient les informations de configuration pour le I2C spécifié.
			* Pour 2			On cherche à récupérer 2 élément (dans les 2 cases de pData)
		*/
		 HALstage=HAL_I2C_Mem_Read(&hi2c1, DevAddress, RegistreAdress, I2C_MEMADD_SIZE_8BIT, pData, 2, HAL_MAX_DELAY);
 8000f62:	7b7b      	ldrb	r3, [r7, #13]
 8000f64:	b299      	uxth	r1, r3
 8000f66:	7b3b      	ldrb	r3, [r7, #12]
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	9302      	str	r3, [sp, #8]
 8000f70:	2302      	movs	r3, #2
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	4835      	ldr	r0, [pc, #212]	; (8001050 <getTempI2C+0x100>)
 8000f7c:	f002 f898 	bl	80030b0 <HAL_I2C_Mem_Read>
 8000f80:	4603      	mov	r3, r0
 8000f82:	72fb      	strb	r3, [r7, #11]

		 // Si la Reception s'est bien passée
		 if(HALstage==HAL_OK){
 8000f84:	7afb      	ldrb	r3, [r7, #11]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d157      	bne.n	800103a <getTempI2C+0xea>
			*/

			// Convertir pData[0] (MSB) qui est en Hexadecimal vers la version binaire (puis decimale)

			// Combiner les Bits
			int16_t tmp = ((int16_t)pData[0] << 4) | (pData[1] >> 4);
 8000f8a:	793b      	ldrb	r3, [r7, #4]
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	797b      	ldrb	r3, [r7, #5]
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	81fb      	strh	r3, [r7, #14]

			// Convert to 2's complement, since temperature can be negative
			if(tmp < 0x7FF){
 8000f9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fa0:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	dc05      	bgt.n	8000fb4 <getTempI2C+0x64>
				tmp |= 0xF000;
 8000fa8:	89fb      	ldrh	r3, [r7, #14]
 8000faa:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000fae:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000fb2:	81fb      	strh	r3, [r7, #14]
			}

			// Convert to float temperature value (CELSIUS)
			int16_t temp_val = tmp * 0.0625;
 8000fb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fad3 	bl	8000564 <__aeabi_i2d>
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	4b24      	ldr	r3, [pc, #144]	; (8001054 <getTempI2C+0x104>)
 8000fc4:	f7ff fb38 	bl	8000638 <__aeabi_dmul>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	460c      	mov	r4, r1
 8000fcc:	4618      	mov	r0, r3
 8000fce:	4621      	mov	r1, r4
 8000fd0:	f7ff fde2 	bl	8000b98 <__aeabi_d2iz>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	813b      	strh	r3, [r7, #8]

			// Convert temperature to decimal format
			temp_val *= 100;
 8000fd8:	893b      	ldrh	r3, [r7, #8]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	0091      	lsls	r1, r2, #2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	813b      	strh	r3, [r7, #8]

			// store to databuffer
			sprintf((char*)pData,
				"%u.%u C\r\n",
				((unsigned int)temp_val / 1000),
 8000ff0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
			sprintf((char*)pData,
 8000ff4:	4a18      	ldr	r2, [pc, #96]	; (8001058 <getTempI2C+0x108>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	099c      	lsrs	r4, r3, #6
				((unsigned int)fmod(temp_val,100))
 8000ffc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff faaf 	bl	8000564 <__aeabi_i2d>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8001048 <getTempI2C+0xf8>
 800100e:	ec43 2b10 	vmov	d0, r2, r3
 8001012:	f007 f877 	bl	8008104 <fmod>
 8001016:	ec53 2b10 	vmov	r2, r3, d0
			sprintf((char*)pData,
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f7ff fde3 	bl	8000be8 <__aeabi_d2uiz>
 8001022:	4603      	mov	r3, r0
 8001024:	1d38      	adds	r0, r7, #4
 8001026:	4622      	mov	r2, r4
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <getTempI2C+0x10c>)
 800102a:	f004 ffc9 	bl	8005fc0 <siprintf>
			);

			printf("Temperature : %s\n",pData);
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	4619      	mov	r1, r3
 8001032:	480b      	ldr	r0, [pc, #44]	; (8001060 <getTempI2C+0x110>)
 8001034:	f004 ff34 	bl	8005ea0 <iprintf>
	}
	else{
		printf("ERREUR TRANSMISSION\n");
	}
	*/
 }
 8001038:	e002      	b.n	8001040 <getTempI2C+0xf0>
			printf("ERREUR RECEPTION\n");
 800103a:	480a      	ldr	r0, [pc, #40]	; (8001064 <getTempI2C+0x114>)
 800103c:	f004 ffb8 	bl	8005fb0 <puts>
 }
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	00000000 	.word	0x00000000
 800104c:	40590000 	.word	0x40590000
 8001050:	20000208 	.word	0x20000208
 8001054:	3fb00000 	.word	0x3fb00000
 8001058:	10624dd3 	.word	0x10624dd3
 800105c:	08008410 	.word	0x08008410
 8001060:	0800841c 	.word	0x0800841c
 8001064:	08008430 	.word	0x08008430

08001068 <getLightValue>:

void getLightValue(void){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	// Lancement du hadc
	HAL_ADC_Start(&hadc1);
 800106e:	4812      	ldr	r0, [pc, #72]	; (80010b8 <getLightValue+0x50>)
 8001070:	f000 febc 	bl	8001dec <HAL_ADC_Start>
	// printf("ADC lancé\n");

	// HAL_Delay(1);

	// Traitement de la Valeur dans hadc1
	uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8001074:	4810      	ldr	r0, [pc, #64]	; (80010b8 <getLightValue+0x50>)
 8001076:	f001 f990 	bl	800239a <HAL_ADC_GetValue>
 800107a:	6078      	str	r0, [r7, #4]
	printf("HADC1: %d\n", adcValue);
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	480f      	ldr	r0, [pc, #60]	; (80010bc <getLightValue+0x54>)
 8001080:	f004 ff0e 	bl	8005ea0 <iprintf>

	// Hal_Delay(1);

	// Si la valeur est en dessous de 4000, on considère que "la lumière est ALLUMEE"
	if(adcValue<4000){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800108a:	d208      	bcs.n	800109e <getLightValue+0x36>
		printf("Lumière ALLUMEE\n");
 800108c:	480c      	ldr	r0, [pc, #48]	; (80010c0 <getLightValue+0x58>)
 800108e:	f004 ff8f 	bl	8005fb0 <puts>
		// La LED LD2 s'allume
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001092:	2201      	movs	r2, #1
 8001094:	2120      	movs	r1, #32
 8001096:	480b      	ldr	r0, [pc, #44]	; (80010c4 <getLightValue+0x5c>)
 8001098:	f001 fe9e 	bl	8002dd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
	}

	// Arret du hadc
	// HAL_ADC_Stop(&hadc1);
}
 800109c:	e007      	b.n	80010ae <getLightValue+0x46>
		printf("Lumière ETEINTE\n");
 800109e:	480a      	ldr	r0, [pc, #40]	; (80010c8 <getLightValue+0x60>)
 80010a0:	f004 ff86 	bl	8005fb0 <puts>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2120      	movs	r1, #32
 80010a8:	4806      	ldr	r0, [pc, #24]	; (80010c4 <getLightValue+0x5c>)
 80010aa:	f001 fe95 	bl	8002dd8 <HAL_GPIO_WritePin>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200002dc 	.word	0x200002dc
 80010bc:	08008444 	.word	0x08008444
 80010c0:	08008450 	.word	0x08008450
 80010c4:	40020000 	.word	0x40020000
 80010c8:	08008464 	.word	0x08008464

080010cc <getInfraValue>:

void getInfraValue(void){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  else{
	  */
	    // Si un signal est recu sur le PA10
		  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 80010d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d4:	4811      	ldr	r0, [pc, #68]	; (800111c <getInfraValue+0x50>)
 80010d6:	f001 fe67 	bl	8002da8 <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d108      	bne.n	80010f2 <getInfraValue+0x26>
			  printf("OBSTACLE\n");
 80010e0:	480f      	ldr	r0, [pc, #60]	; (8001120 <getInfraValue+0x54>)
 80010e2:	f004 ff65 	bl	8005fb0 <puts>
			  // On allume la led LD2
			  // HAL_Delay(1);
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2120      	movs	r1, #32
 80010ea:	480c      	ldr	r0, [pc, #48]	; (800111c <getInfraValue+0x50>)
 80010ec:	f001 fe74 	bl	8002dd8 <HAL_GPIO_WritePin>

			  // On eteint la led LD0 (PA9)
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
		  }
	  // }
}
 80010f0:	e012      	b.n	8001118 <getInfraValue+0x4c>
			  printf("PAS D'OBSTACLE\n");
 80010f2:	480c      	ldr	r0, [pc, #48]	; (8001124 <getInfraValue+0x58>)
 80010f4:	f004 ff5c 	bl	8005fb0 <puts>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2120      	movs	r1, #32
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <getInfraValue+0x50>)
 80010fe:	f001 fe6b 	bl	8002dd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8001102:	2201      	movs	r2, #1
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	4808      	ldr	r0, [pc, #32]	; (8001128 <getInfraValue+0x5c>)
 8001108:	f001 fe66 	bl	8002dd8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001112:	4802      	ldr	r0, [pc, #8]	; (800111c <getInfraValue+0x50>)
 8001114:	f001 fe60 	bl	8002dd8 <HAL_GPIO_WritePin>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40020000 	.word	0x40020000
 8001120:	08008478 	.word	0x08008478
 8001124:	08008484 	.word	0x08008484
 8001128:	40020800 	.word	0x40020800

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001132:	f000 fda5 	bl	8001c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001136:	f000 f841 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113a:	f000 fa43 	bl	80015c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800113e:	f000 fa17 	bl	8001570 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001142:	f000 f8fb 	bl	800133c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001146:	f000 f927 	bl	8001398 <MX_TIM2_Init>
  MX_ADC1_Init();
 800114a:	f000 f8a5 	bl	8001298 <MX_ADC1_Init>
  MX_TIM3_Init();
 800114e:	f000 f971 	bl	8001434 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001152:	f000 f9bd 	bl	80014d0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  // DATE: 22/04/2021

  // Modifier le fichier main.c afin d’y tester la fonction printf().
  int n=25;
 8001156:	2319      	movs	r3, #25
 8001158:	607b      	str	r3, [r7, #4]
  */

  // getTempI2C();

 // Initialisation du hadc
 HAL_ADC_Init(&hadc1);
 800115a:	4812      	ldr	r0, [pc, #72]	; (80011a4 <main+0x78>)
 800115c:	f000 fe02 	bl	8001d64 <HAL_ADC_Init>

 // Lancement du hadc pour que le Capteur de Luminosité ait le temps de la detecter
 HAL_ADC_Start(&hadc1);
 8001160:	4810      	ldr	r0, [pc, #64]	; (80011a4 <main+0x78>)
 8001162:	f000 fe43 	bl	8001dec <HAL_ADC_Start>

 // Pour Lancer le Timer2 en mode Interruption
 HAL_TIM_Base_Start_IT(&htim2);
 8001166:	4810      	ldr	r0, [pc, #64]	; (80011a8 <main+0x7c>)
 8001168:	f003 f98b 	bl	8004482 <HAL_TIM_Base_Start_IT>

 // Pour Lancer le Timer5 en mode Interruption
 HAL_TIM_Base_Start_IT(&htim5);
 800116c:	480f      	ldr	r0, [pc, #60]	; (80011ac <main+0x80>)
 800116e:	f003 f988 	bl	8004482 <HAL_TIM_Base_Start_IT>
  	getLightValue();
  	getInfraValue();
  	*/

	  // Si on appuie sur le bouton poussoir
	   if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8001172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <main+0x84>)
 8001178:	f001 fe16 	bl	8002da8 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f7      	bne.n	8001172 <main+0x46>
		   // Si les alertes sont activées (si la led LD2 est allumée)
		   if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)){
 8001182:	2120      	movs	r1, #32
 8001184:	480b      	ldr	r0, [pc, #44]	; (80011b4 <main+0x88>)
 8001186:	f001 fe0f 	bl	8002da8 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f0      	beq.n	8001172 <main+0x46>
			  printf("ARRET DES ALERTES\n");
 8001190:	4809      	ldr	r0, [pc, #36]	; (80011b8 <main+0x8c>)
 8001192:	f004 ff0d 	bl	8005fb0 <puts>
			  // On arrête les alertes (la Led LD2 s'éteind)
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2120      	movs	r1, #32
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <main+0x88>)
 800119c:	f001 fe1c 	bl	8002dd8 <HAL_GPIO_WritePin>
	   if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80011a0:	e7e7      	b.n	8001172 <main+0x46>
 80011a2:	bf00      	nop
 80011a4:	200002dc 	.word	0x200002dc
 80011a8:	20000324 	.word	0x20000324
 80011ac:	2000025c 	.word	0x2000025c
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40020000 	.word	0x40020000
 80011b8:	08008494 	.word	0x08008494

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b094      	sub	sp, #80	; 0x50
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2234      	movs	r2, #52	; 0x34
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 fa04 	bl	80055d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <SystemClock_Config+0xd4>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	4a29      	ldr	r2, [pc, #164]	; (8001290 <SystemClock_Config+0xd4>)
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ee:	6413      	str	r3, [r2, #64]	; 0x40
 80011f0:	4b27      	ldr	r3, [pc, #156]	; (8001290 <SystemClock_Config+0xd4>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <SystemClock_Config+0xd8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001208:	4a22      	ldr	r2, [pc, #136]	; (8001294 <SystemClock_Config+0xd8>)
 800120a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <SystemClock_Config+0xd8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800121c:	2302      	movs	r3, #2
 800121e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001220:	2301      	movs	r3, #1
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001224:	2310      	movs	r3, #16
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001228:	2302      	movs	r3, #2
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800122c:	2300      	movs	r3, #0
 800122e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001230:	2310      	movs	r3, #16
 8001232:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001234:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001238:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800123a:	2304      	movs	r3, #4
 800123c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800123e:	2302      	movs	r3, #2
 8001240:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001242:	2302      	movs	r3, #2
 8001244:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4618      	mov	r0, r3
 800124c:	f002 fe94 	bl	8003f78 <HAL_RCC_OscConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001256:	f000 fa57 	bl	8001708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125a:	230f      	movs	r3, #15
 800125c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125e:	2302      	movs	r3, #2
 8001260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	2102      	movs	r1, #2
 8001276:	4618      	mov	r0, r3
 8001278:	f002 fbc4 	bl	8003a04 <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001282:	f000 fa41 	bl	8001708 <Error_Handler>
  }
}
 8001286:	bf00      	nop
 8001288:	3750      	adds	r7, #80	; 0x50
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40007000 	.word	0x40007000

08001298 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <MX_ADC1_Init+0x98>)
 80012ac:	4a21      	ldr	r2, [pc, #132]	; (8001334 <MX_ADC1_Init+0x9c>)
 80012ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MX_ADC1_Init+0x98>)
 80012b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_ADC1_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_ADC1_Init+0x98>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_ADC1_Init+0x98>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_ADC1_Init+0x98>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_ADC1_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_ADC1_Init+0x98>)
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <MX_ADC1_Init+0xa0>)
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_ADC1_Init+0x98>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_ADC1_Init+0x98>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_ADC1_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_ADC1_Init+0x98>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_ADC1_Init+0x98>)
 80012fa:	f000 fd33 	bl	8001d64 <HAL_ADC_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001304:	f000 fa00 	bl	8001708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001308:	2300      	movs	r3, #0
 800130a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_ADC1_Init+0x98>)
 800131a:	f001 f869 	bl	80023f0 <HAL_ADC_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001324:	f000 f9f0 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200002dc 	.word	0x200002dc
 8001334:	40012000 	.word	0x40012000
 8001338:	0f000001 	.word	0x0f000001

0800133c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_I2C1_Init+0x50>)
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <MX_I2C1_Init+0x54>)
 8001344:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_I2C1_Init+0x50>)
 8001348:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_I2C1_Init+0x58>)
 800134a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_I2C1_Init+0x50>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_I2C1_Init+0x50>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_I2C1_Init+0x50>)
 800135a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800135e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <MX_I2C1_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_I2C1_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <MX_I2C1_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_I2C1_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <MX_I2C1_Init+0x50>)
 800137a:	f001 fd61 	bl	8002e40 <HAL_I2C_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001384:	f000 f9c0 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000208 	.word	0x20000208
 8001390:	40005400 	.word	0x40005400
 8001394:	000186a0 	.word	0x000186a0

08001398 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	463b      	mov	r3, r7
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_TIM2_Init+0x94>)
 80013b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_TIM2_Init+0x94>)
 80013be:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80013c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_TIM2_Init+0x94>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000000 - 1;
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_TIM2_Init+0x94>)
 80013cc:	4a18      	ldr	r2, [pc, #96]	; (8001430 <MX_TIM2_Init+0x98>)
 80013ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_TIM2_Init+0x94>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_TIM2_Init+0x94>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013dc:	4813      	ldr	r0, [pc, #76]	; (800142c <MX_TIM2_Init+0x94>)
 80013de:	f003 f825 	bl	800442c <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013e8:	f000 f98e 	bl	8001708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_TIM2_Init+0x94>)
 80013fa:	f003 f96e 	bl	80046da <HAL_TIM_ConfigClockSource>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001404:	f000 f980 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001408:	2320      	movs	r3, #32
 800140a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_TIM2_Init+0x94>)
 8001416:	f003 fb79 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001420:	f000 f972 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000324 	.word	0x20000324
 8001430:	002dc6bf 	.word	0x002dc6bf

08001434 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_TIM3_Init+0x94>)
 8001452:	4a1e      	ldr	r2, [pc, #120]	; (80014cc <MX_TIM3_Init+0x98>)
 8001454:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 38452 - 1;
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <MX_TIM3_Init+0x94>)
 8001458:	f249 6233 	movw	r2, #38451	; 0x9633
 800145c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_TIM3_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_TIM3_Init+0x94>)
 8001466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800146a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_TIM3_Init+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_TIM3_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001478:	4813      	ldr	r0, [pc, #76]	; (80014c8 <MX_TIM3_Init+0x94>)
 800147a:	f002 ffd7 	bl	800442c <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001484:	f000 f940 	bl	8001708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <MX_TIM3_Init+0x94>)
 8001496:	f003 f920 	bl	80046da <HAL_TIM_ConfigClockSource>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014a0:	f000 f932 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014a4:	2320      	movs	r3, #32
 80014a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_TIM3_Init+0x94>)
 80014b2:	f003 fb2b 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014bc:	f000 f924 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	2000029c 	.word	0x2000029c
 80014cc:	40000400 	.word	0x40000400

080014d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	463b      	mov	r3, r7
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <MX_TIM5_Init+0x94>)
 80014ee:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <MX_TIM5_Init+0x98>)
 80014f0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_TIM5_Init+0x94>)
 80014f4:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80014f8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_TIM5_Init+0x94>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 600000;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_TIM5_Init+0x94>)
 8001502:	4a1a      	ldr	r2, [pc, #104]	; (800156c <MX_TIM5_Init+0x9c>)
 8001504:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_TIM5_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_TIM5_Init+0x94>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001512:	4814      	ldr	r0, [pc, #80]	; (8001564 <MX_TIM5_Init+0x94>)
 8001514:	f002 ff8a 	bl	800442c <HAL_TIM_Base_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800151e:	f000 f8f3 	bl	8001708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001526:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	4619      	mov	r1, r3
 800152e:	480d      	ldr	r0, [pc, #52]	; (8001564 <MX_TIM5_Init+0x94>)
 8001530:	f003 f8d3 	bl	80046da <HAL_TIM_ConfigClockSource>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800153a:	f000 f8e5 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800153e:	2320      	movs	r3, #32
 8001540:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001546:	463b      	mov	r3, r7
 8001548:	4619      	mov	r1, r3
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <MX_TIM5_Init+0x94>)
 800154c:	f003 fade 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001556:	f000 f8d7 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000025c 	.word	0x2000025c
 8001568:	40000c00 	.word	0x40000c00
 800156c:	000927c0 	.word	0x000927c0

08001570 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_USART2_UART_Init+0x50>)
 8001578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_USART2_UART_Init+0x4c>)
 80015a8:	f003 fb40 	bl	8004c2c <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015b2:	f000 f8a9 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000364 	.word	0x20000364
 80015c0:	40004400 	.word	0x40004400

080015c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <MX_GPIO_Init+0xe8>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a32      	ldr	r2, [pc, #200]	; (80016ac <MX_GPIO_Init+0xe8>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <MX_GPIO_Init+0xe8>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <MX_GPIO_Init+0xe8>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a2b      	ldr	r2, [pc, #172]	; (80016ac <MX_GPIO_Init+0xe8>)
 8001600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <MX_GPIO_Init+0xe8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b25      	ldr	r3, [pc, #148]	; (80016ac <MX_GPIO_Init+0xe8>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a24      	ldr	r2, [pc, #144]	; (80016ac <MX_GPIO_Init+0xe8>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <MX_GPIO_Init+0xe8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <MX_GPIO_Init+0xe8>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <MX_GPIO_Init+0xe8>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <MX_GPIO_Init+0xe8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2120      	movs	r1, #32
 800164e:	4818      	ldr	r0, [pc, #96]	; (80016b0 <MX_GPIO_Init+0xec>)
 8001650:	f001 fbc2 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4812      	ldr	r0, [pc, #72]	; (80016b4 <MX_GPIO_Init+0xf0>)
 800166a:	f001 fa0b 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800166e:	2320      	movs	r3, #32
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	480a      	ldr	r0, [pc, #40]	; (80016b0 <MX_GPIO_Init+0xec>)
 8001686:	f001 f9fd 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800168a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_GPIO_Init+0xec>)
 80016a0:	f001 f9f0 	bl	8002a84 <HAL_GPIO_Init>

}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	; 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020800 	.word	0x40020800

080016b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// get timer callback code to toggle pin /
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    /** Check which version of the timer triggered this callback and toggle LED ***/
    if(htim == &htim2){
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d10a      	bne.n	80016de <HAL_TIM_PeriodElapsedCallback+0x26>
    	printf("\n\n");
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80016ca:	f004 fc71 	bl	8005fb0 <puts>
    	getTempI2C();
 80016ce:	f7ff fc3f 	bl	8000f50 <getTempI2C>
    	getLightValue();
 80016d2:	f7ff fcc9 	bl	8001068 <getLightValue>

    	// Lancement de hadc1 en mode interruption
        HAL_ADC_Start_IT(&hadc1);
 80016d6:	480a      	ldr	r0, [pc, #40]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80016d8:	f000 fc4e 	bl	8001f78 <HAL_ADC_Start_IT>
    else if(htim == &htim5){
		// printf("RELOAD TIMER5\n");
		printf("\n");
       	getInfraValue();
    }
}
 80016dc:	e008      	b.n	80016f0 <HAL_TIM_PeriodElapsedCallback+0x38>
    else if(htim == &htim5){
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d104      	bne.n	80016f0 <HAL_TIM_PeriodElapsedCallback+0x38>
		printf("\n");
 80016e6:	200a      	movs	r0, #10
 80016e8:	f004 fbf2 	bl	8005ed0 <putchar>
       	getInfraValue();
 80016ec:	f7ff fcee 	bl	80010cc <getInfraValue>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000324 	.word	0x20000324
 80016fc:	080084a8 	.word	0x080084a8
 8001700:	200002dc 	.word	0x200002dc
 8001704:	2000025c 	.word	0x2000025c

08001708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_MspInit+0x4c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <HAL_MspInit+0x4c>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_MspInit+0x4c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_MspInit+0x4c>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a08      	ldr	r2, [pc, #32]	; (8001764 <HAL_MspInit+0x4c>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_MspInit+0x4c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001756:	2007      	movs	r0, #7
 8001758:	f001 f952 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800

08001768 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1b      	ldr	r2, [pc, #108]	; (80017f4 <HAL_ADC_MspInit+0x8c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d12f      	bne.n	80017ea <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_ADC_MspInit+0x90>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <HAL_ADC_MspInit+0x90>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_ADC_MspInit+0x90>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_ADC_MspInit+0x90>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <HAL_ADC_MspInit+0x90>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_ADC_MspInit+0x90>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017c2:	2301      	movs	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c6:	2303      	movs	r3, #3
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4809      	ldr	r0, [pc, #36]	; (80017fc <HAL_ADC_MspInit+0x94>)
 80017d6:	f001 f955 	bl	8002a84 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2012      	movs	r0, #18
 80017e0:	f001 f919 	bl	8002a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80017e4:	2012      	movs	r0, #18
 80017e6:	f001 f932 	bl	8002a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40012000 	.word	0x40012000
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000

08001800 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a19      	ldr	r2, [pc, #100]	; (8001884 <HAL_I2C_MspInit+0x84>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d12c      	bne.n	800187c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_I2C_MspInit+0x88>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <HAL_I2C_MspInit+0x88>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_I2C_MspInit+0x88>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800183e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001844:	2312      	movs	r3, #18
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001848:	2301      	movs	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001850:	2304      	movs	r3, #4
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	480c      	ldr	r0, [pc, #48]	; (800188c <HAL_I2C_MspInit+0x8c>)
 800185c:	f001 f912 	bl	8002a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_I2C_MspInit+0x88>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_I2C_MspInit+0x88>)
 800186a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800186e:	6413      	str	r3, [r2, #64]	; 0x40
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_I2C_MspInit+0x88>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	; 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40005400 	.word	0x40005400
 8001888:	40023800 	.word	0x40023800
 800188c:	40020400 	.word	0x40020400

08001890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a0:	d116      	bne.n	80018d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	4b28      	ldr	r3, [pc, #160]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a27      	ldr	r2, [pc, #156]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	201c      	movs	r0, #28
 80018c4:	f001 f8a7 	bl	8002a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c8:	201c      	movs	r0, #28
 80018ca:	f001 f8c0 	bl	8002a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80018ce:	e036      	b.n	800193e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a1d      	ldr	r2, [pc, #116]	; (800194c <HAL_TIM_Base_MspInit+0xbc>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d116      	bne.n	8001908 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	201d      	movs	r0, #29
 80018fc:	f001 f88b 	bl	8002a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001900:	201d      	movs	r0, #29
 8001902:	f001 f8a4 	bl	8002a4e <HAL_NVIC_EnableIRQ>
}
 8001906:	e01a      	b.n	800193e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_TIM_Base_MspInit+0xc0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d115      	bne.n	800193e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_TIM_Base_MspInit+0xb8>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	2032      	movs	r0, #50	; 0x32
 8001934:	f001 f86f 	bl	8002a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001938:	2032      	movs	r0, #50	; 0x32
 800193a:	f001 f888 	bl	8002a4e <HAL_NVIC_EnableIRQ>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40000400 	.word	0x40000400
 8001950:	40000c00 	.word	0x40000c00

08001954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_UART_MspInit+0x84>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d12b      	bne.n	80019ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_UART_MspInit+0x88>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a17      	ldr	r2, [pc, #92]	; (80019dc <HAL_UART_MspInit+0x88>)
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_UART_MspInit+0x88>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_UART_MspInit+0x88>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_UART_MspInit+0x88>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_UART_MspInit+0x88>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019ae:	230c      	movs	r3, #12
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019be:	2307      	movs	r3, #7
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_UART_MspInit+0x8c>)
 80019ca:	f001 f85b 	bl	8002a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40004400 	.word	0x40004400
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <MemManage_Handler+0x4>

080019fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a38:	f000 f974 	bl	8001d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <ADC_IRQHandler+0x10>)
 8001a46:	f000 fb67 	bl	8002118 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200002dc 	.word	0x200002dc

08001a54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	 *
	 * Donc, on attend 300000 millisecondes
	 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <TIM2_IRQHandler+0x10>)
 8001a5a:	f002 fd36 	bl	80044ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000324 	.word	0x20000324

08001a68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <TIM3_IRQHandler+0x10>)
 8001a6e:	f002 fd2c 	bl	80044ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000029c 	.word	0x2000029c

08001a7c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

    if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8001a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a84:	4808      	ldr	r0, [pc, #32]	; (8001aa8 <TIM5_IRQHandler+0x2c>)
 8001a86:	f001 f98f 	bl	8002da8 <HAL_GPIO_ReadPin>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d106      	bne.n	8001a9e <TIM5_IRQHandler+0x22>
    	printf("RELOAD\n");
 8001a90:	4806      	ldr	r0, [pc, #24]	; (8001aac <TIM5_IRQHandler+0x30>)
 8001a92:	f004 fa8d 	bl	8005fb0 <puts>
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001a96:	2120      	movs	r1, #32
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <TIM5_IRQHandler+0x34>)
 8001a9a:	f001 f9b6 	bl	8002e0a <HAL_GPIO_TogglePin>
    }

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <TIM5_IRQHandler+0x38>)
 8001aa0:	f002 fd13 	bl	80044ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	080084ac 	.word	0x080084ac
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	2000025c 	.word	0x2000025c

08001ab8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	e00a      	b.n	8001ae0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aca:	f3af 8000 	nop.w
 8001ace:	4601      	mov	r1, r0
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	60ba      	str	r2, [r7, #8]
 8001ad6:	b2ca      	uxtb	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	dbf0      	blt.n	8001aca <_read+0x12>
	}

return len;
 8001ae8:	687b      	ldr	r3, [r7, #4]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e009      	b.n	8001b18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	60ba      	str	r2, [r7, #8]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fa0b 	bl	8000f28 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	dbf1      	blt.n	8001b04 <_write+0x12>
	}
	return len;
 8001b20:	687b      	ldr	r3, [r7, #4]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <_close>:

int _close(int file)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
	return -1;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b52:	605a      	str	r2, [r3, #4]
	return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_isatty>:

int _isatty(int file)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
	return 1;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
	return 0;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <_sbrk+0x5c>)
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <_sbrk+0x60>)
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <_sbrk+0x64>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <_sbrk+0x68>)
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d207      	bcs.n	8001bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc4:	f003 fcde 	bl	8005584 <__errno>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	230c      	movs	r3, #12
 8001bcc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	e009      	b.n	8001be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <_sbrk+0x64>)
 8001be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20020000 	.word	0x20020000
 8001bf4:	00000400 	.word	0x00000400
 8001bf8:	200001fc 	.word	0x200001fc
 8001bfc:	200003b0 	.word	0x200003b0

08001c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <SystemInit+0x28>)
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0a:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <SystemInit+0x28>)
 8001c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <SystemInit+0x28>)
 8001c16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c1a:	609a      	str	r2, [r3, #8]
#endif
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c32:	e003      	b.n	8001c3c <LoopCopyDataInit>

08001c34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c3a:	3104      	adds	r1, #4

08001c3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c3c:	480b      	ldr	r0, [pc, #44]	; (8001c6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c44:	d3f6      	bcc.n	8001c34 <CopyDataInit>
  ldr  r2, =_sbss
 8001c46:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c48:	e002      	b.n	8001c50 <LoopFillZerobss>

08001c4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c4c:	f842 3b04 	str.w	r3, [r2], #4

08001c50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c54:	d3f9      	bcc.n	8001c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c56:	f7ff ffd3 	bl	8001c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f003 fc99 	bl	8005590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5e:	f7ff fa65 	bl	800112c <main>
  bx  lr    
 8001c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c68:	080087b8 	.word	0x080087b8
  ldr  r0, =_sdata
 8001c6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c70:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001c74:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001c78:	200003ac 	.word	0x200003ac

08001c7c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <CAN1_RX0_IRQHandler>
	...

08001c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <HAL_Init+0x40>)
 8001c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_Init+0x40>)
 8001c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_Init+0x40>)
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f000 fea9 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f000 f808 	bl	8001cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb4:	f7ff fd30 	bl	8001718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023c00 	.word	0x40023c00

08001cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_InitTick+0x54>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x58>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fec1 	bl	8002a6a <HAL_SYSTICK_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00e      	b.n	8001d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d80a      	bhi.n	8001d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f000 fe89 	bl	8002a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d04:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <HAL_InitTick+0x5c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	20000004 	.word	0x20000004

08001d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x20>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x24>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_IncTick+0x24>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000008 	.word	0x20000008
 8001d48:	200003a4 	.word	0x200003a4

08001d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_GetTick+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	200003a4 	.word	0x200003a4

08001d64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e033      	b.n	8001de2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fcf0 	bl	8001768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d118      	bne.n	8001dd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001daa:	f023 0302 	bic.w	r3, r3, #2
 8001dae:	f043 0202 	orr.w	r2, r3, #2
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fc4c 	bl	8002654 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f023 0303 	bic.w	r3, r3, #3
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
 8001dd2:	e001      	b.n	8001dd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_Start+0x1a>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e0a5      	b.n	8001f52 <HAL_ADC_Start+0x166>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d018      	beq.n	8001e4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e2c:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <HAL_ADC_Start+0x174>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a4c      	ldr	r2, [pc, #304]	; (8001f64 <HAL_ADC_Start+0x178>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0c9a      	lsrs	r2, r3, #18
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e40:	e002      	b.n	8001e48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f9      	bne.n	8001e42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d179      	bne.n	8001f50 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e9a:	d106      	bne.n	8001eaa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	f023 0206 	bic.w	r2, r3, #6
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ea8:	e002      	b.n	8001eb0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_ADC_Start+0x17c>)
 8001eba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ec4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d12a      	bne.n	8001f28 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a25      	ldr	r2, [pc, #148]	; (8001f6c <HAL_ADC_Start+0x180>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d015      	beq.n	8001f08 <HAL_ADC_Start+0x11c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a23      	ldr	r2, [pc, #140]	; (8001f70 <HAL_ADC_Start+0x184>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d105      	bne.n	8001ef2 <HAL_ADC_Start+0x106>
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_ADC_Start+0x17c>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <HAL_ADC_Start+0x188>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d129      	bne.n	8001f50 <HAL_ADC_Start+0x164>
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <HAL_ADC_Start+0x17c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2b0f      	cmp	r3, #15
 8001f06:	d823      	bhi.n	8001f50 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d11c      	bne.n	8001f50 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	e013      	b.n	8001f50 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0f      	ldr	r2, [pc, #60]	; (8001f6c <HAL_ADC_Start+0x180>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10e      	bne.n	8001f50 <HAL_ADC_Start+0x164>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f4e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000000 	.word	0x20000000
 8001f64:	431bde83 	.word	0x431bde83
 8001f68:	40012300 	.word	0x40012300
 8001f6c:	40012000 	.word	0x40012000
 8001f70:	40012100 	.word	0x40012100
 8001f74:	40012200 	.word	0x40012200

08001f78 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_Start_IT+0x1a>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e0b0      	b.n	80020f4 <HAL_ADC_Start_IT+0x17c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d018      	beq.n	8001fda <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fb8:	4b51      	ldr	r3, [pc, #324]	; (8002100 <HAL_ADC_Start_IT+0x188>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a51      	ldr	r2, [pc, #324]	; (8002104 <HAL_ADC_Start_IT+0x18c>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0c9a      	lsrs	r2, r3, #18
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fcc:	e002      	b.n	8001fd4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f9      	bne.n	8001fce <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	f040 8084 	bne.w	80020f2 <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002014:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002028:	d106      	bne.n	8002038 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f023 0206 	bic.w	r2, r3, #6
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	645a      	str	r2, [r3, #68]	; 0x44
 8002036:	e002      	b.n	800203e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002046:	4b30      	ldr	r3, [pc, #192]	; (8002108 <HAL_ADC_Start_IT+0x190>)
 8002048:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002052:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002062:	f043 0320 	orr.w	r3, r3, #32
 8002066:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2b00      	cmp	r3, #0
 8002072:	d12a      	bne.n	80020ca <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a24      	ldr	r2, [pc, #144]	; (800210c <HAL_ADC_Start_IT+0x194>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d015      	beq.n	80020aa <HAL_ADC_Start_IT+0x132>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a23      	ldr	r2, [pc, #140]	; (8002110 <HAL_ADC_Start_IT+0x198>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d105      	bne.n	8002094 <HAL_ADC_Start_IT+0x11c>
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <HAL_ADC_Start_IT+0x190>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1e      	ldr	r2, [pc, #120]	; (8002114 <HAL_ADC_Start_IT+0x19c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d129      	bne.n	80020f2 <HAL_ADC_Start_IT+0x17a>
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <HAL_ADC_Start_IT+0x190>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	2b0f      	cmp	r3, #15
 80020a8:	d823      	bhi.n	80020f2 <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d11c      	bne.n	80020f2 <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	e013      	b.n	80020f2 <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a0f      	ldr	r2, [pc, #60]	; (800210c <HAL_ADC_Start_IT+0x194>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d10e      	bne.n	80020f2 <HAL_ADC_Start_IT+0x17a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d107      	bne.n	80020f2 <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020f0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	20000000 	.word	0x20000000
 8002104:	431bde83 	.word	0x431bde83
 8002108:	40012300 	.word	0x40012300
 800210c:	40012000 	.word	0x40012000
 8002110:	40012100 	.word	0x40012100
 8002114:	40012200 	.word	0x40012200

08002118 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	bf0c      	ite	eq
 8002136:	2301      	moveq	r3, #1
 8002138:	2300      	movne	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b20      	cmp	r3, #32
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d049      	beq.n	80021ee <HAL_ADC_IRQHandler+0xd6>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d046      	beq.n	80021ee <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d12b      	bne.n	80021de <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	d127      	bne.n	80021de <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002198:	2b00      	cmp	r3, #0
 800219a:	d006      	beq.n	80021aa <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d119      	bne.n	80021de <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0220 	bic.w	r2, r2, #32
 80021b8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d105      	bne.n	80021de <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f8e8 	bl	80023b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0212 	mvn.w	r2, #18
 80021ec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	2b80      	cmp	r3, #128	; 0x80
 8002210:	bf0c      	ite	eq
 8002212:	2301      	moveq	r3, #1
 8002214:	2300      	movne	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d057      	beq.n	80022d0 <HAL_ADC_IRQHandler+0x1b8>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d054      	beq.n	80022d0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d139      	bne.n	80022c0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002264:	2b00      	cmp	r3, #0
 8002266:	d12b      	bne.n	80022c0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002272:	2b00      	cmp	r3, #0
 8002274:	d124      	bne.n	80022c0 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002280:	2b00      	cmp	r3, #0
 8002282:	d11d      	bne.n	80022c0 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d119      	bne.n	80022c0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800229a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f043 0201 	orr.w	r2, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 fac3 	bl	800284c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f06f 020c 	mvn.w	r2, #12
 80022ce:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	bf0c      	ite	eq
 80022de:	2301      	moveq	r3, #1
 80022e0:	2300      	movne	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f0:	2b40      	cmp	r3, #64	; 0x40
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d017      	beq.n	8002332 <HAL_ADC_IRQHandler+0x21a>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d014      	beq.n	8002332 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b01      	cmp	r3, #1
 8002314:	d10d      	bne.n	8002332 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f850 	bl	80023c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0201 	mvn.w	r2, #1
 8002330:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b20      	cmp	r3, #32
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d015      	beq.n	8002392 <HAL_ADC_IRQHandler+0x27a>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d012      	beq.n	8002392 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	f043 0202 	orr.w	r2, r3, #2
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0220 	mvn.w	r2, #32
 8002380:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f82a 	bl	80023dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0220 	mvn.w	r2, #32
 8002390:	601a      	str	r2, [r3, #0]
  }
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1c>
 8002408:	2302      	movs	r3, #2
 800240a:	e113      	b.n	8002634 <HAL_ADC_ConfigChannel+0x244>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b09      	cmp	r3, #9
 800241a:	d925      	bls.n	8002468 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68d9      	ldr	r1, [r3, #12]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	3b1e      	subs	r3, #30
 8002432:	2207      	movs	r2, #7
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43da      	mvns	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	400a      	ands	r2, r1
 8002440:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68d9      	ldr	r1, [r3, #12]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	4618      	mov	r0, r3
 8002454:	4603      	mov	r3, r0
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4403      	add	r3, r0
 800245a:	3b1e      	subs	r3, #30
 800245c:	409a      	lsls	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	e022      	b.n	80024ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6919      	ldr	r1, [r3, #16]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	2207      	movs	r2, #7
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	400a      	ands	r2, r1
 800248a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6919      	ldr	r1, [r3, #16]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	4618      	mov	r0, r3
 800249e:	4603      	mov	r3, r0
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4403      	add	r3, r0
 80024a4:	409a      	lsls	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d824      	bhi.n	8002500 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	3b05      	subs	r3, #5
 80024c8:	221f      	movs	r2, #31
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43da      	mvns	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	400a      	ands	r2, r1
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4618      	mov	r0, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	3b05      	subs	r3, #5
 80024f2:	fa00 f203 	lsl.w	r2, r0, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	635a      	str	r2, [r3, #52]	; 0x34
 80024fe:	e04c      	b.n	800259a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b0c      	cmp	r3, #12
 8002506:	d824      	bhi.n	8002552 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	3b23      	subs	r3, #35	; 0x23
 800251a:	221f      	movs	r2, #31
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43da      	mvns	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	400a      	ands	r2, r1
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	4618      	mov	r0, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	3b23      	subs	r3, #35	; 0x23
 8002544:	fa00 f203 	lsl.w	r2, r0, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
 8002550:	e023      	b.n	800259a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	3b41      	subs	r3, #65	; 0x41
 8002564:	221f      	movs	r2, #31
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	400a      	ands	r2, r1
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	4618      	mov	r0, r3
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	3b41      	subs	r3, #65	; 0x41
 800258e:	fa00 f203 	lsl.w	r2, r0, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800259a:	4b29      	ldr	r3, [pc, #164]	; (8002640 <HAL_ADC_ConfigChannel+0x250>)
 800259c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a28      	ldr	r2, [pc, #160]	; (8002644 <HAL_ADC_ConfigChannel+0x254>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d10f      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1d8>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b12      	cmp	r3, #18
 80025ae:	d10b      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <HAL_ADC_ConfigChannel+0x254>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d12b      	bne.n	800262a <HAL_ADC_ConfigChannel+0x23a>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <HAL_ADC_ConfigChannel+0x258>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d003      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0x1f4>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b11      	cmp	r3, #17
 80025e2:	d122      	bne.n	800262a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a11      	ldr	r2, [pc, #68]	; (8002648 <HAL_ADC_ConfigChannel+0x258>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d111      	bne.n	800262a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_ADC_ConfigChannel+0x25c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a11      	ldr	r2, [pc, #68]	; (8002650 <HAL_ADC_ConfigChannel+0x260>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	0c9a      	lsrs	r2, r3, #18
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800261c:	e002      	b.n	8002624 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	3b01      	subs	r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f9      	bne.n	800261e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40012300 	.word	0x40012300
 8002644:	40012000 	.word	0x40012000
 8002648:	10000012 	.word	0x10000012
 800264c:	20000000 	.word	0x20000000
 8002650:	431bde83 	.word	0x431bde83

08002654 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800265c:	4b79      	ldr	r3, [pc, #484]	; (8002844 <ADC_Init+0x1f0>)
 800265e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	021a      	lsls	r2, r3, #8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6899      	ldr	r1, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	4a58      	ldr	r2, [pc, #352]	; (8002848 <ADC_Init+0x1f4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d022      	beq.n	8002732 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800271c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6899      	ldr	r1, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	e00f      	b.n	8002752 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002750:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0202 	bic.w	r2, r2, #2
 8002760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7e1b      	ldrb	r3, [r3, #24]
 800276c:	005a      	lsls	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01b      	beq.n	80027b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800278e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800279e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6859      	ldr	r1, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	3b01      	subs	r3, #1
 80027ac:	035a      	lsls	r2, r3, #13
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	e007      	b.n	80027c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	051a      	lsls	r2, r3, #20
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6899      	ldr	r1, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800280a:	025a      	lsls	r2, r3, #9
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	029a      	lsls	r2, r3, #10
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	609a      	str	r2, [r3, #8]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	40012300 	.word	0x40012300
 8002848:	0f000001 	.word	0x0f000001

0800284c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4907      	ldr	r1, [pc, #28]	; (80028fc <__NVIC_EnableIRQ+0x38>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100

08002900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db0a      	blt.n	800292a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	490c      	ldr	r1, [pc, #48]	; (800294c <__NVIC_SetPriority+0x4c>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	440b      	add	r3, r1
 8002924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002928:	e00a      	b.n	8002940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4908      	ldr	r1, [pc, #32]	; (8002950 <__NVIC_SetPriority+0x50>)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3b04      	subs	r3, #4
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	440b      	add	r3, r1
 800293e:	761a      	strb	r2, [r3, #24]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f1c3 0307 	rsb	r3, r3, #7
 800296e:	2b04      	cmp	r3, #4
 8002970:	bf28      	it	cs
 8002972:	2304      	movcs	r3, #4
 8002974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3304      	adds	r3, #4
 800297a:	2b06      	cmp	r3, #6
 800297c:	d902      	bls.n	8002984 <NVIC_EncodePriority+0x30>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3b03      	subs	r3, #3
 8002982:	e000      	b.n	8002986 <NVIC_EncodePriority+0x32>
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	401a      	ands	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800299c:	f04f 31ff 	mov.w	r1, #4294967295
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43d9      	mvns	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	4313      	orrs	r3, r2
         );
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	; 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029cc:	d301      	bcc.n	80029d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00f      	b.n	80029f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <SysTick_Config+0x40>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029da:	210f      	movs	r1, #15
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f7ff ff8e 	bl	8002900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <SysTick_Config+0x40>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ea:	4b04      	ldr	r3, [pc, #16]	; (80029fc <SysTick_Config+0x40>)
 80029ec:	2207      	movs	r2, #7
 80029ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	e000e010 	.word	0xe000e010

08002a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff29 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a28:	f7ff ff3e 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 8002a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f7ff ff8e 	bl	8002954 <NVIC_EncodePriority>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff5d 	bl	8002900 <__NVIC_SetPriority>
}
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff31 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ffa2 	bl	80029bc <SysTick_Config>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e165      	b.n	8002d6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	f040 8154 	bne.w	8002d66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d00b      	beq.n	8002ade <HAL_GPIO_Init+0x5a>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d007      	beq.n	8002ade <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ad2:	2b11      	cmp	r3, #17
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b12      	cmp	r3, #18
 8002adc:	d130      	bne.n	8002b40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	2203      	movs	r2, #3
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b14:	2201      	movs	r2, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 0201 	and.w	r2, r3, #1
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0xfc>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b12      	cmp	r3, #18
 8002b7e:	d123      	bne.n	8002bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	08da      	lsrs	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3208      	adds	r2, #8
 8002b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	220f      	movs	r2, #15
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	08da      	lsrs	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3208      	adds	r2, #8
 8002bc2:	69b9      	ldr	r1, [r7, #24]
 8002bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0203 	and.w	r2, r3, #3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80ae 	beq.w	8002d66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b5c      	ldr	r3, [pc, #368]	; (8002d80 <HAL_GPIO_Init+0x2fc>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4a5b      	ldr	r2, [pc, #364]	; (8002d80 <HAL_GPIO_Init+0x2fc>)
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b59      	ldr	r3, [pc, #356]	; (8002d80 <HAL_GPIO_Init+0x2fc>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c26:	4a57      	ldr	r2, [pc, #348]	; (8002d84 <HAL_GPIO_Init+0x300>)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4e      	ldr	r2, [pc, #312]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d025      	beq.n	8002c9e <HAL_GPIO_Init+0x21a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4d      	ldr	r2, [pc, #308]	; (8002d8c <HAL_GPIO_Init+0x308>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d01f      	beq.n	8002c9a <HAL_GPIO_Init+0x216>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4c      	ldr	r2, [pc, #304]	; (8002d90 <HAL_GPIO_Init+0x30c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d019      	beq.n	8002c96 <HAL_GPIO_Init+0x212>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4b      	ldr	r2, [pc, #300]	; (8002d94 <HAL_GPIO_Init+0x310>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_GPIO_Init+0x20e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4a      	ldr	r2, [pc, #296]	; (8002d98 <HAL_GPIO_Init+0x314>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00d      	beq.n	8002c8e <HAL_GPIO_Init+0x20a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a49      	ldr	r2, [pc, #292]	; (8002d9c <HAL_GPIO_Init+0x318>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d007      	beq.n	8002c8a <HAL_GPIO_Init+0x206>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a48      	ldr	r2, [pc, #288]	; (8002da0 <HAL_GPIO_Init+0x31c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <HAL_GPIO_Init+0x202>
 8002c82:	2306      	movs	r3, #6
 8002c84:	e00c      	b.n	8002ca0 <HAL_GPIO_Init+0x21c>
 8002c86:	2307      	movs	r3, #7
 8002c88:	e00a      	b.n	8002ca0 <HAL_GPIO_Init+0x21c>
 8002c8a:	2305      	movs	r3, #5
 8002c8c:	e008      	b.n	8002ca0 <HAL_GPIO_Init+0x21c>
 8002c8e:	2304      	movs	r3, #4
 8002c90:	e006      	b.n	8002ca0 <HAL_GPIO_Init+0x21c>
 8002c92:	2303      	movs	r3, #3
 8002c94:	e004      	b.n	8002ca0 <HAL_GPIO_Init+0x21c>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e002      	b.n	8002ca0 <HAL_GPIO_Init+0x21c>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_GPIO_Init+0x21c>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	f002 0203 	and.w	r2, r2, #3
 8002ca6:	0092      	lsls	r2, r2, #2
 8002ca8:	4093      	lsls	r3, r2
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cb0:	4934      	ldr	r1, [pc, #208]	; (8002d84 <HAL_GPIO_Init+0x300>)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cbe:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce2:	4a30      	ldr	r2, [pc, #192]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ce8:	4b2e      	ldr	r3, [pc, #184]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0c:	4a25      	ldr	r2, [pc, #148]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d12:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d36:	4a1b      	ldr	r2, [pc, #108]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d60:	4a10      	ldr	r2, [pc, #64]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	2b0f      	cmp	r3, #15
 8002d70:	f67f ae96 	bls.w	8002aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d74:	bf00      	nop
 8002d76:	3724      	adds	r7, #36	; 0x24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40013800 	.word	0x40013800
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	40020400 	.word	0x40020400
 8002d90:	40020800 	.word	0x40020800
 8002d94:	40020c00 	.word	0x40020c00
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40021400 	.word	0x40021400
 8002da0:	40021800 	.word	0x40021800
 8002da4:	40013c00 	.word	0x40013c00

08002da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	e001      	b.n	8002dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
 8002de4:	4613      	mov	r3, r2
 8002de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de8:	787b      	ldrb	r3, [r7, #1]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002df4:	e003      	b.n	8002dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002df6:	887b      	ldrh	r3, [r7, #2]
 8002df8:	041a      	lsls	r2, r3, #16
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	619a      	str	r2, [r3, #24]
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	401a      	ands	r2, r3
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d104      	bne.n	8002e2e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e24:	887b      	ldrh	r3, [r7, #2]
 8002e26:	041a      	lsls	r2, r3, #16
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002e2c:	e002      	b.n	8002e34 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	619a      	str	r2, [r3, #24]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e11f      	b.n	8003092 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe fcca 	bl	8001800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	; 0x24
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea4:	f000 fea0 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 8002ea8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4a7b      	ldr	r2, [pc, #492]	; (800309c <HAL_I2C_Init+0x25c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d807      	bhi.n	8002ec4 <HAL_I2C_Init+0x84>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a7a      	ldr	r2, [pc, #488]	; (80030a0 <HAL_I2C_Init+0x260>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	bf94      	ite	ls
 8002ebc:	2301      	movls	r3, #1
 8002ebe:	2300      	movhi	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e006      	b.n	8002ed2 <HAL_I2C_Init+0x92>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a77      	ldr	r2, [pc, #476]	; (80030a4 <HAL_I2C_Init+0x264>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	bf94      	ite	ls
 8002ecc:	2301      	movls	r3, #1
 8002ece:	2300      	movhi	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0db      	b.n	8003092 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a72      	ldr	r2, [pc, #456]	; (80030a8 <HAL_I2C_Init+0x268>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0c9b      	lsrs	r3, r3, #18
 8002ee4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a64      	ldr	r2, [pc, #400]	; (800309c <HAL_I2C_Init+0x25c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d802      	bhi.n	8002f14 <HAL_I2C_Init+0xd4>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	3301      	adds	r3, #1
 8002f12:	e009      	b.n	8002f28 <HAL_I2C_Init+0xe8>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	4a63      	ldr	r2, [pc, #396]	; (80030ac <HAL_I2C_Init+0x26c>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	3301      	adds	r3, #1
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4956      	ldr	r1, [pc, #344]	; (800309c <HAL_I2C_Init+0x25c>)
 8002f44:	428b      	cmp	r3, r1
 8002f46:	d80d      	bhi.n	8002f64 <HAL_I2C_Init+0x124>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e59      	subs	r1, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	bf38      	it	cc
 8002f60:	2304      	movcc	r3, #4
 8002f62:	e04f      	b.n	8003004 <HAL_I2C_Init+0x1c4>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d111      	bne.n	8002f90 <HAL_I2C_Init+0x150>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e58      	subs	r0, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	440b      	add	r3, r1
 8002f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	e012      	b.n	8002fb6 <HAL_I2C_Init+0x176>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1e58      	subs	r0, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6859      	ldr	r1, [r3, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	0099      	lsls	r1, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_Init+0x17e>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e022      	b.n	8003004 <HAL_I2C_Init+0x1c4>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_I2C_Init+0x1a4>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1e58      	subs	r0, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6859      	ldr	r1, [r3, #4]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	440b      	add	r3, r1
 8002fd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe2:	e00f      	b.n	8003004 <HAL_I2C_Init+0x1c4>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1e58      	subs	r0, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	0099      	lsls	r1, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	6809      	ldr	r1, [r1, #0]
 8003008:	4313      	orrs	r3, r2
 800300a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69da      	ldr	r2, [r3, #28]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003032:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6911      	ldr	r1, [r2, #16]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68d2      	ldr	r2, [r2, #12]
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	430b      	orrs	r3, r1
 8003046:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	000186a0 	.word	0x000186a0
 80030a0:	001e847f 	.word	0x001e847f
 80030a4:	003d08ff 	.word	0x003d08ff
 80030a8:	431bde83 	.word	0x431bde83
 80030ac:	10624dd3 	.word	0x10624dd3

080030b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	; 0x30
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	4608      	mov	r0, r1
 80030ba:	4611      	mov	r1, r2
 80030bc:	461a      	mov	r2, r3
 80030be:	4603      	mov	r3, r0
 80030c0:	817b      	strh	r3, [r7, #10]
 80030c2:	460b      	mov	r3, r1
 80030c4:	813b      	strh	r3, [r7, #8]
 80030c6:	4613      	mov	r3, r2
 80030c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ca:	f7fe fe3f 	bl	8001d4c <HAL_GetTick>
 80030ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b20      	cmp	r3, #32
 80030da:	f040 8208 	bne.w	80034ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	2319      	movs	r3, #25
 80030e4:	2201      	movs	r2, #1
 80030e6:	497b      	ldr	r1, [pc, #492]	; (80032d4 <HAL_I2C_Mem_Read+0x224>)
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 faef 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
 80030f6:	e1fb      	b.n	80034f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_I2C_Mem_Read+0x56>
 8003102:	2302      	movs	r3, #2
 8003104:	e1f4      	b.n	80034f0 <HAL_I2C_Mem_Read+0x440>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d007      	beq.n	800312c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2222      	movs	r2, #34	; 0x22
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2240      	movs	r2, #64	; 0x40
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800315c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a5b      	ldr	r2, [pc, #364]	; (80032d8 <HAL_I2C_Mem_Read+0x228>)
 800316c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800316e:	88f8      	ldrh	r0, [r7, #6]
 8003170:	893a      	ldrh	r2, [r7, #8]
 8003172:	8979      	ldrh	r1, [r7, #10]
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4603      	mov	r3, r0
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f9bc 	bl	80034fc <I2C_RequestMemoryRead>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e1b0      	b.n	80034f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	2b00      	cmp	r3, #0
 8003194:	d113      	bne.n	80031be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003196:	2300      	movs	r3, #0
 8003198:	623b      	str	r3, [r7, #32]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	623b      	str	r3, [r7, #32]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	623b      	str	r3, [r7, #32]
 80031aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e184      	b.n	80034c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d11b      	bne.n	80031fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	61fb      	str	r3, [r7, #28]
 80031ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	e164      	b.n	80034c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003202:	2b02      	cmp	r3, #2
 8003204:	d11b      	bne.n	800323e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003214:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003224:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	e144      	b.n	80034c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003254:	e138      	b.n	80034c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325a:	2b03      	cmp	r3, #3
 800325c:	f200 80f1 	bhi.w	8003442 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	2b01      	cmp	r3, #1
 8003266:	d123      	bne.n	80032b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fb44 	bl	80038fa <I2C_WaitOnRXNEFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e139      	b.n	80034f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032ae:	e10b      	b.n	80034c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d14e      	bne.n	8003356 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032be:	2200      	movs	r2, #0
 80032c0:	4906      	ldr	r1, [pc, #24]	; (80032dc <HAL_I2C_Mem_Read+0x22c>)
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fa02 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d008      	beq.n	80032e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e10e      	b.n	80034f0 <HAL_I2C_Mem_Read+0x440>
 80032d2:	bf00      	nop
 80032d4:	00100002 	.word	0x00100002
 80032d8:	ffff0000 	.word	0xffff0000
 80032dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003354:	e0b8      	b.n	80034c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335c:	2200      	movs	r2, #0
 800335e:	4966      	ldr	r1, [pc, #408]	; (80034f8 <HAL_I2C_Mem_Read+0x448>)
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f9b3 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0bf      	b.n	80034f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b8:	2200      	movs	r2, #0
 80033ba:	494f      	ldr	r1, [pc, #316]	; (80034f8 <HAL_I2C_Mem_Read+0x448>)
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f985 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e091      	b.n	80034f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003440:	e042      	b.n	80034c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003444:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 fa57 	bl	80038fa <I2C_WaitOnRXNEFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e04c      	b.n	80034f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b04      	cmp	r3, #4
 8003494:	d118      	bne.n	80034c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f47f aec2 	bne.w	8003256 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e000      	b.n	80034f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3728      	adds	r7, #40	; 0x28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	00010004 	.word	0x00010004

080034fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	4608      	mov	r0, r1
 8003506:	4611      	mov	r1, r2
 8003508:	461a      	mov	r2, r3
 800350a:	4603      	mov	r3, r0
 800350c:	817b      	strh	r3, [r7, #10]
 800350e:	460b      	mov	r3, r1
 8003510:	813b      	strh	r3, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003524:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003534:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	2200      	movs	r2, #0
 800353e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f8c2 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355c:	d103      	bne.n	8003566 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0aa      	b.n	80036c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800356a:	897b      	ldrh	r3, [r7, #10]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003578:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	6a3a      	ldr	r2, [r7, #32]
 800357e:	4952      	ldr	r1, [pc, #328]	; (80036c8 <I2C_RequestMemoryRead+0x1cc>)
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f8fa 	bl	800377a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e097      	b.n	80036c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a8:	6a39      	ldr	r1, [r7, #32]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f964 	bl	8003878 <I2C_WaitOnTXEFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d107      	bne.n	80035ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e076      	b.n	80036c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035d8:	893b      	ldrh	r3, [r7, #8]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	611a      	str	r2, [r3, #16]
 80035e2:	e021      	b.n	8003628 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035e4:	893b      	ldrh	r3, [r7, #8]
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f4:	6a39      	ldr	r1, [r7, #32]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f93e 	bl	8003878 <I2C_WaitOnTXEFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	2b04      	cmp	r3, #4
 8003608:	d107      	bne.n	800361a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003618:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e050      	b.n	80036c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800361e:	893b      	ldrh	r3, [r7, #8]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362a:	6a39      	ldr	r1, [r7, #32]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f923 	bl	8003878 <I2C_WaitOnTXEFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00d      	beq.n	8003654 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	2b04      	cmp	r3, #4
 800363e:	d107      	bne.n	8003650 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e035      	b.n	80036c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003662:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	2200      	movs	r2, #0
 800366c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f82b 	bl	80036cc <I2C_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00d      	beq.n	8003698 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800368a:	d103      	bne.n	8003694 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e013      	b.n	80036c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003698:	897b      	ldrh	r3, [r7, #10]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	6a3a      	ldr	r2, [r7, #32]
 80036ac:	4906      	ldr	r1, [pc, #24]	; (80036c8 <I2C_RequestMemoryRead+0x1cc>)
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f863 	bl	800377a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	00010002 	.word	0x00010002

080036cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036dc:	e025      	b.n	800372a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d021      	beq.n	800372a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e6:	f7fe fb31 	bl	8001d4c <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d116      	bne.n	800372a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e023      	b.n	8003772 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d10d      	bne.n	8003750 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	43da      	mvns	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4013      	ands	r3, r2
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	bf0c      	ite	eq
 8003746:	2301      	moveq	r3, #1
 8003748:	2300      	movne	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	e00c      	b.n	800376a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	43da      	mvns	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4013      	ands	r3, r2
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	bf0c      	ite	eq
 8003762:	2301      	moveq	r3, #1
 8003764:	2300      	movne	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	429a      	cmp	r2, r3
 800376e:	d0b6      	beq.n	80036de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003788:	e051      	b.n	800382e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003798:	d123      	bne.n	80037e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f043 0204 	orr.w	r2, r3, #4
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e046      	b.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d021      	beq.n	800382e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ea:	f7fe faaf 	bl	8001d4c <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d302      	bcc.n	8003800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d116      	bne.n	800382e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e020      	b.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	0c1b      	lsrs	r3, r3, #16
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d10c      	bne.n	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	43da      	mvns	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	bf14      	ite	ne
 800384a:	2301      	movne	r3, #1
 800384c:	2300      	moveq	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	e00b      	b.n	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	43da      	mvns	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4013      	ands	r3, r2
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d18d      	bne.n	800378a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003884:	e02d      	b.n	80038e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f88d 	bl	80039a6 <I2C_IsAcknowledgeFailed>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e02d      	b.n	80038f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d021      	beq.n	80038e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389e:	f7fe fa55 	bl	8001d4c <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d116      	bne.n	80038e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f043 0220 	orr.w	r2, r3, #32
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e007      	b.n	80038f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b80      	cmp	r3, #128	; 0x80
 80038ee:	d1ca      	bne.n	8003886 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003906:	e042      	b.n	800398e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b10      	cmp	r3, #16
 8003914:	d119      	bne.n	800394a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f06f 0210 	mvn.w	r2, #16
 800391e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e029      	b.n	800399e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394a:	f7fe f9ff 	bl	8001d4c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	429a      	cmp	r2, r3
 8003958:	d302      	bcc.n	8003960 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d116      	bne.n	800398e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e007      	b.n	800399e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003998:	2b40      	cmp	r3, #64	; 0x40
 800399a:	d1b5      	bne.n	8003908 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039bc:	d11b      	bne.n	80039f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f043 0204 	orr.w	r2, r3, #4
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0cc      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a18:	4b68      	ldr	r3, [pc, #416]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d90c      	bls.n	8003a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a26:	4b65      	ldr	r3, [pc, #404]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2e:	4b63      	ldr	r3, [pc, #396]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0b8      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d020      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a58:	4b59      	ldr	r3, [pc, #356]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4a58      	ldr	r2, [pc, #352]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a70:	4b53      	ldr	r3, [pc, #332]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4a52      	ldr	r2, [pc, #328]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a7c:	4b50      	ldr	r3, [pc, #320]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	494d      	ldr	r1, [pc, #308]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d044      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa2:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d119      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e07f      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d107      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac2:	4b3f      	ldr	r3, [pc, #252]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e06f      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad2:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e067      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae2:	4b37      	ldr	r3, [pc, #220]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f023 0203 	bic.w	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4934      	ldr	r1, [pc, #208]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af4:	f7fe f92a 	bl	8001d4c <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afc:	f7fe f926 	bl	8001d4c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e04f      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 020c 	and.w	r2, r3, #12
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d1eb      	bne.n	8003afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b24:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d20c      	bcs.n	8003b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b32:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b20      	ldr	r3, [pc, #128]	; (8003bbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e032      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b58:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4916      	ldr	r1, [pc, #88]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	490e      	ldr	r1, [pc, #56]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b8a:	f000 f855 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003b8e:	4601      	mov	r1, r0
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b9c:	5cd3      	ldrb	r3, [r2, r3]
 8003b9e:	fa21 f303 	lsr.w	r3, r1, r3
 8003ba2:	4a09      	ldr	r2, [pc, #36]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe f88a 	bl	8001cc4 <HAL_InitTick>

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023c00 	.word	0x40023c00
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	080084b4 	.word	0x080084b4
 8003bc8:	20000000 	.word	0x20000000
 8003bcc:	20000004 	.word	0x20000004

08003bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000000 	.word	0x20000000

08003be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bec:	f7ff fff0 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003bf0:	4601      	mov	r1, r0
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	0a9b      	lsrs	r3, r3, #10
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	4a03      	ldr	r2, [pc, #12]	; (8003c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bfe:	5cd3      	ldrb	r3, [r2, r3]
 8003c00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	080084c4 	.word	0x080084c4

08003c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c14:	f7ff ffdc 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003c18:	4601      	mov	r1, r0
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	0b5b      	lsrs	r3, r3, #13
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4a03      	ldr	r2, [pc, #12]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c26:	5cd3      	ldrb	r3, [r2, r3]
 8003c28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40023800 	.word	0x40023800
 8003c34:	080084c4 	.word	0x080084c4

08003c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c52:	4bc6      	ldr	r3, [pc, #792]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x334>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b0c      	cmp	r3, #12
 8003c5c:	f200 817e 	bhi.w	8003f5c <HAL_RCC_GetSysClockFreq+0x324>
 8003c60:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <HAL_RCC_GetSysClockFreq+0x30>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003f5d 	.word	0x08003f5d
 8003c70:	08003f5d 	.word	0x08003f5d
 8003c74:	08003f5d 	.word	0x08003f5d
 8003c78:	08003ca3 	.word	0x08003ca3
 8003c7c:	08003f5d 	.word	0x08003f5d
 8003c80:	08003f5d 	.word	0x08003f5d
 8003c84:	08003f5d 	.word	0x08003f5d
 8003c88:	08003ca9 	.word	0x08003ca9
 8003c8c:	08003f5d 	.word	0x08003f5d
 8003c90:	08003f5d 	.word	0x08003f5d
 8003c94:	08003f5d 	.word	0x08003f5d
 8003c98:	08003e05 	.word	0x08003e05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c9c:	4bb4      	ldr	r3, [pc, #720]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x338>)
 8003c9e:	613b      	str	r3, [r7, #16]
       break;
 8003ca0:	e15f      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ca2:	4bb4      	ldr	r3, [pc, #720]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003ca4:	613b      	str	r3, [r7, #16]
      break;
 8003ca6:	e15c      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ca8:	4bb0      	ldr	r3, [pc, #704]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x334>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cb2:	4bae      	ldr	r3, [pc, #696]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x334>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d04a      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cbe:	4bab      	ldr	r3, [pc, #684]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x334>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	099b      	lsrs	r3, r3, #6
 8003cc4:	f04f 0400 	mov.w	r4, #0
 8003cc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	ea03 0501 	and.w	r5, r3, r1
 8003cd4:	ea04 0602 	and.w	r6, r4, r2
 8003cd8:	4629      	mov	r1, r5
 8003cda:	4632      	mov	r2, r6
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	f04f 0400 	mov.w	r4, #0
 8003ce4:	0154      	lsls	r4, r2, #5
 8003ce6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cea:	014b      	lsls	r3, r1, #5
 8003cec:	4619      	mov	r1, r3
 8003cee:	4622      	mov	r2, r4
 8003cf0:	1b49      	subs	r1, r1, r5
 8003cf2:	eb62 0206 	sbc.w	r2, r2, r6
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	f04f 0400 	mov.w	r4, #0
 8003cfe:	0194      	lsls	r4, r2, #6
 8003d00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d04:	018b      	lsls	r3, r1, #6
 8003d06:	1a5b      	subs	r3, r3, r1
 8003d08:	eb64 0402 	sbc.w	r4, r4, r2
 8003d0c:	f04f 0100 	mov.w	r1, #0
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	00e2      	lsls	r2, r4, #3
 8003d16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d1a:	00d9      	lsls	r1, r3, #3
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4614      	mov	r4, r2
 8003d20:	195b      	adds	r3, r3, r5
 8003d22:	eb44 0406 	adc.w	r4, r4, r6
 8003d26:	f04f 0100 	mov.w	r1, #0
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	0262      	lsls	r2, r4, #9
 8003d30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d34:	0259      	lsls	r1, r3, #9
 8003d36:	460b      	mov	r3, r1
 8003d38:	4614      	mov	r4, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f04f 0400 	mov.w	r4, #0
 8003d44:	461a      	mov	r2, r3
 8003d46:	4623      	mov	r3, r4
 8003d48:	f7fc ff6e 	bl	8000c28 <__aeabi_uldivmod>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	e049      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d54:	4b85      	ldr	r3, [pc, #532]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x334>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	099b      	lsrs	r3, r3, #6
 8003d5a:	f04f 0400 	mov.w	r4, #0
 8003d5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	ea03 0501 	and.w	r5, r3, r1
 8003d6a:	ea04 0602 	and.w	r6, r4, r2
 8003d6e:	4629      	mov	r1, r5
 8003d70:	4632      	mov	r2, r6
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	f04f 0400 	mov.w	r4, #0
 8003d7a:	0154      	lsls	r4, r2, #5
 8003d7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d80:	014b      	lsls	r3, r1, #5
 8003d82:	4619      	mov	r1, r3
 8003d84:	4622      	mov	r2, r4
 8003d86:	1b49      	subs	r1, r1, r5
 8003d88:	eb62 0206 	sbc.w	r2, r2, r6
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	f04f 0400 	mov.w	r4, #0
 8003d94:	0194      	lsls	r4, r2, #6
 8003d96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d9a:	018b      	lsls	r3, r1, #6
 8003d9c:	1a5b      	subs	r3, r3, r1
 8003d9e:	eb64 0402 	sbc.w	r4, r4, r2
 8003da2:	f04f 0100 	mov.w	r1, #0
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	00e2      	lsls	r2, r4, #3
 8003dac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003db0:	00d9      	lsls	r1, r3, #3
 8003db2:	460b      	mov	r3, r1
 8003db4:	4614      	mov	r4, r2
 8003db6:	195b      	adds	r3, r3, r5
 8003db8:	eb44 0406 	adc.w	r4, r4, r6
 8003dbc:	f04f 0100 	mov.w	r1, #0
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	02a2      	lsls	r2, r4, #10
 8003dc6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003dca:	0299      	lsls	r1, r3, #10
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4614      	mov	r4, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f04f 0400 	mov.w	r4, #0
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4623      	mov	r3, r4
 8003dde:	f7fc ff23 	bl	8000c28 <__aeabi_uldivmod>
 8003de2:	4603      	mov	r3, r0
 8003de4:	460c      	mov	r4, r1
 8003de6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003de8:	4b60      	ldr	r3, [pc, #384]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x334>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	3301      	adds	r3, #1
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	613b      	str	r3, [r7, #16]
      break;
 8003e02:	e0ae      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e04:	4b59      	ldr	r3, [pc, #356]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x334>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e0c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e0e:	4b57      	ldr	r3, [pc, #348]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x334>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d04a      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1a:	4b54      	ldr	r3, [pc, #336]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x334>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	099b      	lsrs	r3, r3, #6
 8003e20:	f04f 0400 	mov.w	r4, #0
 8003e24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	ea03 0501 	and.w	r5, r3, r1
 8003e30:	ea04 0602 	and.w	r6, r4, r2
 8003e34:	4629      	mov	r1, r5
 8003e36:	4632      	mov	r2, r6
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	f04f 0400 	mov.w	r4, #0
 8003e40:	0154      	lsls	r4, r2, #5
 8003e42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e46:	014b      	lsls	r3, r1, #5
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4622      	mov	r2, r4
 8003e4c:	1b49      	subs	r1, r1, r5
 8003e4e:	eb62 0206 	sbc.w	r2, r2, r6
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	f04f 0400 	mov.w	r4, #0
 8003e5a:	0194      	lsls	r4, r2, #6
 8003e5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e60:	018b      	lsls	r3, r1, #6
 8003e62:	1a5b      	subs	r3, r3, r1
 8003e64:	eb64 0402 	sbc.w	r4, r4, r2
 8003e68:	f04f 0100 	mov.w	r1, #0
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	00e2      	lsls	r2, r4, #3
 8003e72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e76:	00d9      	lsls	r1, r3, #3
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4614      	mov	r4, r2
 8003e7c:	195b      	adds	r3, r3, r5
 8003e7e:	eb44 0406 	adc.w	r4, r4, r6
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	0262      	lsls	r2, r4, #9
 8003e8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003e90:	0259      	lsls	r1, r3, #9
 8003e92:	460b      	mov	r3, r1
 8003e94:	4614      	mov	r4, r2
 8003e96:	4618      	mov	r0, r3
 8003e98:	4621      	mov	r1, r4
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f04f 0400 	mov.w	r4, #0
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4623      	mov	r3, r4
 8003ea4:	f7fc fec0 	bl	8000c28 <__aeabi_uldivmod>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	460c      	mov	r4, r1
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	e049      	b.n	8003f44 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb0:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x334>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	099b      	lsrs	r3, r3, #6
 8003eb6:	f04f 0400 	mov.w	r4, #0
 8003eba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	ea03 0501 	and.w	r5, r3, r1
 8003ec6:	ea04 0602 	and.w	r6, r4, r2
 8003eca:	4629      	mov	r1, r5
 8003ecc:	4632      	mov	r2, r6
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	f04f 0400 	mov.w	r4, #0
 8003ed6:	0154      	lsls	r4, r2, #5
 8003ed8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003edc:	014b      	lsls	r3, r1, #5
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	1b49      	subs	r1, r1, r5
 8003ee4:	eb62 0206 	sbc.w	r2, r2, r6
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	f04f 0400 	mov.w	r4, #0
 8003ef0:	0194      	lsls	r4, r2, #6
 8003ef2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ef6:	018b      	lsls	r3, r1, #6
 8003ef8:	1a5b      	subs	r3, r3, r1
 8003efa:	eb64 0402 	sbc.w	r4, r4, r2
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	00e2      	lsls	r2, r4, #3
 8003f08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f0c:	00d9      	lsls	r1, r3, #3
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4614      	mov	r4, r2
 8003f12:	195b      	adds	r3, r3, r5
 8003f14:	eb44 0406 	adc.w	r4, r4, r6
 8003f18:	f04f 0100 	mov.w	r1, #0
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	02a2      	lsls	r2, r4, #10
 8003f22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f26:	0299      	lsls	r1, r3, #10
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4614      	mov	r4, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	4621      	mov	r1, r4
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f04f 0400 	mov.w	r4, #0
 8003f36:	461a      	mov	r2, r3
 8003f38:	4623      	mov	r3, r4
 8003f3a:	f7fc fe75 	bl	8000c28 <__aeabi_uldivmod>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	460c      	mov	r4, r1
 8003f42:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f44:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x334>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	0f1b      	lsrs	r3, r3, #28
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	613b      	str	r3, [r7, #16]
      break;
 8003f5a:	e002      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x338>)
 8003f5e:	613b      	str	r3, [r7, #16]
      break;
 8003f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f62:	693b      	ldr	r3, [r7, #16]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	00f42400 	.word	0x00f42400
 8003f74:	007a1200 	.word	0x007a1200

08003f78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8083 	beq.w	8004098 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f92:	4b95      	ldr	r3, [pc, #596]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d019      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f9e:	4b92      	ldr	r3, [pc, #584]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d106      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003faa:	4b8f      	ldr	r3, [pc, #572]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb6:	d00c      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb8:	4b8b      	ldr	r3, [pc, #556]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fc0:	2b0c      	cmp	r3, #12
 8003fc2:	d112      	bne.n	8003fea <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fc4:	4b88      	ldr	r3, [pc, #544]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd0:	d10b      	bne.n	8003fea <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd2:	4b85      	ldr	r3, [pc, #532]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d05b      	beq.n	8004096 <HAL_RCC_OscConfig+0x11e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d157      	bne.n	8004096 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e216      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0x8a>
 8003ff4:	4b7c      	ldr	r3, [pc, #496]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a7b      	ldr	r2, [pc, #492]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	e01d      	b.n	800403e <HAL_RCC_OscConfig+0xc6>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800400a:	d10c      	bne.n	8004026 <HAL_RCC_OscConfig+0xae>
 800400c:	4b76      	ldr	r3, [pc, #472]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a75      	ldr	r2, [pc, #468]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8004012:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	4b73      	ldr	r3, [pc, #460]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a72      	ldr	r2, [pc, #456]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 800401e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e00b      	b.n	800403e <HAL_RCC_OscConfig+0xc6>
 8004026:	4b70      	ldr	r3, [pc, #448]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a6f      	ldr	r2, [pc, #444]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 800402c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	4b6d      	ldr	r3, [pc, #436]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a6c      	ldr	r2, [pc, #432]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8004038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800403c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d013      	beq.n	800406e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fd fe81 	bl	8001d4c <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800404e:	f7fd fe7d 	bl	8001d4c <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b64      	cmp	r3, #100	; 0x64
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e1db      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004060:	4b61      	ldr	r3, [pc, #388]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0xd6>
 800406c:	e014      	b.n	8004098 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406e:	f7fd fe6d 	bl	8001d4c <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004076:	f7fd fe69 	bl	8001d4c <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b64      	cmp	r3, #100	; 0x64
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e1c7      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004088:	4b57      	ldr	r3, [pc, #348]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f0      	bne.n	8004076 <HAL_RCC_OscConfig+0xfe>
 8004094:	e000      	b.n	8004098 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004096:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d06f      	beq.n	8004184 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040a4:	4b50      	ldr	r3, [pc, #320]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 030c 	and.w	r3, r3, #12
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d017      	beq.n	80040e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040b0:	4b4d      	ldr	r3, [pc, #308]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d105      	bne.n	80040c8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040bc:	4b4a      	ldr	r3, [pc, #296]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00b      	beq.n	80040e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040c8:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040d0:	2b0c      	cmp	r3, #12
 80040d2:	d11c      	bne.n	800410e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d4:	4b44      	ldr	r3, [pc, #272]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d116      	bne.n	800410e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e0:	4b41      	ldr	r3, [pc, #260]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_OscConfig+0x180>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e18f      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f8:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4938      	ldr	r1, [pc, #224]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410c:	e03a      	b.n	8004184 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d020      	beq.n	8004158 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004116:	4b35      	ldr	r3, [pc, #212]	; (80041ec <HAL_RCC_OscConfig+0x274>)
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd fe16 	bl	8001d4c <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004124:	f7fd fe12 	bl	8001d4c <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e170      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004136:	4b2c      	ldr	r3, [pc, #176]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004142:	4b29      	ldr	r3, [pc, #164]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4925      	ldr	r1, [pc, #148]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]
 8004156:	e015      	b.n	8004184 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004158:	4b24      	ldr	r3, [pc, #144]	; (80041ec <HAL_RCC_OscConfig+0x274>)
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415e:	f7fd fdf5 	bl	8001d4c <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004166:	f7fd fdf1 	bl	8001d4c <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e14f      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004178:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f0      	bne.n	8004166 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d037      	beq.n	8004200 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d016      	beq.n	80041c6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004198:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <HAL_RCC_OscConfig+0x278>)
 800419a:	2201      	movs	r2, #1
 800419c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419e:	f7fd fdd5 	bl	8001d4c <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041a6:	f7fd fdd1 	bl	8001d4c <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e12f      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCC_OscConfig+0x270>)
 80041ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f0      	beq.n	80041a6 <HAL_RCC_OscConfig+0x22e>
 80041c4:	e01c      	b.n	8004200 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041c6:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <HAL_RCC_OscConfig+0x278>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fd fdbe 	bl	8001d4c <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d2:	e00f      	b.n	80041f4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d4:	f7fd fdba 	bl	8001d4c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d908      	bls.n	80041f4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e118      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
 80041e6:	bf00      	nop
 80041e8:	40023800 	.word	0x40023800
 80041ec:	42470000 	.word	0x42470000
 80041f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f4:	4b8a      	ldr	r3, [pc, #552]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 80041f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e9      	bne.n	80041d4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8097 	beq.w	800433c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800420e:	2300      	movs	r3, #0
 8004210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004212:	4b83      	ldr	r3, [pc, #524]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10f      	bne.n	800423e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	4b7f      	ldr	r3, [pc, #508]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	4a7e      	ldr	r2, [pc, #504]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 8004228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422c:	6413      	str	r3, [r2, #64]	; 0x40
 800422e:	4b7c      	ldr	r3, [pc, #496]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800423a:	2301      	movs	r3, #1
 800423c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423e:	4b79      	ldr	r3, [pc, #484]	; (8004424 <HAL_RCC_OscConfig+0x4ac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d118      	bne.n	800427c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800424a:	4b76      	ldr	r3, [pc, #472]	; (8004424 <HAL_RCC_OscConfig+0x4ac>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a75      	ldr	r2, [pc, #468]	; (8004424 <HAL_RCC_OscConfig+0x4ac>)
 8004250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004256:	f7fd fd79 	bl	8001d4c <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425e:	f7fd fd75 	bl	8001d4c <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e0d3      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004270:	4b6c      	ldr	r3, [pc, #432]	; (8004424 <HAL_RCC_OscConfig+0x4ac>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d106      	bne.n	8004292 <HAL_RCC_OscConfig+0x31a>
 8004284:	4b66      	ldr	r3, [pc, #408]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	4a65      	ldr	r2, [pc, #404]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6713      	str	r3, [r2, #112]	; 0x70
 8004290:	e01c      	b.n	80042cc <HAL_RCC_OscConfig+0x354>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b05      	cmp	r3, #5
 8004298:	d10c      	bne.n	80042b4 <HAL_RCC_OscConfig+0x33c>
 800429a:	4b61      	ldr	r3, [pc, #388]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	4a60      	ldr	r2, [pc, #384]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 80042a0:	f043 0304 	orr.w	r3, r3, #4
 80042a4:	6713      	str	r3, [r2, #112]	; 0x70
 80042a6:	4b5e      	ldr	r3, [pc, #376]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	4a5d      	ldr	r2, [pc, #372]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6713      	str	r3, [r2, #112]	; 0x70
 80042b2:	e00b      	b.n	80042cc <HAL_RCC_OscConfig+0x354>
 80042b4:	4b5a      	ldr	r3, [pc, #360]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	4a59      	ldr	r2, [pc, #356]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	6713      	str	r3, [r2, #112]	; 0x70
 80042c0:	4b57      	ldr	r3, [pc, #348]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 80042c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c4:	4a56      	ldr	r2, [pc, #344]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 80042c6:	f023 0304 	bic.w	r3, r3, #4
 80042ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d015      	beq.n	8004300 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fd fd3a 	bl	8001d4c <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042dc:	f7fd fd36 	bl	8001d4c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e092      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f2:	4b4b      	ldr	r3, [pc, #300]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0ee      	beq.n	80042dc <HAL_RCC_OscConfig+0x364>
 80042fe:	e014      	b.n	800432a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fd fd24 	bl	8001d4c <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004306:	e00a      	b.n	800431e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004308:	f7fd fd20 	bl	8001d4c <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	; 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e07c      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431e:	4b40      	ldr	r3, [pc, #256]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1ee      	bne.n	8004308 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d105      	bne.n	800433c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004330:	4b3b      	ldr	r3, [pc, #236]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	4a3a      	ldr	r2, [pc, #232]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 8004336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d068      	beq.n	8004416 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004344:	4b36      	ldr	r3, [pc, #216]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 030c 	and.w	r3, r3, #12
 800434c:	2b08      	cmp	r3, #8
 800434e:	d060      	beq.n	8004412 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d145      	bne.n	80043e4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004358:	4b33      	ldr	r3, [pc, #204]	; (8004428 <HAL_RCC_OscConfig+0x4b0>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435e:	f7fd fcf5 	bl	8001d4c <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004366:	f7fd fcf1 	bl	8001d4c <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e04f      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004378:	4b29      	ldr	r3, [pc, #164]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f0      	bne.n	8004366 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	019b      	lsls	r3, r3, #6
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	3b01      	subs	r3, #1
 800439e:	041b      	lsls	r3, r3, #16
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	061b      	lsls	r3, r3, #24
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	071b      	lsls	r3, r3, #28
 80043b0:	491b      	ldr	r1, [pc, #108]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b6:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <HAL_RCC_OscConfig+0x4b0>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fd fcc6 	bl	8001d4c <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fd fcc2 	bl	8001d4c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e020      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x44c>
 80043e2:	e018      	b.n	8004416 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e4:	4b10      	ldr	r3, [pc, #64]	; (8004428 <HAL_RCC_OscConfig+0x4b0>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ea:	f7fd fcaf 	bl	8001d4c <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f2:	f7fd fcab 	bl	8001d4c <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e009      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_RCC_OscConfig+0x4a8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <HAL_RCC_OscConfig+0x47a>
 8004410:	e001      	b.n	8004416 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40023800 	.word	0x40023800
 8004424:	40007000 	.word	0x40007000
 8004428:	42470060 	.word	0x42470060

0800442c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e01d      	b.n	800447a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fd fa1c 	bl	8001890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f000 fa14 	bl	8004898 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004482:	b480      	push	{r7}
 8004484:	b085      	sub	sp, #20
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0201 	orr.w	r2, r2, #1
 8004498:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b06      	cmp	r3, #6
 80044aa:	d007      	beq.n	80044bc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d122      	bne.n	8004526 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d11b      	bne.n	8004526 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f06f 0202 	mvn.w	r2, #2
 80044f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f9a5 	bl	800485c <HAL_TIM_IC_CaptureCallback>
 8004512:	e005      	b.n	8004520 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f997 	bl	8004848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f9a8 	bl	8004870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b04      	cmp	r3, #4
 8004532:	d122      	bne.n	800457a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b04      	cmp	r3, #4
 8004540:	d11b      	bne.n	800457a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f06f 0204 	mvn.w	r2, #4
 800454a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f97b 	bl	800485c <HAL_TIM_IC_CaptureCallback>
 8004566:	e005      	b.n	8004574 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f96d 	bl	8004848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f97e 	bl	8004870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b08      	cmp	r3, #8
 8004586:	d122      	bne.n	80045ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b08      	cmp	r3, #8
 8004594:	d11b      	bne.n	80045ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f06f 0208 	mvn.w	r2, #8
 800459e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2204      	movs	r2, #4
 80045a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f003 0303 	and.w	r3, r3, #3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f951 	bl	800485c <HAL_TIM_IC_CaptureCallback>
 80045ba:	e005      	b.n	80045c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f943 	bl	8004848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f954 	bl	8004870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d122      	bne.n	8004622 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	2b10      	cmp	r3, #16
 80045e8:	d11b      	bne.n	8004622 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f06f 0210 	mvn.w	r2, #16
 80045f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2208      	movs	r2, #8
 80045f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f927 	bl	800485c <HAL_TIM_IC_CaptureCallback>
 800460e:	e005      	b.n	800461c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f919 	bl	8004848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f92a 	bl	8004870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b01      	cmp	r3, #1
 800462e:	d10e      	bne.n	800464e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b01      	cmp	r3, #1
 800463c:	d107      	bne.n	800464e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f06f 0201 	mvn.w	r2, #1
 8004646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7fd f835 	bl	80016b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004658:	2b80      	cmp	r3, #128	; 0x80
 800465a:	d10e      	bne.n	800467a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b80      	cmp	r3, #128	; 0x80
 8004668:	d107      	bne.n	800467a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 facf 	bl	8004c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d10e      	bne.n	80046a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	d107      	bne.n	80046a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800469e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f8ef 	bl	8004884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d10e      	bne.n	80046d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d107      	bne.n	80046d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f06f 0220 	mvn.w	r2, #32
 80046ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fa99 	bl	8004c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_TIM_ConfigClockSource+0x18>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e0a6      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x166>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004710:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004718:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b40      	cmp	r3, #64	; 0x40
 8004728:	d067      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x120>
 800472a:	2b40      	cmp	r3, #64	; 0x40
 800472c:	d80b      	bhi.n	8004746 <HAL_TIM_ConfigClockSource+0x6c>
 800472e:	2b10      	cmp	r3, #16
 8004730:	d073      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x140>
 8004732:	2b10      	cmp	r3, #16
 8004734:	d802      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x62>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d06f      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800473a:	e078      	b.n	800482e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800473c:	2b20      	cmp	r3, #32
 800473e:	d06c      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x140>
 8004740:	2b30      	cmp	r3, #48	; 0x30
 8004742:	d06a      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004744:	e073      	b.n	800482e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004746:	2b70      	cmp	r3, #112	; 0x70
 8004748:	d00d      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x8c>
 800474a:	2b70      	cmp	r3, #112	; 0x70
 800474c:	d804      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x7e>
 800474e:	2b50      	cmp	r3, #80	; 0x50
 8004750:	d033      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0xe0>
 8004752:	2b60      	cmp	r3, #96	; 0x60
 8004754:	d041      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004756:	e06a      	b.n	800482e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475c:	d066      	beq.n	800482c <HAL_TIM_ConfigClockSource+0x152>
 800475e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004762:	d017      	beq.n	8004794 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004764:	e063      	b.n	800482e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6899      	ldr	r1, [r3, #8]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f000 f9a9 	bl	8004acc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004788:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	609a      	str	r2, [r3, #8]
      break;
 8004792:	e04c      	b.n	800482e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6899      	ldr	r1, [r3, #8]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f000 f992 	bl	8004acc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047b6:	609a      	str	r2, [r3, #8]
      break;
 80047b8:	e039      	b.n	800482e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6859      	ldr	r1, [r3, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f000 f906 	bl	80049d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2150      	movs	r1, #80	; 0x50
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 f95f 	bl	8004a96 <TIM_ITRx_SetConfig>
      break;
 80047d8:	e029      	b.n	800482e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6859      	ldr	r1, [r3, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f000 f925 	bl	8004a36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2160      	movs	r1, #96	; 0x60
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 f94f 	bl	8004a96 <TIM_ITRx_SetConfig>
      break;
 80047f8:	e019      	b.n	800482e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6859      	ldr	r1, [r3, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	461a      	mov	r2, r3
 8004808:	f000 f8e6 	bl	80049d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2140      	movs	r1, #64	; 0x40
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f93f 	bl	8004a96 <TIM_ITRx_SetConfig>
      break;
 8004818:	e009      	b.n	800482e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f000 f936 	bl	8004a96 <TIM_ITRx_SetConfig>
      break;
 800482a:	e000      	b.n	800482e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800482c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a40      	ldr	r2, [pc, #256]	; (80049ac <TIM_Base_SetConfig+0x114>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d013      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b6:	d00f      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3d      	ldr	r2, [pc, #244]	; (80049b0 <TIM_Base_SetConfig+0x118>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00b      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a3c      	ldr	r2, [pc, #240]	; (80049b4 <TIM_Base_SetConfig+0x11c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d007      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a3b      	ldr	r2, [pc, #236]	; (80049b8 <TIM_Base_SetConfig+0x120>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a3a      	ldr	r2, [pc, #232]	; (80049bc <TIM_Base_SetConfig+0x124>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d108      	bne.n	80048ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2f      	ldr	r2, [pc, #188]	; (80049ac <TIM_Base_SetConfig+0x114>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d02b      	beq.n	800494a <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f8:	d027      	beq.n	800494a <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2c      	ldr	r2, [pc, #176]	; (80049b0 <TIM_Base_SetConfig+0x118>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d023      	beq.n	800494a <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2b      	ldr	r2, [pc, #172]	; (80049b4 <TIM_Base_SetConfig+0x11c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d01f      	beq.n	800494a <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2a      	ldr	r2, [pc, #168]	; (80049b8 <TIM_Base_SetConfig+0x120>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d01b      	beq.n	800494a <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a29      	ldr	r2, [pc, #164]	; (80049bc <TIM_Base_SetConfig+0x124>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d017      	beq.n	800494a <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a28      	ldr	r2, [pc, #160]	; (80049c0 <TIM_Base_SetConfig+0x128>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d013      	beq.n	800494a <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a27      	ldr	r2, [pc, #156]	; (80049c4 <TIM_Base_SetConfig+0x12c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00f      	beq.n	800494a <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a26      	ldr	r2, [pc, #152]	; (80049c8 <TIM_Base_SetConfig+0x130>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00b      	beq.n	800494a <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a25      	ldr	r2, [pc, #148]	; (80049cc <TIM_Base_SetConfig+0x134>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d007      	beq.n	800494a <TIM_Base_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a24      	ldr	r2, [pc, #144]	; (80049d0 <TIM_Base_SetConfig+0x138>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d003      	beq.n	800494a <TIM_Base_SetConfig+0xb2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a23      	ldr	r2, [pc, #140]	; (80049d4 <TIM_Base_SetConfig+0x13c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d108      	bne.n	800495c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <TIM_Base_SetConfig+0x114>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_Base_SetConfig+0xf8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a0c      	ldr	r2, [pc, #48]	; (80049bc <TIM_Base_SetConfig+0x124>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d103      	bne.n	8004998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	615a      	str	r2, [r3, #20]
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40000c00 	.word	0x40000c00
 80049bc:	40010400 	.word	0x40010400
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40014400 	.word	0x40014400
 80049c8:	40014800 	.word	0x40014800
 80049cc:	40001800 	.word	0x40001800
 80049d0:	40001c00 	.word	0x40001c00
 80049d4:	40002000 	.word	0x40002000

080049d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	f023 0201 	bic.w	r2, r3, #1
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f023 030a 	bic.w	r3, r3, #10
 8004a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b087      	sub	sp, #28
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f023 0210 	bic.w	r2, r3, #16
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	031b      	lsls	r3, r3, #12
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b085      	sub	sp, #20
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f043 0307 	orr.w	r3, r3, #7
 8004ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	609a      	str	r2, [r3, #8]
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	021a      	lsls	r2, r3, #8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	609a      	str	r2, [r3, #8]
}
 8004b00:	bf00      	nop
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e05a      	b.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d022      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b70:	d01d      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d018      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00e      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d009      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d004      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a15      	ldr	r2, [pc, #84]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d10c      	bne.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40000400 	.word	0x40000400
 8004bf0:	40000800 	.word	0x40000800
 8004bf4:	40000c00 	.word	0x40000c00
 8004bf8:	40010400 	.word	0x40010400
 8004bfc:	40014000 	.word	0x40014000
 8004c00:	40001800 	.word	0x40001800

08004c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e03f      	b.n	8004cbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fc fe7e 	bl	8001954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2224      	movs	r2, #36	; 0x24
 8004c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f90b 	bl	8004e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695a      	ldr	r2, [r3, #20]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b088      	sub	sp, #32
 8004cca:	af02      	add	r7, sp, #8
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	f040 8083 	bne.w	8004dee <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <HAL_UART_Transmit+0x2e>
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e07b      	b.n	8004df0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_Transmit+0x40>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e074      	b.n	8004df0 <HAL_UART_Transmit+0x12a>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2221      	movs	r2, #33	; 0x21
 8004d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d1c:	f7fd f816 	bl	8001d4c <HAL_GetTick>
 8004d20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	88fa      	ldrh	r2, [r7, #6]
 8004d26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	88fa      	ldrh	r2, [r7, #6]
 8004d2c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004d36:	e042      	b.n	8004dbe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4e:	d122      	bne.n	8004d96 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2200      	movs	r2, #0
 8004d58:	2180      	movs	r1, #128	; 0x80
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f84c 	bl	8004df8 <UART_WaitOnFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e042      	b.n	8004df0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d7c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d103      	bne.n	8004d8e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	3302      	adds	r3, #2
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	e017      	b.n	8004dbe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	3301      	adds	r3, #1
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	e013      	b.n	8004dbe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2180      	movs	r1, #128	; 0x80
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f829 	bl	8004df8 <UART_WaitOnFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e01f      	b.n	8004df0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	60ba      	str	r2, [r7, #8]
 8004db6:	781a      	ldrb	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1b7      	bne.n	8004d38 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2140      	movs	r1, #64	; 0x40
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f810 	bl	8004df8 <UART_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e006      	b.n	8004df0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e000      	b.n	8004df0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004dee:	2302      	movs	r3, #2
  }
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e08:	e02c      	b.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e10:	d028      	beq.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e18:	f7fc ff98 	bl	8001d4c <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d21d      	bcs.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695a      	ldr	r2, [r3, #20]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e00f      	b.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	bf0c      	ite	eq
 8004e74:	2301      	moveq	r3, #1
 8004e76:	2300      	movne	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d0c3      	beq.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ece:	f023 030c 	bic.w	r3, r3, #12
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	68f9      	ldr	r1, [r7, #12]
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004efa:	f040 818b 	bne.w	8005214 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4ac1      	ldr	r2, [pc, #772]	; (8005208 <UART_SetConfig+0x37c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d005      	beq.n	8004f14 <UART_SetConfig+0x88>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4abf      	ldr	r2, [pc, #764]	; (800520c <UART_SetConfig+0x380>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	f040 80bd 	bne.w	800508e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f14:	f7fe fe7c 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 8004f18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	461d      	mov	r5, r3
 8004f1e:	f04f 0600 	mov.w	r6, #0
 8004f22:	46a8      	mov	r8, r5
 8004f24:	46b1      	mov	r9, r6
 8004f26:	eb18 0308 	adds.w	r3, r8, r8
 8004f2a:	eb49 0409 	adc.w	r4, r9, r9
 8004f2e:	4698      	mov	r8, r3
 8004f30:	46a1      	mov	r9, r4
 8004f32:	eb18 0805 	adds.w	r8, r8, r5
 8004f36:	eb49 0906 	adc.w	r9, r9, r6
 8004f3a:	f04f 0100 	mov.w	r1, #0
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f4e:	4688      	mov	r8, r1
 8004f50:	4691      	mov	r9, r2
 8004f52:	eb18 0005 	adds.w	r0, r8, r5
 8004f56:	eb49 0106 	adc.w	r1, r9, r6
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	461d      	mov	r5, r3
 8004f60:	f04f 0600 	mov.w	r6, #0
 8004f64:	196b      	adds	r3, r5, r5
 8004f66:	eb46 0406 	adc.w	r4, r6, r6
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	4623      	mov	r3, r4
 8004f6e:	f7fb fe5b 	bl	8000c28 <__aeabi_uldivmod>
 8004f72:	4603      	mov	r3, r0
 8004f74:	460c      	mov	r4, r1
 8004f76:	461a      	mov	r2, r3
 8004f78:	4ba5      	ldr	r3, [pc, #660]	; (8005210 <UART_SetConfig+0x384>)
 8004f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	461d      	mov	r5, r3
 8004f88:	f04f 0600 	mov.w	r6, #0
 8004f8c:	46a9      	mov	r9, r5
 8004f8e:	46b2      	mov	sl, r6
 8004f90:	eb19 0309 	adds.w	r3, r9, r9
 8004f94:	eb4a 040a 	adc.w	r4, sl, sl
 8004f98:	4699      	mov	r9, r3
 8004f9a:	46a2      	mov	sl, r4
 8004f9c:	eb19 0905 	adds.w	r9, r9, r5
 8004fa0:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fa4:	f04f 0100 	mov.w	r1, #0
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fb8:	4689      	mov	r9, r1
 8004fba:	4692      	mov	sl, r2
 8004fbc:	eb19 0005 	adds.w	r0, r9, r5
 8004fc0:	eb4a 0106 	adc.w	r1, sl, r6
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	461d      	mov	r5, r3
 8004fca:	f04f 0600 	mov.w	r6, #0
 8004fce:	196b      	adds	r3, r5, r5
 8004fd0:	eb46 0406 	adc.w	r4, r6, r6
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4623      	mov	r3, r4
 8004fd8:	f7fb fe26 	bl	8000c28 <__aeabi_uldivmod>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4b8b      	ldr	r3, [pc, #556]	; (8005210 <UART_SetConfig+0x384>)
 8004fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	2164      	movs	r1, #100	; 0x64
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	3332      	adds	r3, #50	; 0x32
 8004ff6:	4a86      	ldr	r2, [pc, #536]	; (8005210 <UART_SetConfig+0x384>)
 8004ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005004:	4498      	add	r8, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	461d      	mov	r5, r3
 800500a:	f04f 0600 	mov.w	r6, #0
 800500e:	46a9      	mov	r9, r5
 8005010:	46b2      	mov	sl, r6
 8005012:	eb19 0309 	adds.w	r3, r9, r9
 8005016:	eb4a 040a 	adc.w	r4, sl, sl
 800501a:	4699      	mov	r9, r3
 800501c:	46a2      	mov	sl, r4
 800501e:	eb19 0905 	adds.w	r9, r9, r5
 8005022:	eb4a 0a06 	adc.w	sl, sl, r6
 8005026:	f04f 0100 	mov.w	r1, #0
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005032:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005036:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800503a:	4689      	mov	r9, r1
 800503c:	4692      	mov	sl, r2
 800503e:	eb19 0005 	adds.w	r0, r9, r5
 8005042:	eb4a 0106 	adc.w	r1, sl, r6
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	461d      	mov	r5, r3
 800504c:	f04f 0600 	mov.w	r6, #0
 8005050:	196b      	adds	r3, r5, r5
 8005052:	eb46 0406 	adc.w	r4, r6, r6
 8005056:	461a      	mov	r2, r3
 8005058:	4623      	mov	r3, r4
 800505a:	f7fb fde5 	bl	8000c28 <__aeabi_uldivmod>
 800505e:	4603      	mov	r3, r0
 8005060:	460c      	mov	r4, r1
 8005062:	461a      	mov	r2, r3
 8005064:	4b6a      	ldr	r3, [pc, #424]	; (8005210 <UART_SetConfig+0x384>)
 8005066:	fba3 1302 	umull	r1, r3, r3, r2
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	2164      	movs	r1, #100	; 0x64
 800506e:	fb01 f303 	mul.w	r3, r1, r3
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	3332      	adds	r3, #50	; 0x32
 8005078:	4a65      	ldr	r2, [pc, #404]	; (8005210 <UART_SetConfig+0x384>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	f003 0207 	and.w	r2, r3, #7
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4442      	add	r2, r8
 800508a:	609a      	str	r2, [r3, #8]
 800508c:	e26f      	b.n	800556e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800508e:	f7fe fdab 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 8005092:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	461d      	mov	r5, r3
 8005098:	f04f 0600 	mov.w	r6, #0
 800509c:	46a8      	mov	r8, r5
 800509e:	46b1      	mov	r9, r6
 80050a0:	eb18 0308 	adds.w	r3, r8, r8
 80050a4:	eb49 0409 	adc.w	r4, r9, r9
 80050a8:	4698      	mov	r8, r3
 80050aa:	46a1      	mov	r9, r4
 80050ac:	eb18 0805 	adds.w	r8, r8, r5
 80050b0:	eb49 0906 	adc.w	r9, r9, r6
 80050b4:	f04f 0100 	mov.w	r1, #0
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050c8:	4688      	mov	r8, r1
 80050ca:	4691      	mov	r9, r2
 80050cc:	eb18 0005 	adds.w	r0, r8, r5
 80050d0:	eb49 0106 	adc.w	r1, r9, r6
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	461d      	mov	r5, r3
 80050da:	f04f 0600 	mov.w	r6, #0
 80050de:	196b      	adds	r3, r5, r5
 80050e0:	eb46 0406 	adc.w	r4, r6, r6
 80050e4:	461a      	mov	r2, r3
 80050e6:	4623      	mov	r3, r4
 80050e8:	f7fb fd9e 	bl	8000c28 <__aeabi_uldivmod>
 80050ec:	4603      	mov	r3, r0
 80050ee:	460c      	mov	r4, r1
 80050f0:	461a      	mov	r2, r3
 80050f2:	4b47      	ldr	r3, [pc, #284]	; (8005210 <UART_SetConfig+0x384>)
 80050f4:	fba3 2302 	umull	r2, r3, r3, r2
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	461d      	mov	r5, r3
 8005102:	f04f 0600 	mov.w	r6, #0
 8005106:	46a9      	mov	r9, r5
 8005108:	46b2      	mov	sl, r6
 800510a:	eb19 0309 	adds.w	r3, r9, r9
 800510e:	eb4a 040a 	adc.w	r4, sl, sl
 8005112:	4699      	mov	r9, r3
 8005114:	46a2      	mov	sl, r4
 8005116:	eb19 0905 	adds.w	r9, r9, r5
 800511a:	eb4a 0a06 	adc.w	sl, sl, r6
 800511e:	f04f 0100 	mov.w	r1, #0
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800512a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800512e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005132:	4689      	mov	r9, r1
 8005134:	4692      	mov	sl, r2
 8005136:	eb19 0005 	adds.w	r0, r9, r5
 800513a:	eb4a 0106 	adc.w	r1, sl, r6
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	461d      	mov	r5, r3
 8005144:	f04f 0600 	mov.w	r6, #0
 8005148:	196b      	adds	r3, r5, r5
 800514a:	eb46 0406 	adc.w	r4, r6, r6
 800514e:	461a      	mov	r2, r3
 8005150:	4623      	mov	r3, r4
 8005152:	f7fb fd69 	bl	8000c28 <__aeabi_uldivmod>
 8005156:	4603      	mov	r3, r0
 8005158:	460c      	mov	r4, r1
 800515a:	461a      	mov	r2, r3
 800515c:	4b2c      	ldr	r3, [pc, #176]	; (8005210 <UART_SetConfig+0x384>)
 800515e:	fba3 1302 	umull	r1, r3, r3, r2
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	2164      	movs	r1, #100	; 0x64
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	3332      	adds	r3, #50	; 0x32
 8005170:	4a27      	ldr	r2, [pc, #156]	; (8005210 <UART_SetConfig+0x384>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800517e:	4498      	add	r8, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	461d      	mov	r5, r3
 8005184:	f04f 0600 	mov.w	r6, #0
 8005188:	46a9      	mov	r9, r5
 800518a:	46b2      	mov	sl, r6
 800518c:	eb19 0309 	adds.w	r3, r9, r9
 8005190:	eb4a 040a 	adc.w	r4, sl, sl
 8005194:	4699      	mov	r9, r3
 8005196:	46a2      	mov	sl, r4
 8005198:	eb19 0905 	adds.w	r9, r9, r5
 800519c:	eb4a 0a06 	adc.w	sl, sl, r6
 80051a0:	f04f 0100 	mov.w	r1, #0
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051b4:	4689      	mov	r9, r1
 80051b6:	4692      	mov	sl, r2
 80051b8:	eb19 0005 	adds.w	r0, r9, r5
 80051bc:	eb4a 0106 	adc.w	r1, sl, r6
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	461d      	mov	r5, r3
 80051c6:	f04f 0600 	mov.w	r6, #0
 80051ca:	196b      	adds	r3, r5, r5
 80051cc:	eb46 0406 	adc.w	r4, r6, r6
 80051d0:	461a      	mov	r2, r3
 80051d2:	4623      	mov	r3, r4
 80051d4:	f7fb fd28 	bl	8000c28 <__aeabi_uldivmod>
 80051d8:	4603      	mov	r3, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	461a      	mov	r2, r3
 80051de:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <UART_SetConfig+0x384>)
 80051e0:	fba3 1302 	umull	r1, r3, r3, r2
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	2164      	movs	r1, #100	; 0x64
 80051e8:	fb01 f303 	mul.w	r3, r1, r3
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	3332      	adds	r3, #50	; 0x32
 80051f2:	4a07      	ldr	r2, [pc, #28]	; (8005210 <UART_SetConfig+0x384>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	095b      	lsrs	r3, r3, #5
 80051fa:	f003 0207 	and.w	r2, r3, #7
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4442      	add	r2, r8
 8005204:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005206:	e1b2      	b.n	800556e <UART_SetConfig+0x6e2>
 8005208:	40011000 	.word	0x40011000
 800520c:	40011400 	.word	0x40011400
 8005210:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4ad7      	ldr	r2, [pc, #860]	; (8005578 <UART_SetConfig+0x6ec>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d005      	beq.n	800522a <UART_SetConfig+0x39e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4ad6      	ldr	r2, [pc, #856]	; (800557c <UART_SetConfig+0x6f0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	f040 80d1 	bne.w	80053cc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800522a:	f7fe fcf1 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 800522e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	469a      	mov	sl, r3
 8005234:	f04f 0b00 	mov.w	fp, #0
 8005238:	46d0      	mov	r8, sl
 800523a:	46d9      	mov	r9, fp
 800523c:	eb18 0308 	adds.w	r3, r8, r8
 8005240:	eb49 0409 	adc.w	r4, r9, r9
 8005244:	4698      	mov	r8, r3
 8005246:	46a1      	mov	r9, r4
 8005248:	eb18 080a 	adds.w	r8, r8, sl
 800524c:	eb49 090b 	adc.w	r9, r9, fp
 8005250:	f04f 0100 	mov.w	r1, #0
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800525c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005260:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005264:	4688      	mov	r8, r1
 8005266:	4691      	mov	r9, r2
 8005268:	eb1a 0508 	adds.w	r5, sl, r8
 800526c:	eb4b 0609 	adc.w	r6, fp, r9
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4619      	mov	r1, r3
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	f04f 0400 	mov.w	r4, #0
 8005282:	0094      	lsls	r4, r2, #2
 8005284:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005288:	008b      	lsls	r3, r1, #2
 800528a:	461a      	mov	r2, r3
 800528c:	4623      	mov	r3, r4
 800528e:	4628      	mov	r0, r5
 8005290:	4631      	mov	r1, r6
 8005292:	f7fb fcc9 	bl	8000c28 <__aeabi_uldivmod>
 8005296:	4603      	mov	r3, r0
 8005298:	460c      	mov	r4, r1
 800529a:	461a      	mov	r2, r3
 800529c:	4bb8      	ldr	r3, [pc, #736]	; (8005580 <UART_SetConfig+0x6f4>)
 800529e:	fba3 2302 	umull	r2, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	469b      	mov	fp, r3
 80052ac:	f04f 0c00 	mov.w	ip, #0
 80052b0:	46d9      	mov	r9, fp
 80052b2:	46e2      	mov	sl, ip
 80052b4:	eb19 0309 	adds.w	r3, r9, r9
 80052b8:	eb4a 040a 	adc.w	r4, sl, sl
 80052bc:	4699      	mov	r9, r3
 80052be:	46a2      	mov	sl, r4
 80052c0:	eb19 090b 	adds.w	r9, r9, fp
 80052c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052c8:	f04f 0100 	mov.w	r1, #0
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052dc:	4689      	mov	r9, r1
 80052de:	4692      	mov	sl, r2
 80052e0:	eb1b 0509 	adds.w	r5, fp, r9
 80052e4:	eb4c 060a 	adc.w	r6, ip, sl
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	4619      	mov	r1, r3
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	f04f 0400 	mov.w	r4, #0
 80052fa:	0094      	lsls	r4, r2, #2
 80052fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005300:	008b      	lsls	r3, r1, #2
 8005302:	461a      	mov	r2, r3
 8005304:	4623      	mov	r3, r4
 8005306:	4628      	mov	r0, r5
 8005308:	4631      	mov	r1, r6
 800530a:	f7fb fc8d 	bl	8000c28 <__aeabi_uldivmod>
 800530e:	4603      	mov	r3, r0
 8005310:	460c      	mov	r4, r1
 8005312:	461a      	mov	r2, r3
 8005314:	4b9a      	ldr	r3, [pc, #616]	; (8005580 <UART_SetConfig+0x6f4>)
 8005316:	fba3 1302 	umull	r1, r3, r3, r2
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	2164      	movs	r1, #100	; 0x64
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	3332      	adds	r3, #50	; 0x32
 8005328:	4a95      	ldr	r2, [pc, #596]	; (8005580 <UART_SetConfig+0x6f4>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005334:	4498      	add	r8, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	469b      	mov	fp, r3
 800533a:	f04f 0c00 	mov.w	ip, #0
 800533e:	46d9      	mov	r9, fp
 8005340:	46e2      	mov	sl, ip
 8005342:	eb19 0309 	adds.w	r3, r9, r9
 8005346:	eb4a 040a 	adc.w	r4, sl, sl
 800534a:	4699      	mov	r9, r3
 800534c:	46a2      	mov	sl, r4
 800534e:	eb19 090b 	adds.w	r9, r9, fp
 8005352:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005356:	f04f 0100 	mov.w	r1, #0
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005362:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005366:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800536a:	4689      	mov	r9, r1
 800536c:	4692      	mov	sl, r2
 800536e:	eb1b 0509 	adds.w	r5, fp, r9
 8005372:	eb4c 060a 	adc.w	r6, ip, sl
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	4619      	mov	r1, r3
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	f04f 0400 	mov.w	r4, #0
 8005388:	0094      	lsls	r4, r2, #2
 800538a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800538e:	008b      	lsls	r3, r1, #2
 8005390:	461a      	mov	r2, r3
 8005392:	4623      	mov	r3, r4
 8005394:	4628      	mov	r0, r5
 8005396:	4631      	mov	r1, r6
 8005398:	f7fb fc46 	bl	8000c28 <__aeabi_uldivmod>
 800539c:	4603      	mov	r3, r0
 800539e:	460c      	mov	r4, r1
 80053a0:	461a      	mov	r2, r3
 80053a2:	4b77      	ldr	r3, [pc, #476]	; (8005580 <UART_SetConfig+0x6f4>)
 80053a4:	fba3 1302 	umull	r1, r3, r3, r2
 80053a8:	095b      	lsrs	r3, r3, #5
 80053aa:	2164      	movs	r1, #100	; 0x64
 80053ac:	fb01 f303 	mul.w	r3, r1, r3
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	3332      	adds	r3, #50	; 0x32
 80053b6:	4a72      	ldr	r2, [pc, #456]	; (8005580 <UART_SetConfig+0x6f4>)
 80053b8:	fba2 2303 	umull	r2, r3, r2, r3
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	f003 020f 	and.w	r2, r3, #15
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4442      	add	r2, r8
 80053c8:	609a      	str	r2, [r3, #8]
 80053ca:	e0d0      	b.n	800556e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80053cc:	f7fe fc0c 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 80053d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	469a      	mov	sl, r3
 80053d6:	f04f 0b00 	mov.w	fp, #0
 80053da:	46d0      	mov	r8, sl
 80053dc:	46d9      	mov	r9, fp
 80053de:	eb18 0308 	adds.w	r3, r8, r8
 80053e2:	eb49 0409 	adc.w	r4, r9, r9
 80053e6:	4698      	mov	r8, r3
 80053e8:	46a1      	mov	r9, r4
 80053ea:	eb18 080a 	adds.w	r8, r8, sl
 80053ee:	eb49 090b 	adc.w	r9, r9, fp
 80053f2:	f04f 0100 	mov.w	r1, #0
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005402:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005406:	4688      	mov	r8, r1
 8005408:	4691      	mov	r9, r2
 800540a:	eb1a 0508 	adds.w	r5, sl, r8
 800540e:	eb4b 0609 	adc.w	r6, fp, r9
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	4619      	mov	r1, r3
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	f04f 0400 	mov.w	r4, #0
 8005424:	0094      	lsls	r4, r2, #2
 8005426:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800542a:	008b      	lsls	r3, r1, #2
 800542c:	461a      	mov	r2, r3
 800542e:	4623      	mov	r3, r4
 8005430:	4628      	mov	r0, r5
 8005432:	4631      	mov	r1, r6
 8005434:	f7fb fbf8 	bl	8000c28 <__aeabi_uldivmod>
 8005438:	4603      	mov	r3, r0
 800543a:	460c      	mov	r4, r1
 800543c:	461a      	mov	r2, r3
 800543e:	4b50      	ldr	r3, [pc, #320]	; (8005580 <UART_SetConfig+0x6f4>)
 8005440:	fba3 2302 	umull	r2, r3, r3, r2
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	469b      	mov	fp, r3
 800544e:	f04f 0c00 	mov.w	ip, #0
 8005452:	46d9      	mov	r9, fp
 8005454:	46e2      	mov	sl, ip
 8005456:	eb19 0309 	adds.w	r3, r9, r9
 800545a:	eb4a 040a 	adc.w	r4, sl, sl
 800545e:	4699      	mov	r9, r3
 8005460:	46a2      	mov	sl, r4
 8005462:	eb19 090b 	adds.w	r9, r9, fp
 8005466:	eb4a 0a0c 	adc.w	sl, sl, ip
 800546a:	f04f 0100 	mov.w	r1, #0
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005476:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800547a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800547e:	4689      	mov	r9, r1
 8005480:	4692      	mov	sl, r2
 8005482:	eb1b 0509 	adds.w	r5, fp, r9
 8005486:	eb4c 060a 	adc.w	r6, ip, sl
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	4619      	mov	r1, r3
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	f04f 0400 	mov.w	r4, #0
 800549c:	0094      	lsls	r4, r2, #2
 800549e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054a2:	008b      	lsls	r3, r1, #2
 80054a4:	461a      	mov	r2, r3
 80054a6:	4623      	mov	r3, r4
 80054a8:	4628      	mov	r0, r5
 80054aa:	4631      	mov	r1, r6
 80054ac:	f7fb fbbc 	bl	8000c28 <__aeabi_uldivmod>
 80054b0:	4603      	mov	r3, r0
 80054b2:	460c      	mov	r4, r1
 80054b4:	461a      	mov	r2, r3
 80054b6:	4b32      	ldr	r3, [pc, #200]	; (8005580 <UART_SetConfig+0x6f4>)
 80054b8:	fba3 1302 	umull	r1, r3, r3, r2
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	2164      	movs	r1, #100	; 0x64
 80054c0:	fb01 f303 	mul.w	r3, r1, r3
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	3332      	adds	r3, #50	; 0x32
 80054ca:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <UART_SetConfig+0x6f4>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054d6:	4498      	add	r8, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	469b      	mov	fp, r3
 80054dc:	f04f 0c00 	mov.w	ip, #0
 80054e0:	46d9      	mov	r9, fp
 80054e2:	46e2      	mov	sl, ip
 80054e4:	eb19 0309 	adds.w	r3, r9, r9
 80054e8:	eb4a 040a 	adc.w	r4, sl, sl
 80054ec:	4699      	mov	r9, r3
 80054ee:	46a2      	mov	sl, r4
 80054f0:	eb19 090b 	adds.w	r9, r9, fp
 80054f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054f8:	f04f 0100 	mov.w	r1, #0
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005504:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005508:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800550c:	4689      	mov	r9, r1
 800550e:	4692      	mov	sl, r2
 8005510:	eb1b 0509 	adds.w	r5, fp, r9
 8005514:	eb4c 060a 	adc.w	r6, ip, sl
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	4619      	mov	r1, r3
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	f04f 0400 	mov.w	r4, #0
 800552a:	0094      	lsls	r4, r2, #2
 800552c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005530:	008b      	lsls	r3, r1, #2
 8005532:	461a      	mov	r2, r3
 8005534:	4623      	mov	r3, r4
 8005536:	4628      	mov	r0, r5
 8005538:	4631      	mov	r1, r6
 800553a:	f7fb fb75 	bl	8000c28 <__aeabi_uldivmod>
 800553e:	4603      	mov	r3, r0
 8005540:	460c      	mov	r4, r1
 8005542:	461a      	mov	r2, r3
 8005544:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <UART_SetConfig+0x6f4>)
 8005546:	fba3 1302 	umull	r1, r3, r3, r2
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	2164      	movs	r1, #100	; 0x64
 800554e:	fb01 f303 	mul.w	r3, r1, r3
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	3332      	adds	r3, #50	; 0x32
 8005558:	4a09      	ldr	r2, [pc, #36]	; (8005580 <UART_SetConfig+0x6f4>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	f003 020f 	and.w	r2, r3, #15
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4442      	add	r2, r8
 800556a:	609a      	str	r2, [r3, #8]
}
 800556c:	e7ff      	b.n	800556e <UART_SetConfig+0x6e2>
 800556e:	bf00      	nop
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005578:	40011000 	.word	0x40011000
 800557c:	40011400 	.word	0x40011400
 8005580:	51eb851f 	.word	0x51eb851f

08005584 <__errno>:
 8005584:	4b01      	ldr	r3, [pc, #4]	; (800558c <__errno+0x8>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	2000000c 	.word	0x2000000c

08005590 <__libc_init_array>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	4e0d      	ldr	r6, [pc, #52]	; (80055c8 <__libc_init_array+0x38>)
 8005594:	4c0d      	ldr	r4, [pc, #52]	; (80055cc <__libc_init_array+0x3c>)
 8005596:	1ba4      	subs	r4, r4, r6
 8005598:	10a4      	asrs	r4, r4, #2
 800559a:	2500      	movs	r5, #0
 800559c:	42a5      	cmp	r5, r4
 800559e:	d109      	bne.n	80055b4 <__libc_init_array+0x24>
 80055a0:	4e0b      	ldr	r6, [pc, #44]	; (80055d0 <__libc_init_array+0x40>)
 80055a2:	4c0c      	ldr	r4, [pc, #48]	; (80055d4 <__libc_init_array+0x44>)
 80055a4:	f002 ff26 	bl	80083f4 <_init>
 80055a8:	1ba4      	subs	r4, r4, r6
 80055aa:	10a4      	asrs	r4, r4, #2
 80055ac:	2500      	movs	r5, #0
 80055ae:	42a5      	cmp	r5, r4
 80055b0:	d105      	bne.n	80055be <__libc_init_array+0x2e>
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
 80055b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055b8:	4798      	blx	r3
 80055ba:	3501      	adds	r5, #1
 80055bc:	e7ee      	b.n	800559c <__libc_init_array+0xc>
 80055be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055c2:	4798      	blx	r3
 80055c4:	3501      	adds	r5, #1
 80055c6:	e7f2      	b.n	80055ae <__libc_init_array+0x1e>
 80055c8:	080087b0 	.word	0x080087b0
 80055cc:	080087b0 	.word	0x080087b0
 80055d0:	080087b0 	.word	0x080087b0
 80055d4:	080087b4 	.word	0x080087b4

080055d8 <memset>:
 80055d8:	4402      	add	r2, r0
 80055da:	4603      	mov	r3, r0
 80055dc:	4293      	cmp	r3, r2
 80055de:	d100      	bne.n	80055e2 <memset+0xa>
 80055e0:	4770      	bx	lr
 80055e2:	f803 1b01 	strb.w	r1, [r3], #1
 80055e6:	e7f9      	b.n	80055dc <memset+0x4>

080055e8 <__cvt>:
 80055e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ec:	ec55 4b10 	vmov	r4, r5, d0
 80055f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80055f2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055f6:	2d00      	cmp	r5, #0
 80055f8:	460e      	mov	r6, r1
 80055fa:	4691      	mov	r9, r2
 80055fc:	4619      	mov	r1, r3
 80055fe:	bfb8      	it	lt
 8005600:	4622      	movlt	r2, r4
 8005602:	462b      	mov	r3, r5
 8005604:	f027 0720 	bic.w	r7, r7, #32
 8005608:	bfbb      	ittet	lt
 800560a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800560e:	461d      	movlt	r5, r3
 8005610:	2300      	movge	r3, #0
 8005612:	232d      	movlt	r3, #45	; 0x2d
 8005614:	bfb8      	it	lt
 8005616:	4614      	movlt	r4, r2
 8005618:	2f46      	cmp	r7, #70	; 0x46
 800561a:	700b      	strb	r3, [r1, #0]
 800561c:	d004      	beq.n	8005628 <__cvt+0x40>
 800561e:	2f45      	cmp	r7, #69	; 0x45
 8005620:	d100      	bne.n	8005624 <__cvt+0x3c>
 8005622:	3601      	adds	r6, #1
 8005624:	2102      	movs	r1, #2
 8005626:	e000      	b.n	800562a <__cvt+0x42>
 8005628:	2103      	movs	r1, #3
 800562a:	ab03      	add	r3, sp, #12
 800562c:	9301      	str	r3, [sp, #4]
 800562e:	ab02      	add	r3, sp, #8
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	4632      	mov	r2, r6
 8005634:	4653      	mov	r3, sl
 8005636:	ec45 4b10 	vmov	d0, r4, r5
 800563a:	f000 fe2d 	bl	8006298 <_dtoa_r>
 800563e:	2f47      	cmp	r7, #71	; 0x47
 8005640:	4680      	mov	r8, r0
 8005642:	d102      	bne.n	800564a <__cvt+0x62>
 8005644:	f019 0f01 	tst.w	r9, #1
 8005648:	d026      	beq.n	8005698 <__cvt+0xb0>
 800564a:	2f46      	cmp	r7, #70	; 0x46
 800564c:	eb08 0906 	add.w	r9, r8, r6
 8005650:	d111      	bne.n	8005676 <__cvt+0x8e>
 8005652:	f898 3000 	ldrb.w	r3, [r8]
 8005656:	2b30      	cmp	r3, #48	; 0x30
 8005658:	d10a      	bne.n	8005670 <__cvt+0x88>
 800565a:	2200      	movs	r2, #0
 800565c:	2300      	movs	r3, #0
 800565e:	4620      	mov	r0, r4
 8005660:	4629      	mov	r1, r5
 8005662:	f7fb fa51 	bl	8000b08 <__aeabi_dcmpeq>
 8005666:	b918      	cbnz	r0, 8005670 <__cvt+0x88>
 8005668:	f1c6 0601 	rsb	r6, r6, #1
 800566c:	f8ca 6000 	str.w	r6, [sl]
 8005670:	f8da 3000 	ldr.w	r3, [sl]
 8005674:	4499      	add	r9, r3
 8005676:	2200      	movs	r2, #0
 8005678:	2300      	movs	r3, #0
 800567a:	4620      	mov	r0, r4
 800567c:	4629      	mov	r1, r5
 800567e:	f7fb fa43 	bl	8000b08 <__aeabi_dcmpeq>
 8005682:	b938      	cbnz	r0, 8005694 <__cvt+0xac>
 8005684:	2230      	movs	r2, #48	; 0x30
 8005686:	9b03      	ldr	r3, [sp, #12]
 8005688:	454b      	cmp	r3, r9
 800568a:	d205      	bcs.n	8005698 <__cvt+0xb0>
 800568c:	1c59      	adds	r1, r3, #1
 800568e:	9103      	str	r1, [sp, #12]
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	e7f8      	b.n	8005686 <__cvt+0x9e>
 8005694:	f8cd 900c 	str.w	r9, [sp, #12]
 8005698:	9b03      	ldr	r3, [sp, #12]
 800569a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800569c:	eba3 0308 	sub.w	r3, r3, r8
 80056a0:	4640      	mov	r0, r8
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	b004      	add	sp, #16
 80056a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080056aa <__exponent>:
 80056aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ac:	2900      	cmp	r1, #0
 80056ae:	4604      	mov	r4, r0
 80056b0:	bfba      	itte	lt
 80056b2:	4249      	neglt	r1, r1
 80056b4:	232d      	movlt	r3, #45	; 0x2d
 80056b6:	232b      	movge	r3, #43	; 0x2b
 80056b8:	2909      	cmp	r1, #9
 80056ba:	f804 2b02 	strb.w	r2, [r4], #2
 80056be:	7043      	strb	r3, [r0, #1]
 80056c0:	dd20      	ble.n	8005704 <__exponent+0x5a>
 80056c2:	f10d 0307 	add.w	r3, sp, #7
 80056c6:	461f      	mov	r7, r3
 80056c8:	260a      	movs	r6, #10
 80056ca:	fb91 f5f6 	sdiv	r5, r1, r6
 80056ce:	fb06 1115 	mls	r1, r6, r5, r1
 80056d2:	3130      	adds	r1, #48	; 0x30
 80056d4:	2d09      	cmp	r5, #9
 80056d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80056da:	f103 32ff 	add.w	r2, r3, #4294967295
 80056de:	4629      	mov	r1, r5
 80056e0:	dc09      	bgt.n	80056f6 <__exponent+0x4c>
 80056e2:	3130      	adds	r1, #48	; 0x30
 80056e4:	3b02      	subs	r3, #2
 80056e6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80056ea:	42bb      	cmp	r3, r7
 80056ec:	4622      	mov	r2, r4
 80056ee:	d304      	bcc.n	80056fa <__exponent+0x50>
 80056f0:	1a10      	subs	r0, r2, r0
 80056f2:	b003      	add	sp, #12
 80056f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f6:	4613      	mov	r3, r2
 80056f8:	e7e7      	b.n	80056ca <__exponent+0x20>
 80056fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056fe:	f804 2b01 	strb.w	r2, [r4], #1
 8005702:	e7f2      	b.n	80056ea <__exponent+0x40>
 8005704:	2330      	movs	r3, #48	; 0x30
 8005706:	4419      	add	r1, r3
 8005708:	7083      	strb	r3, [r0, #2]
 800570a:	1d02      	adds	r2, r0, #4
 800570c:	70c1      	strb	r1, [r0, #3]
 800570e:	e7ef      	b.n	80056f0 <__exponent+0x46>

08005710 <_printf_float>:
 8005710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005714:	b08d      	sub	sp, #52	; 0x34
 8005716:	460c      	mov	r4, r1
 8005718:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800571c:	4616      	mov	r6, r2
 800571e:	461f      	mov	r7, r3
 8005720:	4605      	mov	r5, r0
 8005722:	f001 fceb 	bl	80070fc <_localeconv_r>
 8005726:	6803      	ldr	r3, [r0, #0]
 8005728:	9304      	str	r3, [sp, #16]
 800572a:	4618      	mov	r0, r3
 800572c:	f7fa fd70 	bl	8000210 <strlen>
 8005730:	2300      	movs	r3, #0
 8005732:	930a      	str	r3, [sp, #40]	; 0x28
 8005734:	f8d8 3000 	ldr.w	r3, [r8]
 8005738:	9005      	str	r0, [sp, #20]
 800573a:	3307      	adds	r3, #7
 800573c:	f023 0307 	bic.w	r3, r3, #7
 8005740:	f103 0208 	add.w	r2, r3, #8
 8005744:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005748:	f8d4 b000 	ldr.w	fp, [r4]
 800574c:	f8c8 2000 	str.w	r2, [r8]
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005758:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800575c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005760:	9307      	str	r3, [sp, #28]
 8005762:	f8cd 8018 	str.w	r8, [sp, #24]
 8005766:	f04f 32ff 	mov.w	r2, #4294967295
 800576a:	4ba7      	ldr	r3, [pc, #668]	; (8005a08 <_printf_float+0x2f8>)
 800576c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005770:	f7fb f9fc 	bl	8000b6c <__aeabi_dcmpun>
 8005774:	bb70      	cbnz	r0, 80057d4 <_printf_float+0xc4>
 8005776:	f04f 32ff 	mov.w	r2, #4294967295
 800577a:	4ba3      	ldr	r3, [pc, #652]	; (8005a08 <_printf_float+0x2f8>)
 800577c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005780:	f7fb f9d6 	bl	8000b30 <__aeabi_dcmple>
 8005784:	bb30      	cbnz	r0, 80057d4 <_printf_float+0xc4>
 8005786:	2200      	movs	r2, #0
 8005788:	2300      	movs	r3, #0
 800578a:	4640      	mov	r0, r8
 800578c:	4649      	mov	r1, r9
 800578e:	f7fb f9c5 	bl	8000b1c <__aeabi_dcmplt>
 8005792:	b110      	cbz	r0, 800579a <_printf_float+0x8a>
 8005794:	232d      	movs	r3, #45	; 0x2d
 8005796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800579a:	4a9c      	ldr	r2, [pc, #624]	; (8005a0c <_printf_float+0x2fc>)
 800579c:	4b9c      	ldr	r3, [pc, #624]	; (8005a10 <_printf_float+0x300>)
 800579e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80057a2:	bf8c      	ite	hi
 80057a4:	4690      	movhi	r8, r2
 80057a6:	4698      	movls	r8, r3
 80057a8:	2303      	movs	r3, #3
 80057aa:	f02b 0204 	bic.w	r2, fp, #4
 80057ae:	6123      	str	r3, [r4, #16]
 80057b0:	6022      	str	r2, [r4, #0]
 80057b2:	f04f 0900 	mov.w	r9, #0
 80057b6:	9700      	str	r7, [sp, #0]
 80057b8:	4633      	mov	r3, r6
 80057ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80057bc:	4621      	mov	r1, r4
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 f9e6 	bl	8005b90 <_printf_common>
 80057c4:	3001      	adds	r0, #1
 80057c6:	f040 808d 	bne.w	80058e4 <_printf_float+0x1d4>
 80057ca:	f04f 30ff 	mov.w	r0, #4294967295
 80057ce:	b00d      	add	sp, #52	; 0x34
 80057d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d4:	4642      	mov	r2, r8
 80057d6:	464b      	mov	r3, r9
 80057d8:	4640      	mov	r0, r8
 80057da:	4649      	mov	r1, r9
 80057dc:	f7fb f9c6 	bl	8000b6c <__aeabi_dcmpun>
 80057e0:	b110      	cbz	r0, 80057e8 <_printf_float+0xd8>
 80057e2:	4a8c      	ldr	r2, [pc, #560]	; (8005a14 <_printf_float+0x304>)
 80057e4:	4b8c      	ldr	r3, [pc, #560]	; (8005a18 <_printf_float+0x308>)
 80057e6:	e7da      	b.n	800579e <_printf_float+0x8e>
 80057e8:	6861      	ldr	r1, [r4, #4]
 80057ea:	1c4b      	adds	r3, r1, #1
 80057ec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80057f0:	a80a      	add	r0, sp, #40	; 0x28
 80057f2:	d13e      	bne.n	8005872 <_printf_float+0x162>
 80057f4:	2306      	movs	r3, #6
 80057f6:	6063      	str	r3, [r4, #4]
 80057f8:	2300      	movs	r3, #0
 80057fa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80057fe:	ab09      	add	r3, sp, #36	; 0x24
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	ec49 8b10 	vmov	d0, r8, r9
 8005806:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800580a:	6022      	str	r2, [r4, #0]
 800580c:	f8cd a004 	str.w	sl, [sp, #4]
 8005810:	6861      	ldr	r1, [r4, #4]
 8005812:	4628      	mov	r0, r5
 8005814:	f7ff fee8 	bl	80055e8 <__cvt>
 8005818:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800581c:	2b47      	cmp	r3, #71	; 0x47
 800581e:	4680      	mov	r8, r0
 8005820:	d109      	bne.n	8005836 <_printf_float+0x126>
 8005822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005824:	1cd8      	adds	r0, r3, #3
 8005826:	db02      	blt.n	800582e <_printf_float+0x11e>
 8005828:	6862      	ldr	r2, [r4, #4]
 800582a:	4293      	cmp	r3, r2
 800582c:	dd47      	ble.n	80058be <_printf_float+0x1ae>
 800582e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005832:	fa5f fa8a 	uxtb.w	sl, sl
 8005836:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800583a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800583c:	d824      	bhi.n	8005888 <_printf_float+0x178>
 800583e:	3901      	subs	r1, #1
 8005840:	4652      	mov	r2, sl
 8005842:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005846:	9109      	str	r1, [sp, #36]	; 0x24
 8005848:	f7ff ff2f 	bl	80056aa <__exponent>
 800584c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800584e:	1813      	adds	r3, r2, r0
 8005850:	2a01      	cmp	r2, #1
 8005852:	4681      	mov	r9, r0
 8005854:	6123      	str	r3, [r4, #16]
 8005856:	dc02      	bgt.n	800585e <_printf_float+0x14e>
 8005858:	6822      	ldr	r2, [r4, #0]
 800585a:	07d1      	lsls	r1, r2, #31
 800585c:	d501      	bpl.n	8005862 <_printf_float+0x152>
 800585e:	3301      	adds	r3, #1
 8005860:	6123      	str	r3, [r4, #16]
 8005862:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0a5      	beq.n	80057b6 <_printf_float+0xa6>
 800586a:	232d      	movs	r3, #45	; 0x2d
 800586c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005870:	e7a1      	b.n	80057b6 <_printf_float+0xa6>
 8005872:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005876:	f000 8177 	beq.w	8005b68 <_printf_float+0x458>
 800587a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800587e:	d1bb      	bne.n	80057f8 <_printf_float+0xe8>
 8005880:	2900      	cmp	r1, #0
 8005882:	d1b9      	bne.n	80057f8 <_printf_float+0xe8>
 8005884:	2301      	movs	r3, #1
 8005886:	e7b6      	b.n	80057f6 <_printf_float+0xe6>
 8005888:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800588c:	d119      	bne.n	80058c2 <_printf_float+0x1b2>
 800588e:	2900      	cmp	r1, #0
 8005890:	6863      	ldr	r3, [r4, #4]
 8005892:	dd0c      	ble.n	80058ae <_printf_float+0x19e>
 8005894:	6121      	str	r1, [r4, #16]
 8005896:	b913      	cbnz	r3, 800589e <_printf_float+0x18e>
 8005898:	6822      	ldr	r2, [r4, #0]
 800589a:	07d2      	lsls	r2, r2, #31
 800589c:	d502      	bpl.n	80058a4 <_printf_float+0x194>
 800589e:	3301      	adds	r3, #1
 80058a0:	440b      	add	r3, r1
 80058a2:	6123      	str	r3, [r4, #16]
 80058a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80058a8:	f04f 0900 	mov.w	r9, #0
 80058ac:	e7d9      	b.n	8005862 <_printf_float+0x152>
 80058ae:	b913      	cbnz	r3, 80058b6 <_printf_float+0x1a6>
 80058b0:	6822      	ldr	r2, [r4, #0]
 80058b2:	07d0      	lsls	r0, r2, #31
 80058b4:	d501      	bpl.n	80058ba <_printf_float+0x1aa>
 80058b6:	3302      	adds	r3, #2
 80058b8:	e7f3      	b.n	80058a2 <_printf_float+0x192>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e7f1      	b.n	80058a2 <_printf_float+0x192>
 80058be:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80058c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80058c6:	4293      	cmp	r3, r2
 80058c8:	db05      	blt.n	80058d6 <_printf_float+0x1c6>
 80058ca:	6822      	ldr	r2, [r4, #0]
 80058cc:	6123      	str	r3, [r4, #16]
 80058ce:	07d1      	lsls	r1, r2, #31
 80058d0:	d5e8      	bpl.n	80058a4 <_printf_float+0x194>
 80058d2:	3301      	adds	r3, #1
 80058d4:	e7e5      	b.n	80058a2 <_printf_float+0x192>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bfd4      	ite	le
 80058da:	f1c3 0302 	rsble	r3, r3, #2
 80058de:	2301      	movgt	r3, #1
 80058e0:	4413      	add	r3, r2
 80058e2:	e7de      	b.n	80058a2 <_printf_float+0x192>
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	055a      	lsls	r2, r3, #21
 80058e8:	d407      	bmi.n	80058fa <_printf_float+0x1ea>
 80058ea:	6923      	ldr	r3, [r4, #16]
 80058ec:	4642      	mov	r2, r8
 80058ee:	4631      	mov	r1, r6
 80058f0:	4628      	mov	r0, r5
 80058f2:	47b8      	blx	r7
 80058f4:	3001      	adds	r0, #1
 80058f6:	d12b      	bne.n	8005950 <_printf_float+0x240>
 80058f8:	e767      	b.n	80057ca <_printf_float+0xba>
 80058fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80058fe:	f240 80dc 	bls.w	8005aba <_printf_float+0x3aa>
 8005902:	2200      	movs	r2, #0
 8005904:	2300      	movs	r3, #0
 8005906:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800590a:	f7fb f8fd 	bl	8000b08 <__aeabi_dcmpeq>
 800590e:	2800      	cmp	r0, #0
 8005910:	d033      	beq.n	800597a <_printf_float+0x26a>
 8005912:	2301      	movs	r3, #1
 8005914:	4a41      	ldr	r2, [pc, #260]	; (8005a1c <_printf_float+0x30c>)
 8005916:	4631      	mov	r1, r6
 8005918:	4628      	mov	r0, r5
 800591a:	47b8      	blx	r7
 800591c:	3001      	adds	r0, #1
 800591e:	f43f af54 	beq.w	80057ca <_printf_float+0xba>
 8005922:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005926:	429a      	cmp	r2, r3
 8005928:	db02      	blt.n	8005930 <_printf_float+0x220>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	07d8      	lsls	r0, r3, #31
 800592e:	d50f      	bpl.n	8005950 <_printf_float+0x240>
 8005930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005934:	4631      	mov	r1, r6
 8005936:	4628      	mov	r0, r5
 8005938:	47b8      	blx	r7
 800593a:	3001      	adds	r0, #1
 800593c:	f43f af45 	beq.w	80057ca <_printf_float+0xba>
 8005940:	f04f 0800 	mov.w	r8, #0
 8005944:	f104 091a 	add.w	r9, r4, #26
 8005948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800594a:	3b01      	subs	r3, #1
 800594c:	4543      	cmp	r3, r8
 800594e:	dc09      	bgt.n	8005964 <_printf_float+0x254>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	079b      	lsls	r3, r3, #30
 8005954:	f100 8103 	bmi.w	8005b5e <_printf_float+0x44e>
 8005958:	68e0      	ldr	r0, [r4, #12]
 800595a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800595c:	4298      	cmp	r0, r3
 800595e:	bfb8      	it	lt
 8005960:	4618      	movlt	r0, r3
 8005962:	e734      	b.n	80057ce <_printf_float+0xbe>
 8005964:	2301      	movs	r3, #1
 8005966:	464a      	mov	r2, r9
 8005968:	4631      	mov	r1, r6
 800596a:	4628      	mov	r0, r5
 800596c:	47b8      	blx	r7
 800596e:	3001      	adds	r0, #1
 8005970:	f43f af2b 	beq.w	80057ca <_printf_float+0xba>
 8005974:	f108 0801 	add.w	r8, r8, #1
 8005978:	e7e6      	b.n	8005948 <_printf_float+0x238>
 800597a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800597c:	2b00      	cmp	r3, #0
 800597e:	dc2b      	bgt.n	80059d8 <_printf_float+0x2c8>
 8005980:	2301      	movs	r3, #1
 8005982:	4a26      	ldr	r2, [pc, #152]	; (8005a1c <_printf_float+0x30c>)
 8005984:	4631      	mov	r1, r6
 8005986:	4628      	mov	r0, r5
 8005988:	47b8      	blx	r7
 800598a:	3001      	adds	r0, #1
 800598c:	f43f af1d 	beq.w	80057ca <_printf_float+0xba>
 8005990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005992:	b923      	cbnz	r3, 800599e <_printf_float+0x28e>
 8005994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005996:	b913      	cbnz	r3, 800599e <_printf_float+0x28e>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	07d9      	lsls	r1, r3, #31
 800599c:	d5d8      	bpl.n	8005950 <_printf_float+0x240>
 800599e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059a2:	4631      	mov	r1, r6
 80059a4:	4628      	mov	r0, r5
 80059a6:	47b8      	blx	r7
 80059a8:	3001      	adds	r0, #1
 80059aa:	f43f af0e 	beq.w	80057ca <_printf_float+0xba>
 80059ae:	f04f 0900 	mov.w	r9, #0
 80059b2:	f104 0a1a 	add.w	sl, r4, #26
 80059b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b8:	425b      	negs	r3, r3
 80059ba:	454b      	cmp	r3, r9
 80059bc:	dc01      	bgt.n	80059c2 <_printf_float+0x2b2>
 80059be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c0:	e794      	b.n	80058ec <_printf_float+0x1dc>
 80059c2:	2301      	movs	r3, #1
 80059c4:	4652      	mov	r2, sl
 80059c6:	4631      	mov	r1, r6
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b8      	blx	r7
 80059cc:	3001      	adds	r0, #1
 80059ce:	f43f aefc 	beq.w	80057ca <_printf_float+0xba>
 80059d2:	f109 0901 	add.w	r9, r9, #1
 80059d6:	e7ee      	b.n	80059b6 <_printf_float+0x2a6>
 80059d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059dc:	429a      	cmp	r2, r3
 80059de:	bfa8      	it	ge
 80059e0:	461a      	movge	r2, r3
 80059e2:	2a00      	cmp	r2, #0
 80059e4:	4691      	mov	r9, r2
 80059e6:	dd07      	ble.n	80059f8 <_printf_float+0x2e8>
 80059e8:	4613      	mov	r3, r2
 80059ea:	4631      	mov	r1, r6
 80059ec:	4642      	mov	r2, r8
 80059ee:	4628      	mov	r0, r5
 80059f0:	47b8      	blx	r7
 80059f2:	3001      	adds	r0, #1
 80059f4:	f43f aee9 	beq.w	80057ca <_printf_float+0xba>
 80059f8:	f104 031a 	add.w	r3, r4, #26
 80059fc:	f04f 0b00 	mov.w	fp, #0
 8005a00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a04:	9306      	str	r3, [sp, #24]
 8005a06:	e015      	b.n	8005a34 <_printf_float+0x324>
 8005a08:	7fefffff 	.word	0x7fefffff
 8005a0c:	080084d4 	.word	0x080084d4
 8005a10:	080084d0 	.word	0x080084d0
 8005a14:	080084dc 	.word	0x080084dc
 8005a18:	080084d8 	.word	0x080084d8
 8005a1c:	080084e0 	.word	0x080084e0
 8005a20:	2301      	movs	r3, #1
 8005a22:	9a06      	ldr	r2, [sp, #24]
 8005a24:	4631      	mov	r1, r6
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b8      	blx	r7
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	f43f aecd 	beq.w	80057ca <_printf_float+0xba>
 8005a30:	f10b 0b01 	add.w	fp, fp, #1
 8005a34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005a38:	ebaa 0309 	sub.w	r3, sl, r9
 8005a3c:	455b      	cmp	r3, fp
 8005a3e:	dcef      	bgt.n	8005a20 <_printf_float+0x310>
 8005a40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a44:	429a      	cmp	r2, r3
 8005a46:	44d0      	add	r8, sl
 8005a48:	db15      	blt.n	8005a76 <_printf_float+0x366>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	07da      	lsls	r2, r3, #31
 8005a4e:	d412      	bmi.n	8005a76 <_printf_float+0x366>
 8005a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a54:	eba3 020a 	sub.w	r2, r3, sl
 8005a58:	eba3 0a01 	sub.w	sl, r3, r1
 8005a5c:	4592      	cmp	sl, r2
 8005a5e:	bfa8      	it	ge
 8005a60:	4692      	movge	sl, r2
 8005a62:	f1ba 0f00 	cmp.w	sl, #0
 8005a66:	dc0e      	bgt.n	8005a86 <_printf_float+0x376>
 8005a68:	f04f 0800 	mov.w	r8, #0
 8005a6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a70:	f104 091a 	add.w	r9, r4, #26
 8005a74:	e019      	b.n	8005aaa <_printf_float+0x39a>
 8005a76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	47b8      	blx	r7
 8005a80:	3001      	adds	r0, #1
 8005a82:	d1e5      	bne.n	8005a50 <_printf_float+0x340>
 8005a84:	e6a1      	b.n	80057ca <_printf_float+0xba>
 8005a86:	4653      	mov	r3, sl
 8005a88:	4642      	mov	r2, r8
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	d1e9      	bne.n	8005a68 <_printf_float+0x358>
 8005a94:	e699      	b.n	80057ca <_printf_float+0xba>
 8005a96:	2301      	movs	r3, #1
 8005a98:	464a      	mov	r2, r9
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	f43f ae92 	beq.w	80057ca <_printf_float+0xba>
 8005aa6:	f108 0801 	add.w	r8, r8, #1
 8005aaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	eba3 030a 	sub.w	r3, r3, sl
 8005ab4:	4543      	cmp	r3, r8
 8005ab6:	dcee      	bgt.n	8005a96 <_printf_float+0x386>
 8005ab8:	e74a      	b.n	8005950 <_printf_float+0x240>
 8005aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005abc:	2a01      	cmp	r2, #1
 8005abe:	dc01      	bgt.n	8005ac4 <_printf_float+0x3b4>
 8005ac0:	07db      	lsls	r3, r3, #31
 8005ac2:	d53a      	bpl.n	8005b3a <_printf_float+0x42a>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	4642      	mov	r2, r8
 8005ac8:	4631      	mov	r1, r6
 8005aca:	4628      	mov	r0, r5
 8005acc:	47b8      	blx	r7
 8005ace:	3001      	adds	r0, #1
 8005ad0:	f43f ae7b 	beq.w	80057ca <_printf_float+0xba>
 8005ad4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ad8:	4631      	mov	r1, r6
 8005ada:	4628      	mov	r0, r5
 8005adc:	47b8      	blx	r7
 8005ade:	3001      	adds	r0, #1
 8005ae0:	f108 0801 	add.w	r8, r8, #1
 8005ae4:	f43f ae71 	beq.w	80057ca <_printf_float+0xba>
 8005ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aea:	2200      	movs	r2, #0
 8005aec:	f103 3aff 	add.w	sl, r3, #4294967295
 8005af0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005af4:	2300      	movs	r3, #0
 8005af6:	f7fb f807 	bl	8000b08 <__aeabi_dcmpeq>
 8005afa:	b9c8      	cbnz	r0, 8005b30 <_printf_float+0x420>
 8005afc:	4653      	mov	r3, sl
 8005afe:	4642      	mov	r2, r8
 8005b00:	4631      	mov	r1, r6
 8005b02:	4628      	mov	r0, r5
 8005b04:	47b8      	blx	r7
 8005b06:	3001      	adds	r0, #1
 8005b08:	d10e      	bne.n	8005b28 <_printf_float+0x418>
 8005b0a:	e65e      	b.n	80057ca <_printf_float+0xba>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	4652      	mov	r2, sl
 8005b10:	4631      	mov	r1, r6
 8005b12:	4628      	mov	r0, r5
 8005b14:	47b8      	blx	r7
 8005b16:	3001      	adds	r0, #1
 8005b18:	f43f ae57 	beq.w	80057ca <_printf_float+0xba>
 8005b1c:	f108 0801 	add.w	r8, r8, #1
 8005b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b22:	3b01      	subs	r3, #1
 8005b24:	4543      	cmp	r3, r8
 8005b26:	dcf1      	bgt.n	8005b0c <_printf_float+0x3fc>
 8005b28:	464b      	mov	r3, r9
 8005b2a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b2e:	e6de      	b.n	80058ee <_printf_float+0x1de>
 8005b30:	f04f 0800 	mov.w	r8, #0
 8005b34:	f104 0a1a 	add.w	sl, r4, #26
 8005b38:	e7f2      	b.n	8005b20 <_printf_float+0x410>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e7df      	b.n	8005afe <_printf_float+0x3ee>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	464a      	mov	r2, r9
 8005b42:	4631      	mov	r1, r6
 8005b44:	4628      	mov	r0, r5
 8005b46:	47b8      	blx	r7
 8005b48:	3001      	adds	r0, #1
 8005b4a:	f43f ae3e 	beq.w	80057ca <_printf_float+0xba>
 8005b4e:	f108 0801 	add.w	r8, r8, #1
 8005b52:	68e3      	ldr	r3, [r4, #12]
 8005b54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b56:	1a9b      	subs	r3, r3, r2
 8005b58:	4543      	cmp	r3, r8
 8005b5a:	dcf0      	bgt.n	8005b3e <_printf_float+0x42e>
 8005b5c:	e6fc      	b.n	8005958 <_printf_float+0x248>
 8005b5e:	f04f 0800 	mov.w	r8, #0
 8005b62:	f104 0919 	add.w	r9, r4, #25
 8005b66:	e7f4      	b.n	8005b52 <_printf_float+0x442>
 8005b68:	2900      	cmp	r1, #0
 8005b6a:	f43f ae8b 	beq.w	8005884 <_printf_float+0x174>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005b74:	ab09      	add	r3, sp, #36	; 0x24
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	ec49 8b10 	vmov	d0, r8, r9
 8005b7c:	6022      	str	r2, [r4, #0]
 8005b7e:	f8cd a004 	str.w	sl, [sp, #4]
 8005b82:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b86:	4628      	mov	r0, r5
 8005b88:	f7ff fd2e 	bl	80055e8 <__cvt>
 8005b8c:	4680      	mov	r8, r0
 8005b8e:	e648      	b.n	8005822 <_printf_float+0x112>

08005b90 <_printf_common>:
 8005b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b94:	4691      	mov	r9, r2
 8005b96:	461f      	mov	r7, r3
 8005b98:	688a      	ldr	r2, [r1, #8]
 8005b9a:	690b      	ldr	r3, [r1, #16]
 8005b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	bfb8      	it	lt
 8005ba4:	4613      	movlt	r3, r2
 8005ba6:	f8c9 3000 	str.w	r3, [r9]
 8005baa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bae:	4606      	mov	r6, r0
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	b112      	cbz	r2, 8005bba <_printf_common+0x2a>
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	f8c9 3000 	str.w	r3, [r9]
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	0699      	lsls	r1, r3, #26
 8005bbe:	bf42      	ittt	mi
 8005bc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005bc4:	3302      	addmi	r3, #2
 8005bc6:	f8c9 3000 	strmi.w	r3, [r9]
 8005bca:	6825      	ldr	r5, [r4, #0]
 8005bcc:	f015 0506 	ands.w	r5, r5, #6
 8005bd0:	d107      	bne.n	8005be2 <_printf_common+0x52>
 8005bd2:	f104 0a19 	add.w	sl, r4, #25
 8005bd6:	68e3      	ldr	r3, [r4, #12]
 8005bd8:	f8d9 2000 	ldr.w	r2, [r9]
 8005bdc:	1a9b      	subs	r3, r3, r2
 8005bde:	42ab      	cmp	r3, r5
 8005be0:	dc28      	bgt.n	8005c34 <_printf_common+0xa4>
 8005be2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	3300      	adds	r3, #0
 8005bea:	bf18      	it	ne
 8005bec:	2301      	movne	r3, #1
 8005bee:	0692      	lsls	r2, r2, #26
 8005bf0:	d42d      	bmi.n	8005c4e <_printf_common+0xbe>
 8005bf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bf6:	4639      	mov	r1, r7
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	47c0      	blx	r8
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d020      	beq.n	8005c42 <_printf_common+0xb2>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	68e5      	ldr	r5, [r4, #12]
 8005c04:	f8d9 2000 	ldr.w	r2, [r9]
 8005c08:	f003 0306 	and.w	r3, r3, #6
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	bf08      	it	eq
 8005c10:	1aad      	subeq	r5, r5, r2
 8005c12:	68a3      	ldr	r3, [r4, #8]
 8005c14:	6922      	ldr	r2, [r4, #16]
 8005c16:	bf0c      	ite	eq
 8005c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c1c:	2500      	movne	r5, #0
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	bfc4      	itt	gt
 8005c22:	1a9b      	subgt	r3, r3, r2
 8005c24:	18ed      	addgt	r5, r5, r3
 8005c26:	f04f 0900 	mov.w	r9, #0
 8005c2a:	341a      	adds	r4, #26
 8005c2c:	454d      	cmp	r5, r9
 8005c2e:	d11a      	bne.n	8005c66 <_printf_common+0xd6>
 8005c30:	2000      	movs	r0, #0
 8005c32:	e008      	b.n	8005c46 <_printf_common+0xb6>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4652      	mov	r2, sl
 8005c38:	4639      	mov	r1, r7
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	47c0      	blx	r8
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d103      	bne.n	8005c4a <_printf_common+0xba>
 8005c42:	f04f 30ff 	mov.w	r0, #4294967295
 8005c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4a:	3501      	adds	r5, #1
 8005c4c:	e7c3      	b.n	8005bd6 <_printf_common+0x46>
 8005c4e:	18e1      	adds	r1, r4, r3
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	2030      	movs	r0, #48	; 0x30
 8005c54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c58:	4422      	add	r2, r4
 8005c5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c62:	3302      	adds	r3, #2
 8005c64:	e7c5      	b.n	8005bf2 <_printf_common+0x62>
 8005c66:	2301      	movs	r3, #1
 8005c68:	4622      	mov	r2, r4
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	47c0      	blx	r8
 8005c70:	3001      	adds	r0, #1
 8005c72:	d0e6      	beq.n	8005c42 <_printf_common+0xb2>
 8005c74:	f109 0901 	add.w	r9, r9, #1
 8005c78:	e7d8      	b.n	8005c2c <_printf_common+0x9c>
	...

08005c7c <_printf_i>:
 8005c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c84:	460c      	mov	r4, r1
 8005c86:	7e09      	ldrb	r1, [r1, #24]
 8005c88:	b085      	sub	sp, #20
 8005c8a:	296e      	cmp	r1, #110	; 0x6e
 8005c8c:	4617      	mov	r7, r2
 8005c8e:	4606      	mov	r6, r0
 8005c90:	4698      	mov	r8, r3
 8005c92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c94:	f000 80b3 	beq.w	8005dfe <_printf_i+0x182>
 8005c98:	d822      	bhi.n	8005ce0 <_printf_i+0x64>
 8005c9a:	2963      	cmp	r1, #99	; 0x63
 8005c9c:	d036      	beq.n	8005d0c <_printf_i+0x90>
 8005c9e:	d80a      	bhi.n	8005cb6 <_printf_i+0x3a>
 8005ca0:	2900      	cmp	r1, #0
 8005ca2:	f000 80b9 	beq.w	8005e18 <_printf_i+0x19c>
 8005ca6:	2958      	cmp	r1, #88	; 0x58
 8005ca8:	f000 8083 	beq.w	8005db2 <_printf_i+0x136>
 8005cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005cb4:	e032      	b.n	8005d1c <_printf_i+0xa0>
 8005cb6:	2964      	cmp	r1, #100	; 0x64
 8005cb8:	d001      	beq.n	8005cbe <_printf_i+0x42>
 8005cba:	2969      	cmp	r1, #105	; 0x69
 8005cbc:	d1f6      	bne.n	8005cac <_printf_i+0x30>
 8005cbe:	6820      	ldr	r0, [r4, #0]
 8005cc0:	6813      	ldr	r3, [r2, #0]
 8005cc2:	0605      	lsls	r5, r0, #24
 8005cc4:	f103 0104 	add.w	r1, r3, #4
 8005cc8:	d52a      	bpl.n	8005d20 <_printf_i+0xa4>
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6011      	str	r1, [r2, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	da03      	bge.n	8005cda <_printf_i+0x5e>
 8005cd2:	222d      	movs	r2, #45	; 0x2d
 8005cd4:	425b      	negs	r3, r3
 8005cd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005cda:	486f      	ldr	r0, [pc, #444]	; (8005e98 <_printf_i+0x21c>)
 8005cdc:	220a      	movs	r2, #10
 8005cde:	e039      	b.n	8005d54 <_printf_i+0xd8>
 8005ce0:	2973      	cmp	r1, #115	; 0x73
 8005ce2:	f000 809d 	beq.w	8005e20 <_printf_i+0x1a4>
 8005ce6:	d808      	bhi.n	8005cfa <_printf_i+0x7e>
 8005ce8:	296f      	cmp	r1, #111	; 0x6f
 8005cea:	d020      	beq.n	8005d2e <_printf_i+0xb2>
 8005cec:	2970      	cmp	r1, #112	; 0x70
 8005cee:	d1dd      	bne.n	8005cac <_printf_i+0x30>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	f043 0320 	orr.w	r3, r3, #32
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	e003      	b.n	8005d02 <_printf_i+0x86>
 8005cfa:	2975      	cmp	r1, #117	; 0x75
 8005cfc:	d017      	beq.n	8005d2e <_printf_i+0xb2>
 8005cfe:	2978      	cmp	r1, #120	; 0x78
 8005d00:	d1d4      	bne.n	8005cac <_printf_i+0x30>
 8005d02:	2378      	movs	r3, #120	; 0x78
 8005d04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d08:	4864      	ldr	r0, [pc, #400]	; (8005e9c <_printf_i+0x220>)
 8005d0a:	e055      	b.n	8005db8 <_printf_i+0x13c>
 8005d0c:	6813      	ldr	r3, [r2, #0]
 8005d0e:	1d19      	adds	r1, r3, #4
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6011      	str	r1, [r2, #0]
 8005d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e08c      	b.n	8005e3a <_printf_i+0x1be>
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6011      	str	r1, [r2, #0]
 8005d24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d28:	bf18      	it	ne
 8005d2a:	b21b      	sxthne	r3, r3
 8005d2c:	e7cf      	b.n	8005cce <_printf_i+0x52>
 8005d2e:	6813      	ldr	r3, [r2, #0]
 8005d30:	6825      	ldr	r5, [r4, #0]
 8005d32:	1d18      	adds	r0, r3, #4
 8005d34:	6010      	str	r0, [r2, #0]
 8005d36:	0628      	lsls	r0, r5, #24
 8005d38:	d501      	bpl.n	8005d3e <_printf_i+0xc2>
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	e002      	b.n	8005d44 <_printf_i+0xc8>
 8005d3e:	0668      	lsls	r0, r5, #25
 8005d40:	d5fb      	bpl.n	8005d3a <_printf_i+0xbe>
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	4854      	ldr	r0, [pc, #336]	; (8005e98 <_printf_i+0x21c>)
 8005d46:	296f      	cmp	r1, #111	; 0x6f
 8005d48:	bf14      	ite	ne
 8005d4a:	220a      	movne	r2, #10
 8005d4c:	2208      	moveq	r2, #8
 8005d4e:	2100      	movs	r1, #0
 8005d50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d54:	6865      	ldr	r5, [r4, #4]
 8005d56:	60a5      	str	r5, [r4, #8]
 8005d58:	2d00      	cmp	r5, #0
 8005d5a:	f2c0 8095 	blt.w	8005e88 <_printf_i+0x20c>
 8005d5e:	6821      	ldr	r1, [r4, #0]
 8005d60:	f021 0104 	bic.w	r1, r1, #4
 8005d64:	6021      	str	r1, [r4, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d13d      	bne.n	8005de6 <_printf_i+0x16a>
 8005d6a:	2d00      	cmp	r5, #0
 8005d6c:	f040 808e 	bne.w	8005e8c <_printf_i+0x210>
 8005d70:	4665      	mov	r5, ip
 8005d72:	2a08      	cmp	r2, #8
 8005d74:	d10b      	bne.n	8005d8e <_printf_i+0x112>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	07db      	lsls	r3, r3, #31
 8005d7a:	d508      	bpl.n	8005d8e <_printf_i+0x112>
 8005d7c:	6923      	ldr	r3, [r4, #16]
 8005d7e:	6862      	ldr	r2, [r4, #4]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	bfde      	ittt	le
 8005d84:	2330      	movle	r3, #48	; 0x30
 8005d86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d8e:	ebac 0305 	sub.w	r3, ip, r5
 8005d92:	6123      	str	r3, [r4, #16]
 8005d94:	f8cd 8000 	str.w	r8, [sp]
 8005d98:	463b      	mov	r3, r7
 8005d9a:	aa03      	add	r2, sp, #12
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f7ff fef6 	bl	8005b90 <_printf_common>
 8005da4:	3001      	adds	r0, #1
 8005da6:	d14d      	bne.n	8005e44 <_printf_i+0x1c8>
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dac:	b005      	add	sp, #20
 8005dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005db2:	4839      	ldr	r0, [pc, #228]	; (8005e98 <_printf_i+0x21c>)
 8005db4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005db8:	6813      	ldr	r3, [r2, #0]
 8005dba:	6821      	ldr	r1, [r4, #0]
 8005dbc:	1d1d      	adds	r5, r3, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6015      	str	r5, [r2, #0]
 8005dc2:	060a      	lsls	r2, r1, #24
 8005dc4:	d50b      	bpl.n	8005dde <_printf_i+0x162>
 8005dc6:	07ca      	lsls	r2, r1, #31
 8005dc8:	bf44      	itt	mi
 8005dca:	f041 0120 	orrmi.w	r1, r1, #32
 8005dce:	6021      	strmi	r1, [r4, #0]
 8005dd0:	b91b      	cbnz	r3, 8005dda <_printf_i+0x15e>
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	f022 0220 	bic.w	r2, r2, #32
 8005dd8:	6022      	str	r2, [r4, #0]
 8005dda:	2210      	movs	r2, #16
 8005ddc:	e7b7      	b.n	8005d4e <_printf_i+0xd2>
 8005dde:	064d      	lsls	r5, r1, #25
 8005de0:	bf48      	it	mi
 8005de2:	b29b      	uxthmi	r3, r3
 8005de4:	e7ef      	b.n	8005dc6 <_printf_i+0x14a>
 8005de6:	4665      	mov	r5, ip
 8005de8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dec:	fb02 3311 	mls	r3, r2, r1, r3
 8005df0:	5cc3      	ldrb	r3, [r0, r3]
 8005df2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005df6:	460b      	mov	r3, r1
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	d1f5      	bne.n	8005de8 <_printf_i+0x16c>
 8005dfc:	e7b9      	b.n	8005d72 <_printf_i+0xf6>
 8005dfe:	6813      	ldr	r3, [r2, #0]
 8005e00:	6825      	ldr	r5, [r4, #0]
 8005e02:	6961      	ldr	r1, [r4, #20]
 8005e04:	1d18      	adds	r0, r3, #4
 8005e06:	6010      	str	r0, [r2, #0]
 8005e08:	0628      	lsls	r0, r5, #24
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	d501      	bpl.n	8005e12 <_printf_i+0x196>
 8005e0e:	6019      	str	r1, [r3, #0]
 8005e10:	e002      	b.n	8005e18 <_printf_i+0x19c>
 8005e12:	066a      	lsls	r2, r5, #25
 8005e14:	d5fb      	bpl.n	8005e0e <_printf_i+0x192>
 8005e16:	8019      	strh	r1, [r3, #0]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	6123      	str	r3, [r4, #16]
 8005e1c:	4665      	mov	r5, ip
 8005e1e:	e7b9      	b.n	8005d94 <_printf_i+0x118>
 8005e20:	6813      	ldr	r3, [r2, #0]
 8005e22:	1d19      	adds	r1, r3, #4
 8005e24:	6011      	str	r1, [r2, #0]
 8005e26:	681d      	ldr	r5, [r3, #0]
 8005e28:	6862      	ldr	r2, [r4, #4]
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f7fa f9f7 	bl	8000220 <memchr>
 8005e32:	b108      	cbz	r0, 8005e38 <_printf_i+0x1bc>
 8005e34:	1b40      	subs	r0, r0, r5
 8005e36:	6060      	str	r0, [r4, #4]
 8005e38:	6863      	ldr	r3, [r4, #4]
 8005e3a:	6123      	str	r3, [r4, #16]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e42:	e7a7      	b.n	8005d94 <_printf_i+0x118>
 8005e44:	6923      	ldr	r3, [r4, #16]
 8005e46:	462a      	mov	r2, r5
 8005e48:	4639      	mov	r1, r7
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	47c0      	blx	r8
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d0aa      	beq.n	8005da8 <_printf_i+0x12c>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	079b      	lsls	r3, r3, #30
 8005e56:	d413      	bmi.n	8005e80 <_printf_i+0x204>
 8005e58:	68e0      	ldr	r0, [r4, #12]
 8005e5a:	9b03      	ldr	r3, [sp, #12]
 8005e5c:	4298      	cmp	r0, r3
 8005e5e:	bfb8      	it	lt
 8005e60:	4618      	movlt	r0, r3
 8005e62:	e7a3      	b.n	8005dac <_printf_i+0x130>
 8005e64:	2301      	movs	r3, #1
 8005e66:	464a      	mov	r2, r9
 8005e68:	4639      	mov	r1, r7
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	47c0      	blx	r8
 8005e6e:	3001      	adds	r0, #1
 8005e70:	d09a      	beq.n	8005da8 <_printf_i+0x12c>
 8005e72:	3501      	adds	r5, #1
 8005e74:	68e3      	ldr	r3, [r4, #12]
 8005e76:	9a03      	ldr	r2, [sp, #12]
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	42ab      	cmp	r3, r5
 8005e7c:	dcf2      	bgt.n	8005e64 <_printf_i+0x1e8>
 8005e7e:	e7eb      	b.n	8005e58 <_printf_i+0x1dc>
 8005e80:	2500      	movs	r5, #0
 8005e82:	f104 0919 	add.w	r9, r4, #25
 8005e86:	e7f5      	b.n	8005e74 <_printf_i+0x1f8>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1ac      	bne.n	8005de6 <_printf_i+0x16a>
 8005e8c:	7803      	ldrb	r3, [r0, #0]
 8005e8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e96:	e76c      	b.n	8005d72 <_printf_i+0xf6>
 8005e98:	080084e2 	.word	0x080084e2
 8005e9c:	080084f3 	.word	0x080084f3

08005ea0 <iprintf>:
 8005ea0:	b40f      	push	{r0, r1, r2, r3}
 8005ea2:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <iprintf+0x2c>)
 8005ea4:	b513      	push	{r0, r1, r4, lr}
 8005ea6:	681c      	ldr	r4, [r3, #0]
 8005ea8:	b124      	cbz	r4, 8005eb4 <iprintf+0x14>
 8005eaa:	69a3      	ldr	r3, [r4, #24]
 8005eac:	b913      	cbnz	r3, 8005eb4 <iprintf+0x14>
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f001 f89a 	bl	8006fe8 <__sinit>
 8005eb4:	ab05      	add	r3, sp, #20
 8005eb6:	9a04      	ldr	r2, [sp, #16]
 8005eb8:	68a1      	ldr	r1, [r4, #8]
 8005eba:	9301      	str	r3, [sp, #4]
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f001 feaf 	bl	8007c20 <_vfiprintf_r>
 8005ec2:	b002      	add	sp, #8
 8005ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ec8:	b004      	add	sp, #16
 8005eca:	4770      	bx	lr
 8005ecc:	2000000c 	.word	0x2000000c

08005ed0 <putchar>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <putchar+0x24>)
 8005ed4:	681c      	ldr	r4, [r3, #0]
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	b124      	cbz	r4, 8005ee4 <putchar+0x14>
 8005eda:	69a3      	ldr	r3, [r4, #24]
 8005edc:	b913      	cbnz	r3, 8005ee4 <putchar+0x14>
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f001 f882 	bl	8006fe8 <__sinit>
 8005ee4:	68a2      	ldr	r2, [r4, #8]
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	4620      	mov	r0, r4
 8005eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eee:	f001 bfad 	b.w	8007e4c <_putc_r>
 8005ef2:	bf00      	nop
 8005ef4:	2000000c 	.word	0x2000000c

08005ef8 <_puts_r>:
 8005ef8:	b570      	push	{r4, r5, r6, lr}
 8005efa:	460e      	mov	r6, r1
 8005efc:	4605      	mov	r5, r0
 8005efe:	b118      	cbz	r0, 8005f08 <_puts_r+0x10>
 8005f00:	6983      	ldr	r3, [r0, #24]
 8005f02:	b90b      	cbnz	r3, 8005f08 <_puts_r+0x10>
 8005f04:	f001 f870 	bl	8006fe8 <__sinit>
 8005f08:	69ab      	ldr	r3, [r5, #24]
 8005f0a:	68ac      	ldr	r4, [r5, #8]
 8005f0c:	b913      	cbnz	r3, 8005f14 <_puts_r+0x1c>
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f001 f86a 	bl	8006fe8 <__sinit>
 8005f14:	4b23      	ldr	r3, [pc, #140]	; (8005fa4 <_puts_r+0xac>)
 8005f16:	429c      	cmp	r4, r3
 8005f18:	d117      	bne.n	8005f4a <_puts_r+0x52>
 8005f1a:	686c      	ldr	r4, [r5, #4]
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	071b      	lsls	r3, r3, #28
 8005f20:	d51d      	bpl.n	8005f5e <_puts_r+0x66>
 8005f22:	6923      	ldr	r3, [r4, #16]
 8005f24:	b1db      	cbz	r3, 8005f5e <_puts_r+0x66>
 8005f26:	3e01      	subs	r6, #1
 8005f28:	68a3      	ldr	r3, [r4, #8]
 8005f2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	60a3      	str	r3, [r4, #8]
 8005f32:	b9e9      	cbnz	r1, 8005f70 <_puts_r+0x78>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	da2e      	bge.n	8005f96 <_puts_r+0x9e>
 8005f38:	4622      	mov	r2, r4
 8005f3a:	210a      	movs	r1, #10
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f000 f85f 	bl	8006000 <__swbuf_r>
 8005f42:	3001      	adds	r0, #1
 8005f44:	d011      	beq.n	8005f6a <_puts_r+0x72>
 8005f46:	200a      	movs	r0, #10
 8005f48:	e011      	b.n	8005f6e <_puts_r+0x76>
 8005f4a:	4b17      	ldr	r3, [pc, #92]	; (8005fa8 <_puts_r+0xb0>)
 8005f4c:	429c      	cmp	r4, r3
 8005f4e:	d101      	bne.n	8005f54 <_puts_r+0x5c>
 8005f50:	68ac      	ldr	r4, [r5, #8]
 8005f52:	e7e3      	b.n	8005f1c <_puts_r+0x24>
 8005f54:	4b15      	ldr	r3, [pc, #84]	; (8005fac <_puts_r+0xb4>)
 8005f56:	429c      	cmp	r4, r3
 8005f58:	bf08      	it	eq
 8005f5a:	68ec      	ldreq	r4, [r5, #12]
 8005f5c:	e7de      	b.n	8005f1c <_puts_r+0x24>
 8005f5e:	4621      	mov	r1, r4
 8005f60:	4628      	mov	r0, r5
 8005f62:	f000 f89f 	bl	80060a4 <__swsetup_r>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d0dd      	beq.n	8005f26 <_puts_r+0x2e>
 8005f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	da04      	bge.n	8005f7e <_puts_r+0x86>
 8005f74:	69a2      	ldr	r2, [r4, #24]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	dc06      	bgt.n	8005f88 <_puts_r+0x90>
 8005f7a:	290a      	cmp	r1, #10
 8005f7c:	d004      	beq.n	8005f88 <_puts_r+0x90>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	6022      	str	r2, [r4, #0]
 8005f84:	7019      	strb	r1, [r3, #0]
 8005f86:	e7cf      	b.n	8005f28 <_puts_r+0x30>
 8005f88:	4622      	mov	r2, r4
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f000 f838 	bl	8006000 <__swbuf_r>
 8005f90:	3001      	adds	r0, #1
 8005f92:	d1c9      	bne.n	8005f28 <_puts_r+0x30>
 8005f94:	e7e9      	b.n	8005f6a <_puts_r+0x72>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	200a      	movs	r0, #10
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	6022      	str	r2, [r4, #0]
 8005f9e:	7018      	strb	r0, [r3, #0]
 8005fa0:	e7e5      	b.n	8005f6e <_puts_r+0x76>
 8005fa2:	bf00      	nop
 8005fa4:	08008534 	.word	0x08008534
 8005fa8:	08008554 	.word	0x08008554
 8005fac:	08008514 	.word	0x08008514

08005fb0 <puts>:
 8005fb0:	4b02      	ldr	r3, [pc, #8]	; (8005fbc <puts+0xc>)
 8005fb2:	4601      	mov	r1, r0
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	f7ff bf9f 	b.w	8005ef8 <_puts_r>
 8005fba:	bf00      	nop
 8005fbc:	2000000c 	.word	0x2000000c

08005fc0 <siprintf>:
 8005fc0:	b40e      	push	{r1, r2, r3}
 8005fc2:	b500      	push	{lr}
 8005fc4:	b09c      	sub	sp, #112	; 0x70
 8005fc6:	ab1d      	add	r3, sp, #116	; 0x74
 8005fc8:	9002      	str	r0, [sp, #8]
 8005fca:	9006      	str	r0, [sp, #24]
 8005fcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fd0:	4809      	ldr	r0, [pc, #36]	; (8005ff8 <siprintf+0x38>)
 8005fd2:	9107      	str	r1, [sp, #28]
 8005fd4:	9104      	str	r1, [sp, #16]
 8005fd6:	4909      	ldr	r1, [pc, #36]	; (8005ffc <siprintf+0x3c>)
 8005fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fdc:	9105      	str	r1, [sp, #20]
 8005fde:	6800      	ldr	r0, [r0, #0]
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	a902      	add	r1, sp, #8
 8005fe4:	f001 fcfa 	bl	80079dc <_svfiprintf_r>
 8005fe8:	9b02      	ldr	r3, [sp, #8]
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	b01c      	add	sp, #112	; 0x70
 8005ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ff4:	b003      	add	sp, #12
 8005ff6:	4770      	bx	lr
 8005ff8:	2000000c 	.word	0x2000000c
 8005ffc:	ffff0208 	.word	0xffff0208

08006000 <__swbuf_r>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	460e      	mov	r6, r1
 8006004:	4614      	mov	r4, r2
 8006006:	4605      	mov	r5, r0
 8006008:	b118      	cbz	r0, 8006012 <__swbuf_r+0x12>
 800600a:	6983      	ldr	r3, [r0, #24]
 800600c:	b90b      	cbnz	r3, 8006012 <__swbuf_r+0x12>
 800600e:	f000 ffeb 	bl	8006fe8 <__sinit>
 8006012:	4b21      	ldr	r3, [pc, #132]	; (8006098 <__swbuf_r+0x98>)
 8006014:	429c      	cmp	r4, r3
 8006016:	d12a      	bne.n	800606e <__swbuf_r+0x6e>
 8006018:	686c      	ldr	r4, [r5, #4]
 800601a:	69a3      	ldr	r3, [r4, #24]
 800601c:	60a3      	str	r3, [r4, #8]
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	071a      	lsls	r2, r3, #28
 8006022:	d52e      	bpl.n	8006082 <__swbuf_r+0x82>
 8006024:	6923      	ldr	r3, [r4, #16]
 8006026:	b363      	cbz	r3, 8006082 <__swbuf_r+0x82>
 8006028:	6923      	ldr	r3, [r4, #16]
 800602a:	6820      	ldr	r0, [r4, #0]
 800602c:	1ac0      	subs	r0, r0, r3
 800602e:	6963      	ldr	r3, [r4, #20]
 8006030:	b2f6      	uxtb	r6, r6
 8006032:	4283      	cmp	r3, r0
 8006034:	4637      	mov	r7, r6
 8006036:	dc04      	bgt.n	8006042 <__swbuf_r+0x42>
 8006038:	4621      	mov	r1, r4
 800603a:	4628      	mov	r0, r5
 800603c:	f000 ff6a 	bl	8006f14 <_fflush_r>
 8006040:	bb28      	cbnz	r0, 800608e <__swbuf_r+0x8e>
 8006042:	68a3      	ldr	r3, [r4, #8]
 8006044:	3b01      	subs	r3, #1
 8006046:	60a3      	str	r3, [r4, #8]
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	6022      	str	r2, [r4, #0]
 800604e:	701e      	strb	r6, [r3, #0]
 8006050:	6963      	ldr	r3, [r4, #20]
 8006052:	3001      	adds	r0, #1
 8006054:	4283      	cmp	r3, r0
 8006056:	d004      	beq.n	8006062 <__swbuf_r+0x62>
 8006058:	89a3      	ldrh	r3, [r4, #12]
 800605a:	07db      	lsls	r3, r3, #31
 800605c:	d519      	bpl.n	8006092 <__swbuf_r+0x92>
 800605e:	2e0a      	cmp	r6, #10
 8006060:	d117      	bne.n	8006092 <__swbuf_r+0x92>
 8006062:	4621      	mov	r1, r4
 8006064:	4628      	mov	r0, r5
 8006066:	f000 ff55 	bl	8006f14 <_fflush_r>
 800606a:	b190      	cbz	r0, 8006092 <__swbuf_r+0x92>
 800606c:	e00f      	b.n	800608e <__swbuf_r+0x8e>
 800606e:	4b0b      	ldr	r3, [pc, #44]	; (800609c <__swbuf_r+0x9c>)
 8006070:	429c      	cmp	r4, r3
 8006072:	d101      	bne.n	8006078 <__swbuf_r+0x78>
 8006074:	68ac      	ldr	r4, [r5, #8]
 8006076:	e7d0      	b.n	800601a <__swbuf_r+0x1a>
 8006078:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <__swbuf_r+0xa0>)
 800607a:	429c      	cmp	r4, r3
 800607c:	bf08      	it	eq
 800607e:	68ec      	ldreq	r4, [r5, #12]
 8006080:	e7cb      	b.n	800601a <__swbuf_r+0x1a>
 8006082:	4621      	mov	r1, r4
 8006084:	4628      	mov	r0, r5
 8006086:	f000 f80d 	bl	80060a4 <__swsetup_r>
 800608a:	2800      	cmp	r0, #0
 800608c:	d0cc      	beq.n	8006028 <__swbuf_r+0x28>
 800608e:	f04f 37ff 	mov.w	r7, #4294967295
 8006092:	4638      	mov	r0, r7
 8006094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006096:	bf00      	nop
 8006098:	08008534 	.word	0x08008534
 800609c:	08008554 	.word	0x08008554
 80060a0:	08008514 	.word	0x08008514

080060a4 <__swsetup_r>:
 80060a4:	4b32      	ldr	r3, [pc, #200]	; (8006170 <__swsetup_r+0xcc>)
 80060a6:	b570      	push	{r4, r5, r6, lr}
 80060a8:	681d      	ldr	r5, [r3, #0]
 80060aa:	4606      	mov	r6, r0
 80060ac:	460c      	mov	r4, r1
 80060ae:	b125      	cbz	r5, 80060ba <__swsetup_r+0x16>
 80060b0:	69ab      	ldr	r3, [r5, #24]
 80060b2:	b913      	cbnz	r3, 80060ba <__swsetup_r+0x16>
 80060b4:	4628      	mov	r0, r5
 80060b6:	f000 ff97 	bl	8006fe8 <__sinit>
 80060ba:	4b2e      	ldr	r3, [pc, #184]	; (8006174 <__swsetup_r+0xd0>)
 80060bc:	429c      	cmp	r4, r3
 80060be:	d10f      	bne.n	80060e0 <__swsetup_r+0x3c>
 80060c0:	686c      	ldr	r4, [r5, #4]
 80060c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	0715      	lsls	r5, r2, #28
 80060ca:	d42c      	bmi.n	8006126 <__swsetup_r+0x82>
 80060cc:	06d0      	lsls	r0, r2, #27
 80060ce:	d411      	bmi.n	80060f4 <__swsetup_r+0x50>
 80060d0:	2209      	movs	r2, #9
 80060d2:	6032      	str	r2, [r6, #0]
 80060d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d8:	81a3      	strh	r3, [r4, #12]
 80060da:	f04f 30ff 	mov.w	r0, #4294967295
 80060de:	e03e      	b.n	800615e <__swsetup_r+0xba>
 80060e0:	4b25      	ldr	r3, [pc, #148]	; (8006178 <__swsetup_r+0xd4>)
 80060e2:	429c      	cmp	r4, r3
 80060e4:	d101      	bne.n	80060ea <__swsetup_r+0x46>
 80060e6:	68ac      	ldr	r4, [r5, #8]
 80060e8:	e7eb      	b.n	80060c2 <__swsetup_r+0x1e>
 80060ea:	4b24      	ldr	r3, [pc, #144]	; (800617c <__swsetup_r+0xd8>)
 80060ec:	429c      	cmp	r4, r3
 80060ee:	bf08      	it	eq
 80060f0:	68ec      	ldreq	r4, [r5, #12]
 80060f2:	e7e6      	b.n	80060c2 <__swsetup_r+0x1e>
 80060f4:	0751      	lsls	r1, r2, #29
 80060f6:	d512      	bpl.n	800611e <__swsetup_r+0x7a>
 80060f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060fa:	b141      	cbz	r1, 800610e <__swsetup_r+0x6a>
 80060fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006100:	4299      	cmp	r1, r3
 8006102:	d002      	beq.n	800610a <__swsetup_r+0x66>
 8006104:	4630      	mov	r0, r6
 8006106:	f001 fb67 	bl	80077d8 <_free_r>
 800610a:	2300      	movs	r3, #0
 800610c:	6363      	str	r3, [r4, #52]	; 0x34
 800610e:	89a3      	ldrh	r3, [r4, #12]
 8006110:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006114:	81a3      	strh	r3, [r4, #12]
 8006116:	2300      	movs	r3, #0
 8006118:	6063      	str	r3, [r4, #4]
 800611a:	6923      	ldr	r3, [r4, #16]
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	89a3      	ldrh	r3, [r4, #12]
 8006120:	f043 0308 	orr.w	r3, r3, #8
 8006124:	81a3      	strh	r3, [r4, #12]
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	b94b      	cbnz	r3, 800613e <__swsetup_r+0x9a>
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006134:	d003      	beq.n	800613e <__swsetup_r+0x9a>
 8006136:	4621      	mov	r1, r4
 8006138:	4630      	mov	r0, r6
 800613a:	f001 f811 	bl	8007160 <__smakebuf_r>
 800613e:	89a2      	ldrh	r2, [r4, #12]
 8006140:	f012 0301 	ands.w	r3, r2, #1
 8006144:	d00c      	beq.n	8006160 <__swsetup_r+0xbc>
 8006146:	2300      	movs	r3, #0
 8006148:	60a3      	str	r3, [r4, #8]
 800614a:	6963      	ldr	r3, [r4, #20]
 800614c:	425b      	negs	r3, r3
 800614e:	61a3      	str	r3, [r4, #24]
 8006150:	6923      	ldr	r3, [r4, #16]
 8006152:	b953      	cbnz	r3, 800616a <__swsetup_r+0xc6>
 8006154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006158:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800615c:	d1ba      	bne.n	80060d4 <__swsetup_r+0x30>
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	0792      	lsls	r2, r2, #30
 8006162:	bf58      	it	pl
 8006164:	6963      	ldrpl	r3, [r4, #20]
 8006166:	60a3      	str	r3, [r4, #8]
 8006168:	e7f2      	b.n	8006150 <__swsetup_r+0xac>
 800616a:	2000      	movs	r0, #0
 800616c:	e7f7      	b.n	800615e <__swsetup_r+0xba>
 800616e:	bf00      	nop
 8006170:	2000000c 	.word	0x2000000c
 8006174:	08008534 	.word	0x08008534
 8006178:	08008554 	.word	0x08008554
 800617c:	08008514 	.word	0x08008514

08006180 <quorem>:
 8006180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	6903      	ldr	r3, [r0, #16]
 8006186:	690c      	ldr	r4, [r1, #16]
 8006188:	42a3      	cmp	r3, r4
 800618a:	4680      	mov	r8, r0
 800618c:	f2c0 8082 	blt.w	8006294 <quorem+0x114>
 8006190:	3c01      	subs	r4, #1
 8006192:	f101 0714 	add.w	r7, r1, #20
 8006196:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800619a:	f100 0614 	add.w	r6, r0, #20
 800619e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80061a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80061a6:	eb06 030c 	add.w	r3, r6, ip
 80061aa:	3501      	adds	r5, #1
 80061ac:	eb07 090c 	add.w	r9, r7, ip
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	fbb0 f5f5 	udiv	r5, r0, r5
 80061b6:	b395      	cbz	r5, 800621e <quorem+0x9e>
 80061b8:	f04f 0a00 	mov.w	sl, #0
 80061bc:	4638      	mov	r0, r7
 80061be:	46b6      	mov	lr, r6
 80061c0:	46d3      	mov	fp, sl
 80061c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80061c6:	b293      	uxth	r3, r2
 80061c8:	fb05 a303 	mla	r3, r5, r3, sl
 80061cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	ebab 0303 	sub.w	r3, fp, r3
 80061d6:	0c12      	lsrs	r2, r2, #16
 80061d8:	f8de b000 	ldr.w	fp, [lr]
 80061dc:	fb05 a202 	mla	r2, r5, r2, sl
 80061e0:	fa13 f38b 	uxtah	r3, r3, fp
 80061e4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80061e8:	fa1f fb82 	uxth.w	fp, r2
 80061ec:	f8de 2000 	ldr.w	r2, [lr]
 80061f0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80061f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061fe:	4581      	cmp	r9, r0
 8006200:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006204:	f84e 3b04 	str.w	r3, [lr], #4
 8006208:	d2db      	bcs.n	80061c2 <quorem+0x42>
 800620a:	f856 300c 	ldr.w	r3, [r6, ip]
 800620e:	b933      	cbnz	r3, 800621e <quorem+0x9e>
 8006210:	9b01      	ldr	r3, [sp, #4]
 8006212:	3b04      	subs	r3, #4
 8006214:	429e      	cmp	r6, r3
 8006216:	461a      	mov	r2, r3
 8006218:	d330      	bcc.n	800627c <quorem+0xfc>
 800621a:	f8c8 4010 	str.w	r4, [r8, #16]
 800621e:	4640      	mov	r0, r8
 8006220:	f001 fa06 	bl	8007630 <__mcmp>
 8006224:	2800      	cmp	r0, #0
 8006226:	db25      	blt.n	8006274 <quorem+0xf4>
 8006228:	3501      	adds	r5, #1
 800622a:	4630      	mov	r0, r6
 800622c:	f04f 0c00 	mov.w	ip, #0
 8006230:	f857 2b04 	ldr.w	r2, [r7], #4
 8006234:	f8d0 e000 	ldr.w	lr, [r0]
 8006238:	b293      	uxth	r3, r2
 800623a:	ebac 0303 	sub.w	r3, ip, r3
 800623e:	0c12      	lsrs	r2, r2, #16
 8006240:	fa13 f38e 	uxtah	r3, r3, lr
 8006244:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006248:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800624c:	b29b      	uxth	r3, r3
 800624e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006252:	45b9      	cmp	r9, r7
 8006254:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006258:	f840 3b04 	str.w	r3, [r0], #4
 800625c:	d2e8      	bcs.n	8006230 <quorem+0xb0>
 800625e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006262:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006266:	b92a      	cbnz	r2, 8006274 <quorem+0xf4>
 8006268:	3b04      	subs	r3, #4
 800626a:	429e      	cmp	r6, r3
 800626c:	461a      	mov	r2, r3
 800626e:	d30b      	bcc.n	8006288 <quorem+0x108>
 8006270:	f8c8 4010 	str.w	r4, [r8, #16]
 8006274:	4628      	mov	r0, r5
 8006276:	b003      	add	sp, #12
 8006278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	3b04      	subs	r3, #4
 8006280:	2a00      	cmp	r2, #0
 8006282:	d1ca      	bne.n	800621a <quorem+0x9a>
 8006284:	3c01      	subs	r4, #1
 8006286:	e7c5      	b.n	8006214 <quorem+0x94>
 8006288:	6812      	ldr	r2, [r2, #0]
 800628a:	3b04      	subs	r3, #4
 800628c:	2a00      	cmp	r2, #0
 800628e:	d1ef      	bne.n	8006270 <quorem+0xf0>
 8006290:	3c01      	subs	r4, #1
 8006292:	e7ea      	b.n	800626a <quorem+0xea>
 8006294:	2000      	movs	r0, #0
 8006296:	e7ee      	b.n	8006276 <quorem+0xf6>

08006298 <_dtoa_r>:
 8006298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629c:	ec57 6b10 	vmov	r6, r7, d0
 80062a0:	b097      	sub	sp, #92	; 0x5c
 80062a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062a4:	9106      	str	r1, [sp, #24]
 80062a6:	4604      	mov	r4, r0
 80062a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80062aa:	9312      	str	r3, [sp, #72]	; 0x48
 80062ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80062b0:	e9cd 6700 	strd	r6, r7, [sp]
 80062b4:	b93d      	cbnz	r5, 80062c6 <_dtoa_r+0x2e>
 80062b6:	2010      	movs	r0, #16
 80062b8:	f000 ff92 	bl	80071e0 <malloc>
 80062bc:	6260      	str	r0, [r4, #36]	; 0x24
 80062be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062c2:	6005      	str	r5, [r0, #0]
 80062c4:	60c5      	str	r5, [r0, #12]
 80062c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062c8:	6819      	ldr	r1, [r3, #0]
 80062ca:	b151      	cbz	r1, 80062e2 <_dtoa_r+0x4a>
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	604a      	str	r2, [r1, #4]
 80062d0:	2301      	movs	r3, #1
 80062d2:	4093      	lsls	r3, r2
 80062d4:	608b      	str	r3, [r1, #8]
 80062d6:	4620      	mov	r0, r4
 80062d8:	f000 ffc9 	bl	800726e <_Bfree>
 80062dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	1e3b      	subs	r3, r7, #0
 80062e4:	bfbb      	ittet	lt
 80062e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80062ea:	9301      	strlt	r3, [sp, #4]
 80062ec:	2300      	movge	r3, #0
 80062ee:	2201      	movlt	r2, #1
 80062f0:	bfac      	ite	ge
 80062f2:	f8c8 3000 	strge.w	r3, [r8]
 80062f6:	f8c8 2000 	strlt.w	r2, [r8]
 80062fa:	4baf      	ldr	r3, [pc, #700]	; (80065b8 <_dtoa_r+0x320>)
 80062fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006300:	ea33 0308 	bics.w	r3, r3, r8
 8006304:	d114      	bne.n	8006330 <_dtoa_r+0x98>
 8006306:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006308:	f242 730f 	movw	r3, #9999	; 0x270f
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	9b00      	ldr	r3, [sp, #0]
 8006310:	b923      	cbnz	r3, 800631c <_dtoa_r+0x84>
 8006312:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006316:	2800      	cmp	r0, #0
 8006318:	f000 8542 	beq.w	8006da0 <_dtoa_r+0xb08>
 800631c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800631e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80065cc <_dtoa_r+0x334>
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 8544 	beq.w	8006db0 <_dtoa_r+0xb18>
 8006328:	f10b 0303 	add.w	r3, fp, #3
 800632c:	f000 bd3e 	b.w	8006dac <_dtoa_r+0xb14>
 8006330:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006334:	2200      	movs	r2, #0
 8006336:	2300      	movs	r3, #0
 8006338:	4630      	mov	r0, r6
 800633a:	4639      	mov	r1, r7
 800633c:	f7fa fbe4 	bl	8000b08 <__aeabi_dcmpeq>
 8006340:	4681      	mov	r9, r0
 8006342:	b168      	cbz	r0, 8006360 <_dtoa_r+0xc8>
 8006344:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006346:	2301      	movs	r3, #1
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 8524 	beq.w	8006d9a <_dtoa_r+0xb02>
 8006352:	4b9a      	ldr	r3, [pc, #616]	; (80065bc <_dtoa_r+0x324>)
 8006354:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006356:	f103 3bff 	add.w	fp, r3, #4294967295
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	f000 bd28 	b.w	8006db0 <_dtoa_r+0xb18>
 8006360:	aa14      	add	r2, sp, #80	; 0x50
 8006362:	a915      	add	r1, sp, #84	; 0x54
 8006364:	ec47 6b10 	vmov	d0, r6, r7
 8006368:	4620      	mov	r0, r4
 800636a:	f001 f9d8 	bl	800771e <__d2b>
 800636e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006372:	9004      	str	r0, [sp, #16]
 8006374:	2d00      	cmp	r5, #0
 8006376:	d07c      	beq.n	8006472 <_dtoa_r+0x1da>
 8006378:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800637c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006380:	46b2      	mov	sl, r6
 8006382:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800638a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800638e:	2200      	movs	r2, #0
 8006390:	4b8b      	ldr	r3, [pc, #556]	; (80065c0 <_dtoa_r+0x328>)
 8006392:	4650      	mov	r0, sl
 8006394:	4659      	mov	r1, fp
 8006396:	f7f9 ff97 	bl	80002c8 <__aeabi_dsub>
 800639a:	a381      	add	r3, pc, #516	; (adr r3, 80065a0 <_dtoa_r+0x308>)
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	f7fa f94a 	bl	8000638 <__aeabi_dmul>
 80063a4:	a380      	add	r3, pc, #512	; (adr r3, 80065a8 <_dtoa_r+0x310>)
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	f7f9 ff8f 	bl	80002cc <__adddf3>
 80063ae:	4606      	mov	r6, r0
 80063b0:	4628      	mov	r0, r5
 80063b2:	460f      	mov	r7, r1
 80063b4:	f7fa f8d6 	bl	8000564 <__aeabi_i2d>
 80063b8:	a37d      	add	r3, pc, #500	; (adr r3, 80065b0 <_dtoa_r+0x318>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f7fa f93b 	bl	8000638 <__aeabi_dmul>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4630      	mov	r0, r6
 80063c8:	4639      	mov	r1, r7
 80063ca:	f7f9 ff7f 	bl	80002cc <__adddf3>
 80063ce:	4606      	mov	r6, r0
 80063d0:	460f      	mov	r7, r1
 80063d2:	f7fa fbe1 	bl	8000b98 <__aeabi_d2iz>
 80063d6:	2200      	movs	r2, #0
 80063d8:	4682      	mov	sl, r0
 80063da:	2300      	movs	r3, #0
 80063dc:	4630      	mov	r0, r6
 80063de:	4639      	mov	r1, r7
 80063e0:	f7fa fb9c 	bl	8000b1c <__aeabi_dcmplt>
 80063e4:	b148      	cbz	r0, 80063fa <_dtoa_r+0x162>
 80063e6:	4650      	mov	r0, sl
 80063e8:	f7fa f8bc 	bl	8000564 <__aeabi_i2d>
 80063ec:	4632      	mov	r2, r6
 80063ee:	463b      	mov	r3, r7
 80063f0:	f7fa fb8a 	bl	8000b08 <__aeabi_dcmpeq>
 80063f4:	b908      	cbnz	r0, 80063fa <_dtoa_r+0x162>
 80063f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063fa:	f1ba 0f16 	cmp.w	sl, #22
 80063fe:	d859      	bhi.n	80064b4 <_dtoa_r+0x21c>
 8006400:	4970      	ldr	r1, [pc, #448]	; (80065c4 <_dtoa_r+0x32c>)
 8006402:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006406:	e9dd 2300 	ldrd	r2, r3, [sp]
 800640a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800640e:	f7fa fba3 	bl	8000b58 <__aeabi_dcmpgt>
 8006412:	2800      	cmp	r0, #0
 8006414:	d050      	beq.n	80064b8 <_dtoa_r+0x220>
 8006416:	f10a 3aff 	add.w	sl, sl, #4294967295
 800641a:	2300      	movs	r3, #0
 800641c:	930f      	str	r3, [sp, #60]	; 0x3c
 800641e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006420:	1b5d      	subs	r5, r3, r5
 8006422:	f1b5 0801 	subs.w	r8, r5, #1
 8006426:	bf49      	itett	mi
 8006428:	f1c5 0301 	rsbmi	r3, r5, #1
 800642c:	2300      	movpl	r3, #0
 800642e:	9305      	strmi	r3, [sp, #20]
 8006430:	f04f 0800 	movmi.w	r8, #0
 8006434:	bf58      	it	pl
 8006436:	9305      	strpl	r3, [sp, #20]
 8006438:	f1ba 0f00 	cmp.w	sl, #0
 800643c:	db3e      	blt.n	80064bc <_dtoa_r+0x224>
 800643e:	2300      	movs	r3, #0
 8006440:	44d0      	add	r8, sl
 8006442:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006446:	9307      	str	r3, [sp, #28]
 8006448:	9b06      	ldr	r3, [sp, #24]
 800644a:	2b09      	cmp	r3, #9
 800644c:	f200 8090 	bhi.w	8006570 <_dtoa_r+0x2d8>
 8006450:	2b05      	cmp	r3, #5
 8006452:	bfc4      	itt	gt
 8006454:	3b04      	subgt	r3, #4
 8006456:	9306      	strgt	r3, [sp, #24]
 8006458:	9b06      	ldr	r3, [sp, #24]
 800645a:	f1a3 0302 	sub.w	r3, r3, #2
 800645e:	bfcc      	ite	gt
 8006460:	2500      	movgt	r5, #0
 8006462:	2501      	movle	r5, #1
 8006464:	2b03      	cmp	r3, #3
 8006466:	f200 808f 	bhi.w	8006588 <_dtoa_r+0x2f0>
 800646a:	e8df f003 	tbb	[pc, r3]
 800646e:	7f7d      	.short	0x7f7d
 8006470:	7131      	.short	0x7131
 8006472:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006476:	441d      	add	r5, r3
 8006478:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800647c:	2820      	cmp	r0, #32
 800647e:	dd13      	ble.n	80064a8 <_dtoa_r+0x210>
 8006480:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006484:	9b00      	ldr	r3, [sp, #0]
 8006486:	fa08 f800 	lsl.w	r8, r8, r0
 800648a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800648e:	fa23 f000 	lsr.w	r0, r3, r0
 8006492:	ea48 0000 	orr.w	r0, r8, r0
 8006496:	f7fa f855 	bl	8000544 <__aeabi_ui2d>
 800649a:	2301      	movs	r3, #1
 800649c:	4682      	mov	sl, r0
 800649e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80064a2:	3d01      	subs	r5, #1
 80064a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80064a6:	e772      	b.n	800638e <_dtoa_r+0xf6>
 80064a8:	9b00      	ldr	r3, [sp, #0]
 80064aa:	f1c0 0020 	rsb	r0, r0, #32
 80064ae:	fa03 f000 	lsl.w	r0, r3, r0
 80064b2:	e7f0      	b.n	8006496 <_dtoa_r+0x1fe>
 80064b4:	2301      	movs	r3, #1
 80064b6:	e7b1      	b.n	800641c <_dtoa_r+0x184>
 80064b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80064ba:	e7b0      	b.n	800641e <_dtoa_r+0x186>
 80064bc:	9b05      	ldr	r3, [sp, #20]
 80064be:	eba3 030a 	sub.w	r3, r3, sl
 80064c2:	9305      	str	r3, [sp, #20]
 80064c4:	f1ca 0300 	rsb	r3, sl, #0
 80064c8:	9307      	str	r3, [sp, #28]
 80064ca:	2300      	movs	r3, #0
 80064cc:	930e      	str	r3, [sp, #56]	; 0x38
 80064ce:	e7bb      	b.n	8006448 <_dtoa_r+0x1b0>
 80064d0:	2301      	movs	r3, #1
 80064d2:	930a      	str	r3, [sp, #40]	; 0x28
 80064d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	dd59      	ble.n	800658e <_dtoa_r+0x2f6>
 80064da:	9302      	str	r3, [sp, #8]
 80064dc:	4699      	mov	r9, r3
 80064de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80064e0:	2200      	movs	r2, #0
 80064e2:	6072      	str	r2, [r6, #4]
 80064e4:	2204      	movs	r2, #4
 80064e6:	f102 0014 	add.w	r0, r2, #20
 80064ea:	4298      	cmp	r0, r3
 80064ec:	6871      	ldr	r1, [r6, #4]
 80064ee:	d953      	bls.n	8006598 <_dtoa_r+0x300>
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 fe88 	bl	8007206 <_Balloc>
 80064f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f8:	6030      	str	r0, [r6, #0]
 80064fa:	f1b9 0f0e 	cmp.w	r9, #14
 80064fe:	f8d3 b000 	ldr.w	fp, [r3]
 8006502:	f200 80e6 	bhi.w	80066d2 <_dtoa_r+0x43a>
 8006506:	2d00      	cmp	r5, #0
 8006508:	f000 80e3 	beq.w	80066d2 <_dtoa_r+0x43a>
 800650c:	ed9d 7b00 	vldr	d7, [sp]
 8006510:	f1ba 0f00 	cmp.w	sl, #0
 8006514:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006518:	dd74      	ble.n	8006604 <_dtoa_r+0x36c>
 800651a:	4a2a      	ldr	r2, [pc, #168]	; (80065c4 <_dtoa_r+0x32c>)
 800651c:	f00a 030f 	and.w	r3, sl, #15
 8006520:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006524:	ed93 7b00 	vldr	d7, [r3]
 8006528:	ea4f 162a 	mov.w	r6, sl, asr #4
 800652c:	06f0      	lsls	r0, r6, #27
 800652e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006532:	d565      	bpl.n	8006600 <_dtoa_r+0x368>
 8006534:	4b24      	ldr	r3, [pc, #144]	; (80065c8 <_dtoa_r+0x330>)
 8006536:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800653a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800653e:	f7fa f9a5 	bl	800088c <__aeabi_ddiv>
 8006542:	e9cd 0100 	strd	r0, r1, [sp]
 8006546:	f006 060f 	and.w	r6, r6, #15
 800654a:	2503      	movs	r5, #3
 800654c:	4f1e      	ldr	r7, [pc, #120]	; (80065c8 <_dtoa_r+0x330>)
 800654e:	e04c      	b.n	80065ea <_dtoa_r+0x352>
 8006550:	2301      	movs	r3, #1
 8006552:	930a      	str	r3, [sp, #40]	; 0x28
 8006554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006556:	4453      	add	r3, sl
 8006558:	f103 0901 	add.w	r9, r3, #1
 800655c:	9302      	str	r3, [sp, #8]
 800655e:	464b      	mov	r3, r9
 8006560:	2b01      	cmp	r3, #1
 8006562:	bfb8      	it	lt
 8006564:	2301      	movlt	r3, #1
 8006566:	e7ba      	b.n	80064de <_dtoa_r+0x246>
 8006568:	2300      	movs	r3, #0
 800656a:	e7b2      	b.n	80064d2 <_dtoa_r+0x23a>
 800656c:	2300      	movs	r3, #0
 800656e:	e7f0      	b.n	8006552 <_dtoa_r+0x2ba>
 8006570:	2501      	movs	r5, #1
 8006572:	2300      	movs	r3, #0
 8006574:	9306      	str	r3, [sp, #24]
 8006576:	950a      	str	r5, [sp, #40]	; 0x28
 8006578:	f04f 33ff 	mov.w	r3, #4294967295
 800657c:	9302      	str	r3, [sp, #8]
 800657e:	4699      	mov	r9, r3
 8006580:	2200      	movs	r2, #0
 8006582:	2312      	movs	r3, #18
 8006584:	920b      	str	r2, [sp, #44]	; 0x2c
 8006586:	e7aa      	b.n	80064de <_dtoa_r+0x246>
 8006588:	2301      	movs	r3, #1
 800658a:	930a      	str	r3, [sp, #40]	; 0x28
 800658c:	e7f4      	b.n	8006578 <_dtoa_r+0x2e0>
 800658e:	2301      	movs	r3, #1
 8006590:	9302      	str	r3, [sp, #8]
 8006592:	4699      	mov	r9, r3
 8006594:	461a      	mov	r2, r3
 8006596:	e7f5      	b.n	8006584 <_dtoa_r+0x2ec>
 8006598:	3101      	adds	r1, #1
 800659a:	6071      	str	r1, [r6, #4]
 800659c:	0052      	lsls	r2, r2, #1
 800659e:	e7a2      	b.n	80064e6 <_dtoa_r+0x24e>
 80065a0:	636f4361 	.word	0x636f4361
 80065a4:	3fd287a7 	.word	0x3fd287a7
 80065a8:	8b60c8b3 	.word	0x8b60c8b3
 80065ac:	3fc68a28 	.word	0x3fc68a28
 80065b0:	509f79fb 	.word	0x509f79fb
 80065b4:	3fd34413 	.word	0x3fd34413
 80065b8:	7ff00000 	.word	0x7ff00000
 80065bc:	080084e1 	.word	0x080084e1
 80065c0:	3ff80000 	.word	0x3ff80000
 80065c4:	080085a0 	.word	0x080085a0
 80065c8:	08008578 	.word	0x08008578
 80065cc:	0800850d 	.word	0x0800850d
 80065d0:	07f1      	lsls	r1, r6, #31
 80065d2:	d508      	bpl.n	80065e6 <_dtoa_r+0x34e>
 80065d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80065d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065dc:	f7fa f82c 	bl	8000638 <__aeabi_dmul>
 80065e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80065e4:	3501      	adds	r5, #1
 80065e6:	1076      	asrs	r6, r6, #1
 80065e8:	3708      	adds	r7, #8
 80065ea:	2e00      	cmp	r6, #0
 80065ec:	d1f0      	bne.n	80065d0 <_dtoa_r+0x338>
 80065ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80065f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065f6:	f7fa f949 	bl	800088c <__aeabi_ddiv>
 80065fa:	e9cd 0100 	strd	r0, r1, [sp]
 80065fe:	e01a      	b.n	8006636 <_dtoa_r+0x39e>
 8006600:	2502      	movs	r5, #2
 8006602:	e7a3      	b.n	800654c <_dtoa_r+0x2b4>
 8006604:	f000 80a0 	beq.w	8006748 <_dtoa_r+0x4b0>
 8006608:	f1ca 0600 	rsb	r6, sl, #0
 800660c:	4b9f      	ldr	r3, [pc, #636]	; (800688c <_dtoa_r+0x5f4>)
 800660e:	4fa0      	ldr	r7, [pc, #640]	; (8006890 <_dtoa_r+0x5f8>)
 8006610:	f006 020f 	and.w	r2, r6, #15
 8006614:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006620:	f7fa f80a 	bl	8000638 <__aeabi_dmul>
 8006624:	e9cd 0100 	strd	r0, r1, [sp]
 8006628:	1136      	asrs	r6, r6, #4
 800662a:	2300      	movs	r3, #0
 800662c:	2502      	movs	r5, #2
 800662e:	2e00      	cmp	r6, #0
 8006630:	d17f      	bne.n	8006732 <_dtoa_r+0x49a>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e1      	bne.n	80065fa <_dtoa_r+0x362>
 8006636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8087 	beq.w	800674c <_dtoa_r+0x4b4>
 800663e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006642:	2200      	movs	r2, #0
 8006644:	4b93      	ldr	r3, [pc, #588]	; (8006894 <_dtoa_r+0x5fc>)
 8006646:	4630      	mov	r0, r6
 8006648:	4639      	mov	r1, r7
 800664a:	f7fa fa67 	bl	8000b1c <__aeabi_dcmplt>
 800664e:	2800      	cmp	r0, #0
 8006650:	d07c      	beq.n	800674c <_dtoa_r+0x4b4>
 8006652:	f1b9 0f00 	cmp.w	r9, #0
 8006656:	d079      	beq.n	800674c <_dtoa_r+0x4b4>
 8006658:	9b02      	ldr	r3, [sp, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	dd35      	ble.n	80066ca <_dtoa_r+0x432>
 800665e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006662:	9308      	str	r3, [sp, #32]
 8006664:	4639      	mov	r1, r7
 8006666:	2200      	movs	r2, #0
 8006668:	4b8b      	ldr	r3, [pc, #556]	; (8006898 <_dtoa_r+0x600>)
 800666a:	4630      	mov	r0, r6
 800666c:	f7f9 ffe4 	bl	8000638 <__aeabi_dmul>
 8006670:	e9cd 0100 	strd	r0, r1, [sp]
 8006674:	9f02      	ldr	r7, [sp, #8]
 8006676:	3501      	adds	r5, #1
 8006678:	4628      	mov	r0, r5
 800667a:	f7f9 ff73 	bl	8000564 <__aeabi_i2d>
 800667e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006682:	f7f9 ffd9 	bl	8000638 <__aeabi_dmul>
 8006686:	2200      	movs	r2, #0
 8006688:	4b84      	ldr	r3, [pc, #528]	; (800689c <_dtoa_r+0x604>)
 800668a:	f7f9 fe1f 	bl	80002cc <__adddf3>
 800668e:	4605      	mov	r5, r0
 8006690:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006694:	2f00      	cmp	r7, #0
 8006696:	d15d      	bne.n	8006754 <_dtoa_r+0x4bc>
 8006698:	2200      	movs	r2, #0
 800669a:	4b81      	ldr	r3, [pc, #516]	; (80068a0 <_dtoa_r+0x608>)
 800669c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066a0:	f7f9 fe12 	bl	80002c8 <__aeabi_dsub>
 80066a4:	462a      	mov	r2, r5
 80066a6:	4633      	mov	r3, r6
 80066a8:	e9cd 0100 	strd	r0, r1, [sp]
 80066ac:	f7fa fa54 	bl	8000b58 <__aeabi_dcmpgt>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	f040 8288 	bne.w	8006bc6 <_dtoa_r+0x92e>
 80066b6:	462a      	mov	r2, r5
 80066b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80066bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066c0:	f7fa fa2c 	bl	8000b1c <__aeabi_dcmplt>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f040 827c 	bne.w	8006bc2 <_dtoa_r+0x92a>
 80066ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066ce:	e9cd 2300 	strd	r2, r3, [sp]
 80066d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f2c0 8150 	blt.w	800697a <_dtoa_r+0x6e2>
 80066da:	f1ba 0f0e 	cmp.w	sl, #14
 80066de:	f300 814c 	bgt.w	800697a <_dtoa_r+0x6e2>
 80066e2:	4b6a      	ldr	r3, [pc, #424]	; (800688c <_dtoa_r+0x5f4>)
 80066e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80066e8:	ed93 7b00 	vldr	d7, [r3]
 80066ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80066f4:	f280 80d8 	bge.w	80068a8 <_dtoa_r+0x610>
 80066f8:	f1b9 0f00 	cmp.w	r9, #0
 80066fc:	f300 80d4 	bgt.w	80068a8 <_dtoa_r+0x610>
 8006700:	f040 825e 	bne.w	8006bc0 <_dtoa_r+0x928>
 8006704:	2200      	movs	r2, #0
 8006706:	4b66      	ldr	r3, [pc, #408]	; (80068a0 <_dtoa_r+0x608>)
 8006708:	ec51 0b17 	vmov	r0, r1, d7
 800670c:	f7f9 ff94 	bl	8000638 <__aeabi_dmul>
 8006710:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006714:	f7fa fa16 	bl	8000b44 <__aeabi_dcmpge>
 8006718:	464f      	mov	r7, r9
 800671a:	464e      	mov	r6, r9
 800671c:	2800      	cmp	r0, #0
 800671e:	f040 8234 	bne.w	8006b8a <_dtoa_r+0x8f2>
 8006722:	2331      	movs	r3, #49	; 0x31
 8006724:	f10b 0501 	add.w	r5, fp, #1
 8006728:	f88b 3000 	strb.w	r3, [fp]
 800672c:	f10a 0a01 	add.w	sl, sl, #1
 8006730:	e22f      	b.n	8006b92 <_dtoa_r+0x8fa>
 8006732:	07f2      	lsls	r2, r6, #31
 8006734:	d505      	bpl.n	8006742 <_dtoa_r+0x4aa>
 8006736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800673a:	f7f9 ff7d 	bl	8000638 <__aeabi_dmul>
 800673e:	3501      	adds	r5, #1
 8006740:	2301      	movs	r3, #1
 8006742:	1076      	asrs	r6, r6, #1
 8006744:	3708      	adds	r7, #8
 8006746:	e772      	b.n	800662e <_dtoa_r+0x396>
 8006748:	2502      	movs	r5, #2
 800674a:	e774      	b.n	8006636 <_dtoa_r+0x39e>
 800674c:	f8cd a020 	str.w	sl, [sp, #32]
 8006750:	464f      	mov	r7, r9
 8006752:	e791      	b.n	8006678 <_dtoa_r+0x3e0>
 8006754:	4b4d      	ldr	r3, [pc, #308]	; (800688c <_dtoa_r+0x5f4>)
 8006756:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800675a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800675e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006760:	2b00      	cmp	r3, #0
 8006762:	d047      	beq.n	80067f4 <_dtoa_r+0x55c>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	2000      	movs	r0, #0
 800676a:	494e      	ldr	r1, [pc, #312]	; (80068a4 <_dtoa_r+0x60c>)
 800676c:	f7fa f88e 	bl	800088c <__aeabi_ddiv>
 8006770:	462a      	mov	r2, r5
 8006772:	4633      	mov	r3, r6
 8006774:	f7f9 fda8 	bl	80002c8 <__aeabi_dsub>
 8006778:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800677c:	465d      	mov	r5, fp
 800677e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006782:	f7fa fa09 	bl	8000b98 <__aeabi_d2iz>
 8006786:	4606      	mov	r6, r0
 8006788:	f7f9 feec 	bl	8000564 <__aeabi_i2d>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006794:	f7f9 fd98 	bl	80002c8 <__aeabi_dsub>
 8006798:	3630      	adds	r6, #48	; 0x30
 800679a:	f805 6b01 	strb.w	r6, [r5], #1
 800679e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80067a2:	e9cd 0100 	strd	r0, r1, [sp]
 80067a6:	f7fa f9b9 	bl	8000b1c <__aeabi_dcmplt>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d163      	bne.n	8006876 <_dtoa_r+0x5de>
 80067ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067b2:	2000      	movs	r0, #0
 80067b4:	4937      	ldr	r1, [pc, #220]	; (8006894 <_dtoa_r+0x5fc>)
 80067b6:	f7f9 fd87 	bl	80002c8 <__aeabi_dsub>
 80067ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80067be:	f7fa f9ad 	bl	8000b1c <__aeabi_dcmplt>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	f040 80b7 	bne.w	8006936 <_dtoa_r+0x69e>
 80067c8:	eba5 030b 	sub.w	r3, r5, fp
 80067cc:	429f      	cmp	r7, r3
 80067ce:	f77f af7c 	ble.w	80066ca <_dtoa_r+0x432>
 80067d2:	2200      	movs	r2, #0
 80067d4:	4b30      	ldr	r3, [pc, #192]	; (8006898 <_dtoa_r+0x600>)
 80067d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067da:	f7f9 ff2d 	bl	8000638 <__aeabi_dmul>
 80067de:	2200      	movs	r2, #0
 80067e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80067e4:	4b2c      	ldr	r3, [pc, #176]	; (8006898 <_dtoa_r+0x600>)
 80067e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067ea:	f7f9 ff25 	bl	8000638 <__aeabi_dmul>
 80067ee:	e9cd 0100 	strd	r0, r1, [sp]
 80067f2:	e7c4      	b.n	800677e <_dtoa_r+0x4e6>
 80067f4:	462a      	mov	r2, r5
 80067f6:	4633      	mov	r3, r6
 80067f8:	f7f9 ff1e 	bl	8000638 <__aeabi_dmul>
 80067fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006800:	eb0b 0507 	add.w	r5, fp, r7
 8006804:	465e      	mov	r6, fp
 8006806:	e9dd 0100 	ldrd	r0, r1, [sp]
 800680a:	f7fa f9c5 	bl	8000b98 <__aeabi_d2iz>
 800680e:	4607      	mov	r7, r0
 8006810:	f7f9 fea8 	bl	8000564 <__aeabi_i2d>
 8006814:	3730      	adds	r7, #48	; 0x30
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800681e:	f7f9 fd53 	bl	80002c8 <__aeabi_dsub>
 8006822:	f806 7b01 	strb.w	r7, [r6], #1
 8006826:	42ae      	cmp	r6, r5
 8006828:	e9cd 0100 	strd	r0, r1, [sp]
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	d126      	bne.n	8006880 <_dtoa_r+0x5e8>
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <_dtoa_r+0x60c>)
 8006834:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006838:	f7f9 fd48 	bl	80002cc <__adddf3>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006844:	f7fa f988 	bl	8000b58 <__aeabi_dcmpgt>
 8006848:	2800      	cmp	r0, #0
 800684a:	d174      	bne.n	8006936 <_dtoa_r+0x69e>
 800684c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006850:	2000      	movs	r0, #0
 8006852:	4914      	ldr	r1, [pc, #80]	; (80068a4 <_dtoa_r+0x60c>)
 8006854:	f7f9 fd38 	bl	80002c8 <__aeabi_dsub>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006860:	f7fa f95c 	bl	8000b1c <__aeabi_dcmplt>
 8006864:	2800      	cmp	r0, #0
 8006866:	f43f af30 	beq.w	80066ca <_dtoa_r+0x432>
 800686a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800686e:	2b30      	cmp	r3, #48	; 0x30
 8006870:	f105 32ff 	add.w	r2, r5, #4294967295
 8006874:	d002      	beq.n	800687c <_dtoa_r+0x5e4>
 8006876:	f8dd a020 	ldr.w	sl, [sp, #32]
 800687a:	e04a      	b.n	8006912 <_dtoa_r+0x67a>
 800687c:	4615      	mov	r5, r2
 800687e:	e7f4      	b.n	800686a <_dtoa_r+0x5d2>
 8006880:	4b05      	ldr	r3, [pc, #20]	; (8006898 <_dtoa_r+0x600>)
 8006882:	f7f9 fed9 	bl	8000638 <__aeabi_dmul>
 8006886:	e9cd 0100 	strd	r0, r1, [sp]
 800688a:	e7bc      	b.n	8006806 <_dtoa_r+0x56e>
 800688c:	080085a0 	.word	0x080085a0
 8006890:	08008578 	.word	0x08008578
 8006894:	3ff00000 	.word	0x3ff00000
 8006898:	40240000 	.word	0x40240000
 800689c:	401c0000 	.word	0x401c0000
 80068a0:	40140000 	.word	0x40140000
 80068a4:	3fe00000 	.word	0x3fe00000
 80068a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80068ac:	465d      	mov	r5, fp
 80068ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068b2:	4630      	mov	r0, r6
 80068b4:	4639      	mov	r1, r7
 80068b6:	f7f9 ffe9 	bl	800088c <__aeabi_ddiv>
 80068ba:	f7fa f96d 	bl	8000b98 <__aeabi_d2iz>
 80068be:	4680      	mov	r8, r0
 80068c0:	f7f9 fe50 	bl	8000564 <__aeabi_i2d>
 80068c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068c8:	f7f9 feb6 	bl	8000638 <__aeabi_dmul>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4630      	mov	r0, r6
 80068d2:	4639      	mov	r1, r7
 80068d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80068d8:	f7f9 fcf6 	bl	80002c8 <__aeabi_dsub>
 80068dc:	f805 6b01 	strb.w	r6, [r5], #1
 80068e0:	eba5 060b 	sub.w	r6, r5, fp
 80068e4:	45b1      	cmp	r9, r6
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	d139      	bne.n	8006960 <_dtoa_r+0x6c8>
 80068ec:	f7f9 fcee 	bl	80002cc <__adddf3>
 80068f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068f4:	4606      	mov	r6, r0
 80068f6:	460f      	mov	r7, r1
 80068f8:	f7fa f92e 	bl	8000b58 <__aeabi_dcmpgt>
 80068fc:	b9c8      	cbnz	r0, 8006932 <_dtoa_r+0x69a>
 80068fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006902:	4630      	mov	r0, r6
 8006904:	4639      	mov	r1, r7
 8006906:	f7fa f8ff 	bl	8000b08 <__aeabi_dcmpeq>
 800690a:	b110      	cbz	r0, 8006912 <_dtoa_r+0x67a>
 800690c:	f018 0f01 	tst.w	r8, #1
 8006910:	d10f      	bne.n	8006932 <_dtoa_r+0x69a>
 8006912:	9904      	ldr	r1, [sp, #16]
 8006914:	4620      	mov	r0, r4
 8006916:	f000 fcaa 	bl	800726e <_Bfree>
 800691a:	2300      	movs	r3, #0
 800691c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800691e:	702b      	strb	r3, [r5, #0]
 8006920:	f10a 0301 	add.w	r3, sl, #1
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8241 	beq.w	8006db0 <_dtoa_r+0xb18>
 800692e:	601d      	str	r5, [r3, #0]
 8006930:	e23e      	b.n	8006db0 <_dtoa_r+0xb18>
 8006932:	f8cd a020 	str.w	sl, [sp, #32]
 8006936:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800693a:	2a39      	cmp	r2, #57	; 0x39
 800693c:	f105 33ff 	add.w	r3, r5, #4294967295
 8006940:	d108      	bne.n	8006954 <_dtoa_r+0x6bc>
 8006942:	459b      	cmp	fp, r3
 8006944:	d10a      	bne.n	800695c <_dtoa_r+0x6c4>
 8006946:	9b08      	ldr	r3, [sp, #32]
 8006948:	3301      	adds	r3, #1
 800694a:	9308      	str	r3, [sp, #32]
 800694c:	2330      	movs	r3, #48	; 0x30
 800694e:	f88b 3000 	strb.w	r3, [fp]
 8006952:	465b      	mov	r3, fp
 8006954:	781a      	ldrb	r2, [r3, #0]
 8006956:	3201      	adds	r2, #1
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	e78c      	b.n	8006876 <_dtoa_r+0x5de>
 800695c:	461d      	mov	r5, r3
 800695e:	e7ea      	b.n	8006936 <_dtoa_r+0x69e>
 8006960:	2200      	movs	r2, #0
 8006962:	4b9b      	ldr	r3, [pc, #620]	; (8006bd0 <_dtoa_r+0x938>)
 8006964:	f7f9 fe68 	bl	8000638 <__aeabi_dmul>
 8006968:	2200      	movs	r2, #0
 800696a:	2300      	movs	r3, #0
 800696c:	4606      	mov	r6, r0
 800696e:	460f      	mov	r7, r1
 8006970:	f7fa f8ca 	bl	8000b08 <__aeabi_dcmpeq>
 8006974:	2800      	cmp	r0, #0
 8006976:	d09a      	beq.n	80068ae <_dtoa_r+0x616>
 8006978:	e7cb      	b.n	8006912 <_dtoa_r+0x67a>
 800697a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800697c:	2a00      	cmp	r2, #0
 800697e:	f000 808b 	beq.w	8006a98 <_dtoa_r+0x800>
 8006982:	9a06      	ldr	r2, [sp, #24]
 8006984:	2a01      	cmp	r2, #1
 8006986:	dc6e      	bgt.n	8006a66 <_dtoa_r+0x7ce>
 8006988:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800698a:	2a00      	cmp	r2, #0
 800698c:	d067      	beq.n	8006a5e <_dtoa_r+0x7c6>
 800698e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006992:	9f07      	ldr	r7, [sp, #28]
 8006994:	9d05      	ldr	r5, [sp, #20]
 8006996:	9a05      	ldr	r2, [sp, #20]
 8006998:	2101      	movs	r1, #1
 800699a:	441a      	add	r2, r3
 800699c:	4620      	mov	r0, r4
 800699e:	9205      	str	r2, [sp, #20]
 80069a0:	4498      	add	r8, r3
 80069a2:	f000 fd04 	bl	80073ae <__i2b>
 80069a6:	4606      	mov	r6, r0
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	dd0c      	ble.n	80069c6 <_dtoa_r+0x72e>
 80069ac:	f1b8 0f00 	cmp.w	r8, #0
 80069b0:	dd09      	ble.n	80069c6 <_dtoa_r+0x72e>
 80069b2:	4545      	cmp	r5, r8
 80069b4:	9a05      	ldr	r2, [sp, #20]
 80069b6:	462b      	mov	r3, r5
 80069b8:	bfa8      	it	ge
 80069ba:	4643      	movge	r3, r8
 80069bc:	1ad2      	subs	r2, r2, r3
 80069be:	9205      	str	r2, [sp, #20]
 80069c0:	1aed      	subs	r5, r5, r3
 80069c2:	eba8 0803 	sub.w	r8, r8, r3
 80069c6:	9b07      	ldr	r3, [sp, #28]
 80069c8:	b1eb      	cbz	r3, 8006a06 <_dtoa_r+0x76e>
 80069ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d067      	beq.n	8006aa0 <_dtoa_r+0x808>
 80069d0:	b18f      	cbz	r7, 80069f6 <_dtoa_r+0x75e>
 80069d2:	4631      	mov	r1, r6
 80069d4:	463a      	mov	r2, r7
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 fd88 	bl	80074ec <__pow5mult>
 80069dc:	9a04      	ldr	r2, [sp, #16]
 80069de:	4601      	mov	r1, r0
 80069e0:	4606      	mov	r6, r0
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 fcec 	bl	80073c0 <__multiply>
 80069e8:	9904      	ldr	r1, [sp, #16]
 80069ea:	9008      	str	r0, [sp, #32]
 80069ec:	4620      	mov	r0, r4
 80069ee:	f000 fc3e 	bl	800726e <_Bfree>
 80069f2:	9b08      	ldr	r3, [sp, #32]
 80069f4:	9304      	str	r3, [sp, #16]
 80069f6:	9b07      	ldr	r3, [sp, #28]
 80069f8:	1bda      	subs	r2, r3, r7
 80069fa:	d004      	beq.n	8006a06 <_dtoa_r+0x76e>
 80069fc:	9904      	ldr	r1, [sp, #16]
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 fd74 	bl	80074ec <__pow5mult>
 8006a04:	9004      	str	r0, [sp, #16]
 8006a06:	2101      	movs	r1, #1
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 fcd0 	bl	80073ae <__i2b>
 8006a0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a10:	4607      	mov	r7, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 81d0 	beq.w	8006db8 <_dtoa_r+0xb20>
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4601      	mov	r1, r0
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f000 fd65 	bl	80074ec <__pow5mult>
 8006a22:	9b06      	ldr	r3, [sp, #24]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	4607      	mov	r7, r0
 8006a28:	dc40      	bgt.n	8006aac <_dtoa_r+0x814>
 8006a2a:	9b00      	ldr	r3, [sp, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d139      	bne.n	8006aa4 <_dtoa_r+0x80c>
 8006a30:	9b01      	ldr	r3, [sp, #4]
 8006a32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d136      	bne.n	8006aa8 <_dtoa_r+0x810>
 8006a3a:	9b01      	ldr	r3, [sp, #4]
 8006a3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a40:	0d1b      	lsrs	r3, r3, #20
 8006a42:	051b      	lsls	r3, r3, #20
 8006a44:	b12b      	cbz	r3, 8006a52 <_dtoa_r+0x7ba>
 8006a46:	9b05      	ldr	r3, [sp, #20]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	9305      	str	r3, [sp, #20]
 8006a4c:	f108 0801 	add.w	r8, r8, #1
 8006a50:	2301      	movs	r3, #1
 8006a52:	9307      	str	r3, [sp, #28]
 8006a54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d12a      	bne.n	8006ab0 <_dtoa_r+0x818>
 8006a5a:	2001      	movs	r0, #1
 8006a5c:	e030      	b.n	8006ac0 <_dtoa_r+0x828>
 8006a5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a64:	e795      	b.n	8006992 <_dtoa_r+0x6fa>
 8006a66:	9b07      	ldr	r3, [sp, #28]
 8006a68:	f109 37ff 	add.w	r7, r9, #4294967295
 8006a6c:	42bb      	cmp	r3, r7
 8006a6e:	bfbf      	itttt	lt
 8006a70:	9b07      	ldrlt	r3, [sp, #28]
 8006a72:	9707      	strlt	r7, [sp, #28]
 8006a74:	1afa      	sublt	r2, r7, r3
 8006a76:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006a78:	bfbb      	ittet	lt
 8006a7a:	189b      	addlt	r3, r3, r2
 8006a7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006a7e:	1bdf      	subge	r7, r3, r7
 8006a80:	2700      	movlt	r7, #0
 8006a82:	f1b9 0f00 	cmp.w	r9, #0
 8006a86:	bfb5      	itete	lt
 8006a88:	9b05      	ldrlt	r3, [sp, #20]
 8006a8a:	9d05      	ldrge	r5, [sp, #20]
 8006a8c:	eba3 0509 	sublt.w	r5, r3, r9
 8006a90:	464b      	movge	r3, r9
 8006a92:	bfb8      	it	lt
 8006a94:	2300      	movlt	r3, #0
 8006a96:	e77e      	b.n	8006996 <_dtoa_r+0x6fe>
 8006a98:	9f07      	ldr	r7, [sp, #28]
 8006a9a:	9d05      	ldr	r5, [sp, #20]
 8006a9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006a9e:	e783      	b.n	80069a8 <_dtoa_r+0x710>
 8006aa0:	9a07      	ldr	r2, [sp, #28]
 8006aa2:	e7ab      	b.n	80069fc <_dtoa_r+0x764>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	e7d4      	b.n	8006a52 <_dtoa_r+0x7ba>
 8006aa8:	9b00      	ldr	r3, [sp, #0]
 8006aaa:	e7d2      	b.n	8006a52 <_dtoa_r+0x7ba>
 8006aac:	2300      	movs	r3, #0
 8006aae:	9307      	str	r3, [sp, #28]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006ab6:	6918      	ldr	r0, [r3, #16]
 8006ab8:	f000 fc2b 	bl	8007312 <__hi0bits>
 8006abc:	f1c0 0020 	rsb	r0, r0, #32
 8006ac0:	4440      	add	r0, r8
 8006ac2:	f010 001f 	ands.w	r0, r0, #31
 8006ac6:	d047      	beq.n	8006b58 <_dtoa_r+0x8c0>
 8006ac8:	f1c0 0320 	rsb	r3, r0, #32
 8006acc:	2b04      	cmp	r3, #4
 8006ace:	dd3b      	ble.n	8006b48 <_dtoa_r+0x8b0>
 8006ad0:	9b05      	ldr	r3, [sp, #20]
 8006ad2:	f1c0 001c 	rsb	r0, r0, #28
 8006ad6:	4403      	add	r3, r0
 8006ad8:	9305      	str	r3, [sp, #20]
 8006ada:	4405      	add	r5, r0
 8006adc:	4480      	add	r8, r0
 8006ade:	9b05      	ldr	r3, [sp, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	dd05      	ble.n	8006af0 <_dtoa_r+0x858>
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	9904      	ldr	r1, [sp, #16]
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 fd4d 	bl	8007588 <__lshift>
 8006aee:	9004      	str	r0, [sp, #16]
 8006af0:	f1b8 0f00 	cmp.w	r8, #0
 8006af4:	dd05      	ble.n	8006b02 <_dtoa_r+0x86a>
 8006af6:	4639      	mov	r1, r7
 8006af8:	4642      	mov	r2, r8
 8006afa:	4620      	mov	r0, r4
 8006afc:	f000 fd44 	bl	8007588 <__lshift>
 8006b00:	4607      	mov	r7, r0
 8006b02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b04:	b353      	cbz	r3, 8006b5c <_dtoa_r+0x8c4>
 8006b06:	4639      	mov	r1, r7
 8006b08:	9804      	ldr	r0, [sp, #16]
 8006b0a:	f000 fd91 	bl	8007630 <__mcmp>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	da24      	bge.n	8006b5c <_dtoa_r+0x8c4>
 8006b12:	2300      	movs	r3, #0
 8006b14:	220a      	movs	r2, #10
 8006b16:	9904      	ldr	r1, [sp, #16]
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 fbbf 	bl	800729c <__multadd>
 8006b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b20:	9004      	str	r0, [sp, #16]
 8006b22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 814d 	beq.w	8006dc6 <_dtoa_r+0xb2e>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	4631      	mov	r1, r6
 8006b30:	220a      	movs	r2, #10
 8006b32:	4620      	mov	r0, r4
 8006b34:	f000 fbb2 	bl	800729c <__multadd>
 8006b38:	9b02      	ldr	r3, [sp, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	dc4f      	bgt.n	8006be0 <_dtoa_r+0x948>
 8006b40:	9b06      	ldr	r3, [sp, #24]
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	dd4c      	ble.n	8006be0 <_dtoa_r+0x948>
 8006b46:	e011      	b.n	8006b6c <_dtoa_r+0x8d4>
 8006b48:	d0c9      	beq.n	8006ade <_dtoa_r+0x846>
 8006b4a:	9a05      	ldr	r2, [sp, #20]
 8006b4c:	331c      	adds	r3, #28
 8006b4e:	441a      	add	r2, r3
 8006b50:	9205      	str	r2, [sp, #20]
 8006b52:	441d      	add	r5, r3
 8006b54:	4498      	add	r8, r3
 8006b56:	e7c2      	b.n	8006ade <_dtoa_r+0x846>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	e7f6      	b.n	8006b4a <_dtoa_r+0x8b2>
 8006b5c:	f1b9 0f00 	cmp.w	r9, #0
 8006b60:	dc38      	bgt.n	8006bd4 <_dtoa_r+0x93c>
 8006b62:	9b06      	ldr	r3, [sp, #24]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	dd35      	ble.n	8006bd4 <_dtoa_r+0x93c>
 8006b68:	f8cd 9008 	str.w	r9, [sp, #8]
 8006b6c:	9b02      	ldr	r3, [sp, #8]
 8006b6e:	b963      	cbnz	r3, 8006b8a <_dtoa_r+0x8f2>
 8006b70:	4639      	mov	r1, r7
 8006b72:	2205      	movs	r2, #5
 8006b74:	4620      	mov	r0, r4
 8006b76:	f000 fb91 	bl	800729c <__multadd>
 8006b7a:	4601      	mov	r1, r0
 8006b7c:	4607      	mov	r7, r0
 8006b7e:	9804      	ldr	r0, [sp, #16]
 8006b80:	f000 fd56 	bl	8007630 <__mcmp>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	f73f adcc 	bgt.w	8006722 <_dtoa_r+0x48a>
 8006b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b8c:	465d      	mov	r5, fp
 8006b8e:	ea6f 0a03 	mvn.w	sl, r3
 8006b92:	f04f 0900 	mov.w	r9, #0
 8006b96:	4639      	mov	r1, r7
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fb68 	bl	800726e <_Bfree>
 8006b9e:	2e00      	cmp	r6, #0
 8006ba0:	f43f aeb7 	beq.w	8006912 <_dtoa_r+0x67a>
 8006ba4:	f1b9 0f00 	cmp.w	r9, #0
 8006ba8:	d005      	beq.n	8006bb6 <_dtoa_r+0x91e>
 8006baa:	45b1      	cmp	r9, r6
 8006bac:	d003      	beq.n	8006bb6 <_dtoa_r+0x91e>
 8006bae:	4649      	mov	r1, r9
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f000 fb5c 	bl	800726e <_Bfree>
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 fb58 	bl	800726e <_Bfree>
 8006bbe:	e6a8      	b.n	8006912 <_dtoa_r+0x67a>
 8006bc0:	2700      	movs	r7, #0
 8006bc2:	463e      	mov	r6, r7
 8006bc4:	e7e1      	b.n	8006b8a <_dtoa_r+0x8f2>
 8006bc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006bca:	463e      	mov	r6, r7
 8006bcc:	e5a9      	b.n	8006722 <_dtoa_r+0x48a>
 8006bce:	bf00      	nop
 8006bd0:	40240000 	.word	0x40240000
 8006bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 80fa 	beq.w	8006dd4 <_dtoa_r+0xb3c>
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	dd05      	ble.n	8006bf0 <_dtoa_r+0x958>
 8006be4:	4631      	mov	r1, r6
 8006be6:	462a      	mov	r2, r5
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fccd 	bl	8007588 <__lshift>
 8006bee:	4606      	mov	r6, r0
 8006bf0:	9b07      	ldr	r3, [sp, #28]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d04c      	beq.n	8006c90 <_dtoa_r+0x9f8>
 8006bf6:	6871      	ldr	r1, [r6, #4]
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f000 fb04 	bl	8007206 <_Balloc>
 8006bfe:	6932      	ldr	r2, [r6, #16]
 8006c00:	3202      	adds	r2, #2
 8006c02:	4605      	mov	r5, r0
 8006c04:	0092      	lsls	r2, r2, #2
 8006c06:	f106 010c 	add.w	r1, r6, #12
 8006c0a:	300c      	adds	r0, #12
 8006c0c:	f000 faf0 	bl	80071f0 <memcpy>
 8006c10:	2201      	movs	r2, #1
 8006c12:	4629      	mov	r1, r5
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 fcb7 	bl	8007588 <__lshift>
 8006c1a:	9b00      	ldr	r3, [sp, #0]
 8006c1c:	f8cd b014 	str.w	fp, [sp, #20]
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	46b1      	mov	r9, r6
 8006c26:	9307      	str	r3, [sp, #28]
 8006c28:	4606      	mov	r6, r0
 8006c2a:	4639      	mov	r1, r7
 8006c2c:	9804      	ldr	r0, [sp, #16]
 8006c2e:	f7ff faa7 	bl	8006180 <quorem>
 8006c32:	4649      	mov	r1, r9
 8006c34:	4605      	mov	r5, r0
 8006c36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006c3a:	9804      	ldr	r0, [sp, #16]
 8006c3c:	f000 fcf8 	bl	8007630 <__mcmp>
 8006c40:	4632      	mov	r2, r6
 8006c42:	9000      	str	r0, [sp, #0]
 8006c44:	4639      	mov	r1, r7
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 fd0c 	bl	8007664 <__mdiff>
 8006c4c:	68c3      	ldr	r3, [r0, #12]
 8006c4e:	4602      	mov	r2, r0
 8006c50:	bb03      	cbnz	r3, 8006c94 <_dtoa_r+0x9fc>
 8006c52:	4601      	mov	r1, r0
 8006c54:	9008      	str	r0, [sp, #32]
 8006c56:	9804      	ldr	r0, [sp, #16]
 8006c58:	f000 fcea 	bl	8007630 <__mcmp>
 8006c5c:	9a08      	ldr	r2, [sp, #32]
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4611      	mov	r1, r2
 8006c62:	4620      	mov	r0, r4
 8006c64:	9308      	str	r3, [sp, #32]
 8006c66:	f000 fb02 	bl	800726e <_Bfree>
 8006c6a:	9b08      	ldr	r3, [sp, #32]
 8006c6c:	b9a3      	cbnz	r3, 8006c98 <_dtoa_r+0xa00>
 8006c6e:	9a06      	ldr	r2, [sp, #24]
 8006c70:	b992      	cbnz	r2, 8006c98 <_dtoa_r+0xa00>
 8006c72:	9a07      	ldr	r2, [sp, #28]
 8006c74:	b982      	cbnz	r2, 8006c98 <_dtoa_r+0xa00>
 8006c76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c7a:	d029      	beq.n	8006cd0 <_dtoa_r+0xa38>
 8006c7c:	9b00      	ldr	r3, [sp, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	dd01      	ble.n	8006c86 <_dtoa_r+0x9ee>
 8006c82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006c86:	9b05      	ldr	r3, [sp, #20]
 8006c88:	1c5d      	adds	r5, r3, #1
 8006c8a:	f883 8000 	strb.w	r8, [r3]
 8006c8e:	e782      	b.n	8006b96 <_dtoa_r+0x8fe>
 8006c90:	4630      	mov	r0, r6
 8006c92:	e7c2      	b.n	8006c1a <_dtoa_r+0x982>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e7e3      	b.n	8006c60 <_dtoa_r+0x9c8>
 8006c98:	9a00      	ldr	r2, [sp, #0]
 8006c9a:	2a00      	cmp	r2, #0
 8006c9c:	db04      	blt.n	8006ca8 <_dtoa_r+0xa10>
 8006c9e:	d125      	bne.n	8006cec <_dtoa_r+0xa54>
 8006ca0:	9a06      	ldr	r2, [sp, #24]
 8006ca2:	bb1a      	cbnz	r2, 8006cec <_dtoa_r+0xa54>
 8006ca4:	9a07      	ldr	r2, [sp, #28]
 8006ca6:	bb0a      	cbnz	r2, 8006cec <_dtoa_r+0xa54>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	ddec      	ble.n	8006c86 <_dtoa_r+0x9ee>
 8006cac:	2201      	movs	r2, #1
 8006cae:	9904      	ldr	r1, [sp, #16]
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f000 fc69 	bl	8007588 <__lshift>
 8006cb6:	4639      	mov	r1, r7
 8006cb8:	9004      	str	r0, [sp, #16]
 8006cba:	f000 fcb9 	bl	8007630 <__mcmp>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	dc03      	bgt.n	8006cca <_dtoa_r+0xa32>
 8006cc2:	d1e0      	bne.n	8006c86 <_dtoa_r+0x9ee>
 8006cc4:	f018 0f01 	tst.w	r8, #1
 8006cc8:	d0dd      	beq.n	8006c86 <_dtoa_r+0x9ee>
 8006cca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006cce:	d1d8      	bne.n	8006c82 <_dtoa_r+0x9ea>
 8006cd0:	9b05      	ldr	r3, [sp, #20]
 8006cd2:	9a05      	ldr	r2, [sp, #20]
 8006cd4:	1c5d      	adds	r5, r3, #1
 8006cd6:	2339      	movs	r3, #57	; 0x39
 8006cd8:	7013      	strb	r3, [r2, #0]
 8006cda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006cde:	2b39      	cmp	r3, #57	; 0x39
 8006ce0:	f105 32ff 	add.w	r2, r5, #4294967295
 8006ce4:	d04f      	beq.n	8006d86 <_dtoa_r+0xaee>
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	7013      	strb	r3, [r2, #0]
 8006cea:	e754      	b.n	8006b96 <_dtoa_r+0x8fe>
 8006cec:	9a05      	ldr	r2, [sp, #20]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f102 0501 	add.w	r5, r2, #1
 8006cf4:	dd06      	ble.n	8006d04 <_dtoa_r+0xa6c>
 8006cf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006cfa:	d0e9      	beq.n	8006cd0 <_dtoa_r+0xa38>
 8006cfc:	f108 0801 	add.w	r8, r8, #1
 8006d00:	9b05      	ldr	r3, [sp, #20]
 8006d02:	e7c2      	b.n	8006c8a <_dtoa_r+0x9f2>
 8006d04:	9a02      	ldr	r2, [sp, #8]
 8006d06:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006d0a:	eba5 030b 	sub.w	r3, r5, fp
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d021      	beq.n	8006d56 <_dtoa_r+0xabe>
 8006d12:	2300      	movs	r3, #0
 8006d14:	220a      	movs	r2, #10
 8006d16:	9904      	ldr	r1, [sp, #16]
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 fabf 	bl	800729c <__multadd>
 8006d1e:	45b1      	cmp	r9, r6
 8006d20:	9004      	str	r0, [sp, #16]
 8006d22:	f04f 0300 	mov.w	r3, #0
 8006d26:	f04f 020a 	mov.w	r2, #10
 8006d2a:	4649      	mov	r1, r9
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	d105      	bne.n	8006d3c <_dtoa_r+0xaa4>
 8006d30:	f000 fab4 	bl	800729c <__multadd>
 8006d34:	4681      	mov	r9, r0
 8006d36:	4606      	mov	r6, r0
 8006d38:	9505      	str	r5, [sp, #20]
 8006d3a:	e776      	b.n	8006c2a <_dtoa_r+0x992>
 8006d3c:	f000 faae 	bl	800729c <__multadd>
 8006d40:	4631      	mov	r1, r6
 8006d42:	4681      	mov	r9, r0
 8006d44:	2300      	movs	r3, #0
 8006d46:	220a      	movs	r2, #10
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 faa7 	bl	800729c <__multadd>
 8006d4e:	4606      	mov	r6, r0
 8006d50:	e7f2      	b.n	8006d38 <_dtoa_r+0xaa0>
 8006d52:	f04f 0900 	mov.w	r9, #0
 8006d56:	2201      	movs	r2, #1
 8006d58:	9904      	ldr	r1, [sp, #16]
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f000 fc14 	bl	8007588 <__lshift>
 8006d60:	4639      	mov	r1, r7
 8006d62:	9004      	str	r0, [sp, #16]
 8006d64:	f000 fc64 	bl	8007630 <__mcmp>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	dcb6      	bgt.n	8006cda <_dtoa_r+0xa42>
 8006d6c:	d102      	bne.n	8006d74 <_dtoa_r+0xadc>
 8006d6e:	f018 0f01 	tst.w	r8, #1
 8006d72:	d1b2      	bne.n	8006cda <_dtoa_r+0xa42>
 8006d74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d78:	2b30      	cmp	r3, #48	; 0x30
 8006d7a:	f105 32ff 	add.w	r2, r5, #4294967295
 8006d7e:	f47f af0a 	bne.w	8006b96 <_dtoa_r+0x8fe>
 8006d82:	4615      	mov	r5, r2
 8006d84:	e7f6      	b.n	8006d74 <_dtoa_r+0xadc>
 8006d86:	4593      	cmp	fp, r2
 8006d88:	d105      	bne.n	8006d96 <_dtoa_r+0xafe>
 8006d8a:	2331      	movs	r3, #49	; 0x31
 8006d8c:	f10a 0a01 	add.w	sl, sl, #1
 8006d90:	f88b 3000 	strb.w	r3, [fp]
 8006d94:	e6ff      	b.n	8006b96 <_dtoa_r+0x8fe>
 8006d96:	4615      	mov	r5, r2
 8006d98:	e79f      	b.n	8006cda <_dtoa_r+0xa42>
 8006d9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006e00 <_dtoa_r+0xb68>
 8006d9e:	e007      	b.n	8006db0 <_dtoa_r+0xb18>
 8006da0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006da2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006e04 <_dtoa_r+0xb6c>
 8006da6:	b11b      	cbz	r3, 8006db0 <_dtoa_r+0xb18>
 8006da8:	f10b 0308 	add.w	r3, fp, #8
 8006dac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	4658      	mov	r0, fp
 8006db2:	b017      	add	sp, #92	; 0x5c
 8006db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db8:	9b06      	ldr	r3, [sp, #24]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	f77f ae35 	ble.w	8006a2a <_dtoa_r+0x792>
 8006dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dc2:	9307      	str	r3, [sp, #28]
 8006dc4:	e649      	b.n	8006a5a <_dtoa_r+0x7c2>
 8006dc6:	9b02      	ldr	r3, [sp, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	dc03      	bgt.n	8006dd4 <_dtoa_r+0xb3c>
 8006dcc:	9b06      	ldr	r3, [sp, #24]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	f73f aecc 	bgt.w	8006b6c <_dtoa_r+0x8d4>
 8006dd4:	465d      	mov	r5, fp
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	9804      	ldr	r0, [sp, #16]
 8006dda:	f7ff f9d1 	bl	8006180 <quorem>
 8006dde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006de2:	f805 8b01 	strb.w	r8, [r5], #1
 8006de6:	9a02      	ldr	r2, [sp, #8]
 8006de8:	eba5 030b 	sub.w	r3, r5, fp
 8006dec:	429a      	cmp	r2, r3
 8006dee:	ddb0      	ble.n	8006d52 <_dtoa_r+0xaba>
 8006df0:	2300      	movs	r3, #0
 8006df2:	220a      	movs	r2, #10
 8006df4:	9904      	ldr	r1, [sp, #16]
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 fa50 	bl	800729c <__multadd>
 8006dfc:	9004      	str	r0, [sp, #16]
 8006dfe:	e7ea      	b.n	8006dd6 <_dtoa_r+0xb3e>
 8006e00:	080084e0 	.word	0x080084e0
 8006e04:	08008504 	.word	0x08008504

08006e08 <__sflush_r>:
 8006e08:	898a      	ldrh	r2, [r1, #12]
 8006e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0e:	4605      	mov	r5, r0
 8006e10:	0710      	lsls	r0, r2, #28
 8006e12:	460c      	mov	r4, r1
 8006e14:	d458      	bmi.n	8006ec8 <__sflush_r+0xc0>
 8006e16:	684b      	ldr	r3, [r1, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	dc05      	bgt.n	8006e28 <__sflush_r+0x20>
 8006e1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	dc02      	bgt.n	8006e28 <__sflush_r+0x20>
 8006e22:	2000      	movs	r0, #0
 8006e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e2a:	2e00      	cmp	r6, #0
 8006e2c:	d0f9      	beq.n	8006e22 <__sflush_r+0x1a>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e34:	682f      	ldr	r7, [r5, #0]
 8006e36:	6a21      	ldr	r1, [r4, #32]
 8006e38:	602b      	str	r3, [r5, #0]
 8006e3a:	d032      	beq.n	8006ea2 <__sflush_r+0x9a>
 8006e3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e3e:	89a3      	ldrh	r3, [r4, #12]
 8006e40:	075a      	lsls	r2, r3, #29
 8006e42:	d505      	bpl.n	8006e50 <__sflush_r+0x48>
 8006e44:	6863      	ldr	r3, [r4, #4]
 8006e46:	1ac0      	subs	r0, r0, r3
 8006e48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e4a:	b10b      	cbz	r3, 8006e50 <__sflush_r+0x48>
 8006e4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e4e:	1ac0      	subs	r0, r0, r3
 8006e50:	2300      	movs	r3, #0
 8006e52:	4602      	mov	r2, r0
 8006e54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e56:	6a21      	ldr	r1, [r4, #32]
 8006e58:	4628      	mov	r0, r5
 8006e5a:	47b0      	blx	r6
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	d106      	bne.n	8006e70 <__sflush_r+0x68>
 8006e62:	6829      	ldr	r1, [r5, #0]
 8006e64:	291d      	cmp	r1, #29
 8006e66:	d848      	bhi.n	8006efa <__sflush_r+0xf2>
 8006e68:	4a29      	ldr	r2, [pc, #164]	; (8006f10 <__sflush_r+0x108>)
 8006e6a:	40ca      	lsrs	r2, r1
 8006e6c:	07d6      	lsls	r6, r2, #31
 8006e6e:	d544      	bpl.n	8006efa <__sflush_r+0xf2>
 8006e70:	2200      	movs	r2, #0
 8006e72:	6062      	str	r2, [r4, #4]
 8006e74:	04d9      	lsls	r1, r3, #19
 8006e76:	6922      	ldr	r2, [r4, #16]
 8006e78:	6022      	str	r2, [r4, #0]
 8006e7a:	d504      	bpl.n	8006e86 <__sflush_r+0x7e>
 8006e7c:	1c42      	adds	r2, r0, #1
 8006e7e:	d101      	bne.n	8006e84 <__sflush_r+0x7c>
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	b903      	cbnz	r3, 8006e86 <__sflush_r+0x7e>
 8006e84:	6560      	str	r0, [r4, #84]	; 0x54
 8006e86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e88:	602f      	str	r7, [r5, #0]
 8006e8a:	2900      	cmp	r1, #0
 8006e8c:	d0c9      	beq.n	8006e22 <__sflush_r+0x1a>
 8006e8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e92:	4299      	cmp	r1, r3
 8006e94:	d002      	beq.n	8006e9c <__sflush_r+0x94>
 8006e96:	4628      	mov	r0, r5
 8006e98:	f000 fc9e 	bl	80077d8 <_free_r>
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	6360      	str	r0, [r4, #52]	; 0x34
 8006ea0:	e7c0      	b.n	8006e24 <__sflush_r+0x1c>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b0      	blx	r6
 8006ea8:	1c41      	adds	r1, r0, #1
 8006eaa:	d1c8      	bne.n	8006e3e <__sflush_r+0x36>
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0c5      	beq.n	8006e3e <__sflush_r+0x36>
 8006eb2:	2b1d      	cmp	r3, #29
 8006eb4:	d001      	beq.n	8006eba <__sflush_r+0xb2>
 8006eb6:	2b16      	cmp	r3, #22
 8006eb8:	d101      	bne.n	8006ebe <__sflush_r+0xb6>
 8006eba:	602f      	str	r7, [r5, #0]
 8006ebc:	e7b1      	b.n	8006e22 <__sflush_r+0x1a>
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec4:	81a3      	strh	r3, [r4, #12]
 8006ec6:	e7ad      	b.n	8006e24 <__sflush_r+0x1c>
 8006ec8:	690f      	ldr	r7, [r1, #16]
 8006eca:	2f00      	cmp	r7, #0
 8006ecc:	d0a9      	beq.n	8006e22 <__sflush_r+0x1a>
 8006ece:	0793      	lsls	r3, r2, #30
 8006ed0:	680e      	ldr	r6, [r1, #0]
 8006ed2:	bf08      	it	eq
 8006ed4:	694b      	ldreq	r3, [r1, #20]
 8006ed6:	600f      	str	r7, [r1, #0]
 8006ed8:	bf18      	it	ne
 8006eda:	2300      	movne	r3, #0
 8006edc:	eba6 0807 	sub.w	r8, r6, r7
 8006ee0:	608b      	str	r3, [r1, #8]
 8006ee2:	f1b8 0f00 	cmp.w	r8, #0
 8006ee6:	dd9c      	ble.n	8006e22 <__sflush_r+0x1a>
 8006ee8:	4643      	mov	r3, r8
 8006eea:	463a      	mov	r2, r7
 8006eec:	6a21      	ldr	r1, [r4, #32]
 8006eee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b0      	blx	r6
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	dc06      	bgt.n	8006f06 <__sflush_r+0xfe>
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	f04f 30ff 	mov.w	r0, #4294967295
 8006f04:	e78e      	b.n	8006e24 <__sflush_r+0x1c>
 8006f06:	4407      	add	r7, r0
 8006f08:	eba8 0800 	sub.w	r8, r8, r0
 8006f0c:	e7e9      	b.n	8006ee2 <__sflush_r+0xda>
 8006f0e:	bf00      	nop
 8006f10:	20400001 	.word	0x20400001

08006f14 <_fflush_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	690b      	ldr	r3, [r1, #16]
 8006f18:	4605      	mov	r5, r0
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	b1db      	cbz	r3, 8006f56 <_fflush_r+0x42>
 8006f1e:	b118      	cbz	r0, 8006f28 <_fflush_r+0x14>
 8006f20:	6983      	ldr	r3, [r0, #24]
 8006f22:	b90b      	cbnz	r3, 8006f28 <_fflush_r+0x14>
 8006f24:	f000 f860 	bl	8006fe8 <__sinit>
 8006f28:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <_fflush_r+0x48>)
 8006f2a:	429c      	cmp	r4, r3
 8006f2c:	d109      	bne.n	8006f42 <_fflush_r+0x2e>
 8006f2e:	686c      	ldr	r4, [r5, #4]
 8006f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f34:	b17b      	cbz	r3, 8006f56 <_fflush_r+0x42>
 8006f36:	4621      	mov	r1, r4
 8006f38:	4628      	mov	r0, r5
 8006f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f3e:	f7ff bf63 	b.w	8006e08 <__sflush_r>
 8006f42:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <_fflush_r+0x4c>)
 8006f44:	429c      	cmp	r4, r3
 8006f46:	d101      	bne.n	8006f4c <_fflush_r+0x38>
 8006f48:	68ac      	ldr	r4, [r5, #8]
 8006f4a:	e7f1      	b.n	8006f30 <_fflush_r+0x1c>
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <_fflush_r+0x50>)
 8006f4e:	429c      	cmp	r4, r3
 8006f50:	bf08      	it	eq
 8006f52:	68ec      	ldreq	r4, [r5, #12]
 8006f54:	e7ec      	b.n	8006f30 <_fflush_r+0x1c>
 8006f56:	2000      	movs	r0, #0
 8006f58:	bd38      	pop	{r3, r4, r5, pc}
 8006f5a:	bf00      	nop
 8006f5c:	08008534 	.word	0x08008534
 8006f60:	08008554 	.word	0x08008554
 8006f64:	08008514 	.word	0x08008514

08006f68 <std>:
 8006f68:	2300      	movs	r3, #0
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f72:	6083      	str	r3, [r0, #8]
 8006f74:	8181      	strh	r1, [r0, #12]
 8006f76:	6643      	str	r3, [r0, #100]	; 0x64
 8006f78:	81c2      	strh	r2, [r0, #14]
 8006f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f7e:	6183      	str	r3, [r0, #24]
 8006f80:	4619      	mov	r1, r3
 8006f82:	2208      	movs	r2, #8
 8006f84:	305c      	adds	r0, #92	; 0x5c
 8006f86:	f7fe fb27 	bl	80055d8 <memset>
 8006f8a:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <std+0x38>)
 8006f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8006f8e:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <std+0x3c>)
 8006f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f92:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <std+0x40>)
 8006f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f96:	4b05      	ldr	r3, [pc, #20]	; (8006fac <std+0x44>)
 8006f98:	6224      	str	r4, [r4, #32]
 8006f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f9c:	bd10      	pop	{r4, pc}
 8006f9e:	bf00      	nop
 8006fa0:	08007ed9 	.word	0x08007ed9
 8006fa4:	08007efb 	.word	0x08007efb
 8006fa8:	08007f33 	.word	0x08007f33
 8006fac:	08007f57 	.word	0x08007f57

08006fb0 <_cleanup_r>:
 8006fb0:	4901      	ldr	r1, [pc, #4]	; (8006fb8 <_cleanup_r+0x8>)
 8006fb2:	f000 b885 	b.w	80070c0 <_fwalk_reent>
 8006fb6:	bf00      	nop
 8006fb8:	08006f15 	.word	0x08006f15

08006fbc <__sfmoreglue>:
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	1e4a      	subs	r2, r1, #1
 8006fc0:	2568      	movs	r5, #104	; 0x68
 8006fc2:	4355      	muls	r5, r2
 8006fc4:	460e      	mov	r6, r1
 8006fc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fca:	f000 fc53 	bl	8007874 <_malloc_r>
 8006fce:	4604      	mov	r4, r0
 8006fd0:	b140      	cbz	r0, 8006fe4 <__sfmoreglue+0x28>
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	e9c0 1600 	strd	r1, r6, [r0]
 8006fd8:	300c      	adds	r0, #12
 8006fda:	60a0      	str	r0, [r4, #8]
 8006fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fe0:	f7fe fafa 	bl	80055d8 <memset>
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	bd70      	pop	{r4, r5, r6, pc}

08006fe8 <__sinit>:
 8006fe8:	6983      	ldr	r3, [r0, #24]
 8006fea:	b510      	push	{r4, lr}
 8006fec:	4604      	mov	r4, r0
 8006fee:	bb33      	cbnz	r3, 800703e <__sinit+0x56>
 8006ff0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006ff4:	6503      	str	r3, [r0, #80]	; 0x50
 8006ff6:	4b12      	ldr	r3, [pc, #72]	; (8007040 <__sinit+0x58>)
 8006ff8:	4a12      	ldr	r2, [pc, #72]	; (8007044 <__sinit+0x5c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6282      	str	r2, [r0, #40]	; 0x28
 8006ffe:	4298      	cmp	r0, r3
 8007000:	bf04      	itt	eq
 8007002:	2301      	moveq	r3, #1
 8007004:	6183      	streq	r3, [r0, #24]
 8007006:	f000 f81f 	bl	8007048 <__sfp>
 800700a:	6060      	str	r0, [r4, #4]
 800700c:	4620      	mov	r0, r4
 800700e:	f000 f81b 	bl	8007048 <__sfp>
 8007012:	60a0      	str	r0, [r4, #8]
 8007014:	4620      	mov	r0, r4
 8007016:	f000 f817 	bl	8007048 <__sfp>
 800701a:	2200      	movs	r2, #0
 800701c:	60e0      	str	r0, [r4, #12]
 800701e:	2104      	movs	r1, #4
 8007020:	6860      	ldr	r0, [r4, #4]
 8007022:	f7ff ffa1 	bl	8006f68 <std>
 8007026:	2201      	movs	r2, #1
 8007028:	2109      	movs	r1, #9
 800702a:	68a0      	ldr	r0, [r4, #8]
 800702c:	f7ff ff9c 	bl	8006f68 <std>
 8007030:	2202      	movs	r2, #2
 8007032:	2112      	movs	r1, #18
 8007034:	68e0      	ldr	r0, [r4, #12]
 8007036:	f7ff ff97 	bl	8006f68 <std>
 800703a:	2301      	movs	r3, #1
 800703c:	61a3      	str	r3, [r4, #24]
 800703e:	bd10      	pop	{r4, pc}
 8007040:	080084cc 	.word	0x080084cc
 8007044:	08006fb1 	.word	0x08006fb1

08007048 <__sfp>:
 8007048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704a:	4b1b      	ldr	r3, [pc, #108]	; (80070b8 <__sfp+0x70>)
 800704c:	681e      	ldr	r6, [r3, #0]
 800704e:	69b3      	ldr	r3, [r6, #24]
 8007050:	4607      	mov	r7, r0
 8007052:	b913      	cbnz	r3, 800705a <__sfp+0x12>
 8007054:	4630      	mov	r0, r6
 8007056:	f7ff ffc7 	bl	8006fe8 <__sinit>
 800705a:	3648      	adds	r6, #72	; 0x48
 800705c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007060:	3b01      	subs	r3, #1
 8007062:	d503      	bpl.n	800706c <__sfp+0x24>
 8007064:	6833      	ldr	r3, [r6, #0]
 8007066:	b133      	cbz	r3, 8007076 <__sfp+0x2e>
 8007068:	6836      	ldr	r6, [r6, #0]
 800706a:	e7f7      	b.n	800705c <__sfp+0x14>
 800706c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007070:	b16d      	cbz	r5, 800708e <__sfp+0x46>
 8007072:	3468      	adds	r4, #104	; 0x68
 8007074:	e7f4      	b.n	8007060 <__sfp+0x18>
 8007076:	2104      	movs	r1, #4
 8007078:	4638      	mov	r0, r7
 800707a:	f7ff ff9f 	bl	8006fbc <__sfmoreglue>
 800707e:	6030      	str	r0, [r6, #0]
 8007080:	2800      	cmp	r0, #0
 8007082:	d1f1      	bne.n	8007068 <__sfp+0x20>
 8007084:	230c      	movs	r3, #12
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	4604      	mov	r4, r0
 800708a:	4620      	mov	r0, r4
 800708c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800708e:	4b0b      	ldr	r3, [pc, #44]	; (80070bc <__sfp+0x74>)
 8007090:	6665      	str	r5, [r4, #100]	; 0x64
 8007092:	e9c4 5500 	strd	r5, r5, [r4]
 8007096:	60a5      	str	r5, [r4, #8]
 8007098:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800709c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80070a0:	2208      	movs	r2, #8
 80070a2:	4629      	mov	r1, r5
 80070a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070a8:	f7fe fa96 	bl	80055d8 <memset>
 80070ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070b4:	e7e9      	b.n	800708a <__sfp+0x42>
 80070b6:	bf00      	nop
 80070b8:	080084cc 	.word	0x080084cc
 80070bc:	ffff0001 	.word	0xffff0001

080070c0 <_fwalk_reent>:
 80070c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c4:	4680      	mov	r8, r0
 80070c6:	4689      	mov	r9, r1
 80070c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070cc:	2600      	movs	r6, #0
 80070ce:	b914      	cbnz	r4, 80070d6 <_fwalk_reent+0x16>
 80070d0:	4630      	mov	r0, r6
 80070d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80070da:	3f01      	subs	r7, #1
 80070dc:	d501      	bpl.n	80070e2 <_fwalk_reent+0x22>
 80070de:	6824      	ldr	r4, [r4, #0]
 80070e0:	e7f5      	b.n	80070ce <_fwalk_reent+0xe>
 80070e2:	89ab      	ldrh	r3, [r5, #12]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d907      	bls.n	80070f8 <_fwalk_reent+0x38>
 80070e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070ec:	3301      	adds	r3, #1
 80070ee:	d003      	beq.n	80070f8 <_fwalk_reent+0x38>
 80070f0:	4629      	mov	r1, r5
 80070f2:	4640      	mov	r0, r8
 80070f4:	47c8      	blx	r9
 80070f6:	4306      	orrs	r6, r0
 80070f8:	3568      	adds	r5, #104	; 0x68
 80070fa:	e7ee      	b.n	80070da <_fwalk_reent+0x1a>

080070fc <_localeconv_r>:
 80070fc:	4b04      	ldr	r3, [pc, #16]	; (8007110 <_localeconv_r+0x14>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6a18      	ldr	r0, [r3, #32]
 8007102:	4b04      	ldr	r3, [pc, #16]	; (8007114 <_localeconv_r+0x18>)
 8007104:	2800      	cmp	r0, #0
 8007106:	bf08      	it	eq
 8007108:	4618      	moveq	r0, r3
 800710a:	30f0      	adds	r0, #240	; 0xf0
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	2000000c 	.word	0x2000000c
 8007114:	20000070 	.word	0x20000070

08007118 <__swhatbuf_r>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	460e      	mov	r6, r1
 800711c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007120:	2900      	cmp	r1, #0
 8007122:	b096      	sub	sp, #88	; 0x58
 8007124:	4614      	mov	r4, r2
 8007126:	461d      	mov	r5, r3
 8007128:	da07      	bge.n	800713a <__swhatbuf_r+0x22>
 800712a:	2300      	movs	r3, #0
 800712c:	602b      	str	r3, [r5, #0]
 800712e:	89b3      	ldrh	r3, [r6, #12]
 8007130:	061a      	lsls	r2, r3, #24
 8007132:	d410      	bmi.n	8007156 <__swhatbuf_r+0x3e>
 8007134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007138:	e00e      	b.n	8007158 <__swhatbuf_r+0x40>
 800713a:	466a      	mov	r2, sp
 800713c:	f000 ff32 	bl	8007fa4 <_fstat_r>
 8007140:	2800      	cmp	r0, #0
 8007142:	dbf2      	blt.n	800712a <__swhatbuf_r+0x12>
 8007144:	9a01      	ldr	r2, [sp, #4]
 8007146:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800714a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800714e:	425a      	negs	r2, r3
 8007150:	415a      	adcs	r2, r3
 8007152:	602a      	str	r2, [r5, #0]
 8007154:	e7ee      	b.n	8007134 <__swhatbuf_r+0x1c>
 8007156:	2340      	movs	r3, #64	; 0x40
 8007158:	2000      	movs	r0, #0
 800715a:	6023      	str	r3, [r4, #0]
 800715c:	b016      	add	sp, #88	; 0x58
 800715e:	bd70      	pop	{r4, r5, r6, pc}

08007160 <__smakebuf_r>:
 8007160:	898b      	ldrh	r3, [r1, #12]
 8007162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007164:	079d      	lsls	r5, r3, #30
 8007166:	4606      	mov	r6, r0
 8007168:	460c      	mov	r4, r1
 800716a:	d507      	bpl.n	800717c <__smakebuf_r+0x1c>
 800716c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	6123      	str	r3, [r4, #16]
 8007174:	2301      	movs	r3, #1
 8007176:	6163      	str	r3, [r4, #20]
 8007178:	b002      	add	sp, #8
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	ab01      	add	r3, sp, #4
 800717e:	466a      	mov	r2, sp
 8007180:	f7ff ffca 	bl	8007118 <__swhatbuf_r>
 8007184:	9900      	ldr	r1, [sp, #0]
 8007186:	4605      	mov	r5, r0
 8007188:	4630      	mov	r0, r6
 800718a:	f000 fb73 	bl	8007874 <_malloc_r>
 800718e:	b948      	cbnz	r0, 80071a4 <__smakebuf_r+0x44>
 8007190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007194:	059a      	lsls	r2, r3, #22
 8007196:	d4ef      	bmi.n	8007178 <__smakebuf_r+0x18>
 8007198:	f023 0303 	bic.w	r3, r3, #3
 800719c:	f043 0302 	orr.w	r3, r3, #2
 80071a0:	81a3      	strh	r3, [r4, #12]
 80071a2:	e7e3      	b.n	800716c <__smakebuf_r+0xc>
 80071a4:	4b0d      	ldr	r3, [pc, #52]	; (80071dc <__smakebuf_r+0x7c>)
 80071a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	6020      	str	r0, [r4, #0]
 80071ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	9b00      	ldr	r3, [sp, #0]
 80071b4:	6163      	str	r3, [r4, #20]
 80071b6:	9b01      	ldr	r3, [sp, #4]
 80071b8:	6120      	str	r0, [r4, #16]
 80071ba:	b15b      	cbz	r3, 80071d4 <__smakebuf_r+0x74>
 80071bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071c0:	4630      	mov	r0, r6
 80071c2:	f000 ff01 	bl	8007fc8 <_isatty_r>
 80071c6:	b128      	cbz	r0, 80071d4 <__smakebuf_r+0x74>
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	f023 0303 	bic.w	r3, r3, #3
 80071ce:	f043 0301 	orr.w	r3, r3, #1
 80071d2:	81a3      	strh	r3, [r4, #12]
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	431d      	orrs	r5, r3
 80071d8:	81a5      	strh	r5, [r4, #12]
 80071da:	e7cd      	b.n	8007178 <__smakebuf_r+0x18>
 80071dc:	08006fb1 	.word	0x08006fb1

080071e0 <malloc>:
 80071e0:	4b02      	ldr	r3, [pc, #8]	; (80071ec <malloc+0xc>)
 80071e2:	4601      	mov	r1, r0
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	f000 bb45 	b.w	8007874 <_malloc_r>
 80071ea:	bf00      	nop
 80071ec:	2000000c 	.word	0x2000000c

080071f0 <memcpy>:
 80071f0:	b510      	push	{r4, lr}
 80071f2:	1e43      	subs	r3, r0, #1
 80071f4:	440a      	add	r2, r1
 80071f6:	4291      	cmp	r1, r2
 80071f8:	d100      	bne.n	80071fc <memcpy+0xc>
 80071fa:	bd10      	pop	{r4, pc}
 80071fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007200:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007204:	e7f7      	b.n	80071f6 <memcpy+0x6>

08007206 <_Balloc>:
 8007206:	b570      	push	{r4, r5, r6, lr}
 8007208:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800720a:	4604      	mov	r4, r0
 800720c:	460e      	mov	r6, r1
 800720e:	b93d      	cbnz	r5, 8007220 <_Balloc+0x1a>
 8007210:	2010      	movs	r0, #16
 8007212:	f7ff ffe5 	bl	80071e0 <malloc>
 8007216:	6260      	str	r0, [r4, #36]	; 0x24
 8007218:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800721c:	6005      	str	r5, [r0, #0]
 800721e:	60c5      	str	r5, [r0, #12]
 8007220:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007222:	68eb      	ldr	r3, [r5, #12]
 8007224:	b183      	cbz	r3, 8007248 <_Balloc+0x42>
 8007226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800722e:	b9b8      	cbnz	r0, 8007260 <_Balloc+0x5a>
 8007230:	2101      	movs	r1, #1
 8007232:	fa01 f506 	lsl.w	r5, r1, r6
 8007236:	1d6a      	adds	r2, r5, #5
 8007238:	0092      	lsls	r2, r2, #2
 800723a:	4620      	mov	r0, r4
 800723c:	f000 fabe 	bl	80077bc <_calloc_r>
 8007240:	b160      	cbz	r0, 800725c <_Balloc+0x56>
 8007242:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007246:	e00e      	b.n	8007266 <_Balloc+0x60>
 8007248:	2221      	movs	r2, #33	; 0x21
 800724a:	2104      	movs	r1, #4
 800724c:	4620      	mov	r0, r4
 800724e:	f000 fab5 	bl	80077bc <_calloc_r>
 8007252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007254:	60e8      	str	r0, [r5, #12]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e4      	bne.n	8007226 <_Balloc+0x20>
 800725c:	2000      	movs	r0, #0
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	6802      	ldr	r2, [r0, #0]
 8007262:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007266:	2300      	movs	r3, #0
 8007268:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800726c:	e7f7      	b.n	800725e <_Balloc+0x58>

0800726e <_Bfree>:
 800726e:	b570      	push	{r4, r5, r6, lr}
 8007270:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007272:	4606      	mov	r6, r0
 8007274:	460d      	mov	r5, r1
 8007276:	b93c      	cbnz	r4, 8007288 <_Bfree+0x1a>
 8007278:	2010      	movs	r0, #16
 800727a:	f7ff ffb1 	bl	80071e0 <malloc>
 800727e:	6270      	str	r0, [r6, #36]	; 0x24
 8007280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007284:	6004      	str	r4, [r0, #0]
 8007286:	60c4      	str	r4, [r0, #12]
 8007288:	b13d      	cbz	r5, 800729a <_Bfree+0x2c>
 800728a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800728c:	686a      	ldr	r2, [r5, #4]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007294:	6029      	str	r1, [r5, #0]
 8007296:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800729a:	bd70      	pop	{r4, r5, r6, pc}

0800729c <__multadd>:
 800729c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a0:	690d      	ldr	r5, [r1, #16]
 80072a2:	461f      	mov	r7, r3
 80072a4:	4606      	mov	r6, r0
 80072a6:	460c      	mov	r4, r1
 80072a8:	f101 0c14 	add.w	ip, r1, #20
 80072ac:	2300      	movs	r3, #0
 80072ae:	f8dc 0000 	ldr.w	r0, [ip]
 80072b2:	b281      	uxth	r1, r0
 80072b4:	fb02 7101 	mla	r1, r2, r1, r7
 80072b8:	0c0f      	lsrs	r7, r1, #16
 80072ba:	0c00      	lsrs	r0, r0, #16
 80072bc:	fb02 7000 	mla	r0, r2, r0, r7
 80072c0:	b289      	uxth	r1, r1
 80072c2:	3301      	adds	r3, #1
 80072c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80072c8:	429d      	cmp	r5, r3
 80072ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80072ce:	f84c 1b04 	str.w	r1, [ip], #4
 80072d2:	dcec      	bgt.n	80072ae <__multadd+0x12>
 80072d4:	b1d7      	cbz	r7, 800730c <__multadd+0x70>
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	42ab      	cmp	r3, r5
 80072da:	dc12      	bgt.n	8007302 <__multadd+0x66>
 80072dc:	6861      	ldr	r1, [r4, #4]
 80072de:	4630      	mov	r0, r6
 80072e0:	3101      	adds	r1, #1
 80072e2:	f7ff ff90 	bl	8007206 <_Balloc>
 80072e6:	6922      	ldr	r2, [r4, #16]
 80072e8:	3202      	adds	r2, #2
 80072ea:	f104 010c 	add.w	r1, r4, #12
 80072ee:	4680      	mov	r8, r0
 80072f0:	0092      	lsls	r2, r2, #2
 80072f2:	300c      	adds	r0, #12
 80072f4:	f7ff ff7c 	bl	80071f0 <memcpy>
 80072f8:	4621      	mov	r1, r4
 80072fa:	4630      	mov	r0, r6
 80072fc:	f7ff ffb7 	bl	800726e <_Bfree>
 8007300:	4644      	mov	r4, r8
 8007302:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007306:	3501      	adds	r5, #1
 8007308:	615f      	str	r7, [r3, #20]
 800730a:	6125      	str	r5, [r4, #16]
 800730c:	4620      	mov	r0, r4
 800730e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007312 <__hi0bits>:
 8007312:	0c02      	lsrs	r2, r0, #16
 8007314:	0412      	lsls	r2, r2, #16
 8007316:	4603      	mov	r3, r0
 8007318:	b9b2      	cbnz	r2, 8007348 <__hi0bits+0x36>
 800731a:	0403      	lsls	r3, r0, #16
 800731c:	2010      	movs	r0, #16
 800731e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007322:	bf04      	itt	eq
 8007324:	021b      	lsleq	r3, r3, #8
 8007326:	3008      	addeq	r0, #8
 8007328:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800732c:	bf04      	itt	eq
 800732e:	011b      	lsleq	r3, r3, #4
 8007330:	3004      	addeq	r0, #4
 8007332:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007336:	bf04      	itt	eq
 8007338:	009b      	lsleq	r3, r3, #2
 800733a:	3002      	addeq	r0, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	db06      	blt.n	800734e <__hi0bits+0x3c>
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	d503      	bpl.n	800734c <__hi0bits+0x3a>
 8007344:	3001      	adds	r0, #1
 8007346:	4770      	bx	lr
 8007348:	2000      	movs	r0, #0
 800734a:	e7e8      	b.n	800731e <__hi0bits+0xc>
 800734c:	2020      	movs	r0, #32
 800734e:	4770      	bx	lr

08007350 <__lo0bits>:
 8007350:	6803      	ldr	r3, [r0, #0]
 8007352:	f013 0207 	ands.w	r2, r3, #7
 8007356:	4601      	mov	r1, r0
 8007358:	d00b      	beq.n	8007372 <__lo0bits+0x22>
 800735a:	07da      	lsls	r2, r3, #31
 800735c:	d423      	bmi.n	80073a6 <__lo0bits+0x56>
 800735e:	0798      	lsls	r0, r3, #30
 8007360:	bf49      	itett	mi
 8007362:	085b      	lsrmi	r3, r3, #1
 8007364:	089b      	lsrpl	r3, r3, #2
 8007366:	2001      	movmi	r0, #1
 8007368:	600b      	strmi	r3, [r1, #0]
 800736a:	bf5c      	itt	pl
 800736c:	600b      	strpl	r3, [r1, #0]
 800736e:	2002      	movpl	r0, #2
 8007370:	4770      	bx	lr
 8007372:	b298      	uxth	r0, r3
 8007374:	b9a8      	cbnz	r0, 80073a2 <__lo0bits+0x52>
 8007376:	0c1b      	lsrs	r3, r3, #16
 8007378:	2010      	movs	r0, #16
 800737a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800737e:	bf04      	itt	eq
 8007380:	0a1b      	lsreq	r3, r3, #8
 8007382:	3008      	addeq	r0, #8
 8007384:	071a      	lsls	r2, r3, #28
 8007386:	bf04      	itt	eq
 8007388:	091b      	lsreq	r3, r3, #4
 800738a:	3004      	addeq	r0, #4
 800738c:	079a      	lsls	r2, r3, #30
 800738e:	bf04      	itt	eq
 8007390:	089b      	lsreq	r3, r3, #2
 8007392:	3002      	addeq	r0, #2
 8007394:	07da      	lsls	r2, r3, #31
 8007396:	d402      	bmi.n	800739e <__lo0bits+0x4e>
 8007398:	085b      	lsrs	r3, r3, #1
 800739a:	d006      	beq.n	80073aa <__lo0bits+0x5a>
 800739c:	3001      	adds	r0, #1
 800739e:	600b      	str	r3, [r1, #0]
 80073a0:	4770      	bx	lr
 80073a2:	4610      	mov	r0, r2
 80073a4:	e7e9      	b.n	800737a <__lo0bits+0x2a>
 80073a6:	2000      	movs	r0, #0
 80073a8:	4770      	bx	lr
 80073aa:	2020      	movs	r0, #32
 80073ac:	4770      	bx	lr

080073ae <__i2b>:
 80073ae:	b510      	push	{r4, lr}
 80073b0:	460c      	mov	r4, r1
 80073b2:	2101      	movs	r1, #1
 80073b4:	f7ff ff27 	bl	8007206 <_Balloc>
 80073b8:	2201      	movs	r2, #1
 80073ba:	6144      	str	r4, [r0, #20]
 80073bc:	6102      	str	r2, [r0, #16]
 80073be:	bd10      	pop	{r4, pc}

080073c0 <__multiply>:
 80073c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	4614      	mov	r4, r2
 80073c6:	690a      	ldr	r2, [r1, #16]
 80073c8:	6923      	ldr	r3, [r4, #16]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	bfb8      	it	lt
 80073ce:	460b      	movlt	r3, r1
 80073d0:	4688      	mov	r8, r1
 80073d2:	bfbc      	itt	lt
 80073d4:	46a0      	movlt	r8, r4
 80073d6:	461c      	movlt	r4, r3
 80073d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80073dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80073e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073e8:	eb07 0609 	add.w	r6, r7, r9
 80073ec:	42b3      	cmp	r3, r6
 80073ee:	bfb8      	it	lt
 80073f0:	3101      	addlt	r1, #1
 80073f2:	f7ff ff08 	bl	8007206 <_Balloc>
 80073f6:	f100 0514 	add.w	r5, r0, #20
 80073fa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80073fe:	462b      	mov	r3, r5
 8007400:	2200      	movs	r2, #0
 8007402:	4573      	cmp	r3, lr
 8007404:	d316      	bcc.n	8007434 <__multiply+0x74>
 8007406:	f104 0214 	add.w	r2, r4, #20
 800740a:	f108 0114 	add.w	r1, r8, #20
 800740e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007412:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	9b00      	ldr	r3, [sp, #0]
 800741a:	9201      	str	r2, [sp, #4]
 800741c:	4293      	cmp	r3, r2
 800741e:	d80c      	bhi.n	800743a <__multiply+0x7a>
 8007420:	2e00      	cmp	r6, #0
 8007422:	dd03      	ble.n	800742c <__multiply+0x6c>
 8007424:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007428:	2b00      	cmp	r3, #0
 800742a:	d05d      	beq.n	80074e8 <__multiply+0x128>
 800742c:	6106      	str	r6, [r0, #16]
 800742e:	b003      	add	sp, #12
 8007430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007434:	f843 2b04 	str.w	r2, [r3], #4
 8007438:	e7e3      	b.n	8007402 <__multiply+0x42>
 800743a:	f8b2 b000 	ldrh.w	fp, [r2]
 800743e:	f1bb 0f00 	cmp.w	fp, #0
 8007442:	d023      	beq.n	800748c <__multiply+0xcc>
 8007444:	4689      	mov	r9, r1
 8007446:	46ac      	mov	ip, r5
 8007448:	f04f 0800 	mov.w	r8, #0
 800744c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007450:	f8dc a000 	ldr.w	sl, [ip]
 8007454:	b2a3      	uxth	r3, r4
 8007456:	fa1f fa8a 	uxth.w	sl, sl
 800745a:	fb0b a303 	mla	r3, fp, r3, sl
 800745e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007462:	f8dc 4000 	ldr.w	r4, [ip]
 8007466:	4443      	add	r3, r8
 8007468:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800746c:	fb0b 840a 	mla	r4, fp, sl, r8
 8007470:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007474:	46e2      	mov	sl, ip
 8007476:	b29b      	uxth	r3, r3
 8007478:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800747c:	454f      	cmp	r7, r9
 800747e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007482:	f84a 3b04 	str.w	r3, [sl], #4
 8007486:	d82b      	bhi.n	80074e0 <__multiply+0x120>
 8007488:	f8cc 8004 	str.w	r8, [ip, #4]
 800748c:	9b01      	ldr	r3, [sp, #4]
 800748e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007492:	3204      	adds	r2, #4
 8007494:	f1ba 0f00 	cmp.w	sl, #0
 8007498:	d020      	beq.n	80074dc <__multiply+0x11c>
 800749a:	682b      	ldr	r3, [r5, #0]
 800749c:	4689      	mov	r9, r1
 800749e:	46a8      	mov	r8, r5
 80074a0:	f04f 0b00 	mov.w	fp, #0
 80074a4:	f8b9 c000 	ldrh.w	ip, [r9]
 80074a8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80074ac:	fb0a 440c 	mla	r4, sl, ip, r4
 80074b0:	445c      	add	r4, fp
 80074b2:	46c4      	mov	ip, r8
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80074ba:	f84c 3b04 	str.w	r3, [ip], #4
 80074be:	f859 3b04 	ldr.w	r3, [r9], #4
 80074c2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80074c6:	0c1b      	lsrs	r3, r3, #16
 80074c8:	fb0a b303 	mla	r3, sl, r3, fp
 80074cc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80074d0:	454f      	cmp	r7, r9
 80074d2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80074d6:	d805      	bhi.n	80074e4 <__multiply+0x124>
 80074d8:	f8c8 3004 	str.w	r3, [r8, #4]
 80074dc:	3504      	adds	r5, #4
 80074de:	e79b      	b.n	8007418 <__multiply+0x58>
 80074e0:	46d4      	mov	ip, sl
 80074e2:	e7b3      	b.n	800744c <__multiply+0x8c>
 80074e4:	46e0      	mov	r8, ip
 80074e6:	e7dd      	b.n	80074a4 <__multiply+0xe4>
 80074e8:	3e01      	subs	r6, #1
 80074ea:	e799      	b.n	8007420 <__multiply+0x60>

080074ec <__pow5mult>:
 80074ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f0:	4615      	mov	r5, r2
 80074f2:	f012 0203 	ands.w	r2, r2, #3
 80074f6:	4606      	mov	r6, r0
 80074f8:	460f      	mov	r7, r1
 80074fa:	d007      	beq.n	800750c <__pow5mult+0x20>
 80074fc:	3a01      	subs	r2, #1
 80074fe:	4c21      	ldr	r4, [pc, #132]	; (8007584 <__pow5mult+0x98>)
 8007500:	2300      	movs	r3, #0
 8007502:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007506:	f7ff fec9 	bl	800729c <__multadd>
 800750a:	4607      	mov	r7, r0
 800750c:	10ad      	asrs	r5, r5, #2
 800750e:	d035      	beq.n	800757c <__pow5mult+0x90>
 8007510:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007512:	b93c      	cbnz	r4, 8007524 <__pow5mult+0x38>
 8007514:	2010      	movs	r0, #16
 8007516:	f7ff fe63 	bl	80071e0 <malloc>
 800751a:	6270      	str	r0, [r6, #36]	; 0x24
 800751c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007520:	6004      	str	r4, [r0, #0]
 8007522:	60c4      	str	r4, [r0, #12]
 8007524:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007528:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800752c:	b94c      	cbnz	r4, 8007542 <__pow5mult+0x56>
 800752e:	f240 2171 	movw	r1, #625	; 0x271
 8007532:	4630      	mov	r0, r6
 8007534:	f7ff ff3b 	bl	80073ae <__i2b>
 8007538:	2300      	movs	r3, #0
 800753a:	f8c8 0008 	str.w	r0, [r8, #8]
 800753e:	4604      	mov	r4, r0
 8007540:	6003      	str	r3, [r0, #0]
 8007542:	f04f 0800 	mov.w	r8, #0
 8007546:	07eb      	lsls	r3, r5, #31
 8007548:	d50a      	bpl.n	8007560 <__pow5mult+0x74>
 800754a:	4639      	mov	r1, r7
 800754c:	4622      	mov	r2, r4
 800754e:	4630      	mov	r0, r6
 8007550:	f7ff ff36 	bl	80073c0 <__multiply>
 8007554:	4639      	mov	r1, r7
 8007556:	4681      	mov	r9, r0
 8007558:	4630      	mov	r0, r6
 800755a:	f7ff fe88 	bl	800726e <_Bfree>
 800755e:	464f      	mov	r7, r9
 8007560:	106d      	asrs	r5, r5, #1
 8007562:	d00b      	beq.n	800757c <__pow5mult+0x90>
 8007564:	6820      	ldr	r0, [r4, #0]
 8007566:	b938      	cbnz	r0, 8007578 <__pow5mult+0x8c>
 8007568:	4622      	mov	r2, r4
 800756a:	4621      	mov	r1, r4
 800756c:	4630      	mov	r0, r6
 800756e:	f7ff ff27 	bl	80073c0 <__multiply>
 8007572:	6020      	str	r0, [r4, #0]
 8007574:	f8c0 8000 	str.w	r8, [r0]
 8007578:	4604      	mov	r4, r0
 800757a:	e7e4      	b.n	8007546 <__pow5mult+0x5a>
 800757c:	4638      	mov	r0, r7
 800757e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007582:	bf00      	nop
 8007584:	08008668 	.word	0x08008668

08007588 <__lshift>:
 8007588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800758c:	460c      	mov	r4, r1
 800758e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	6849      	ldr	r1, [r1, #4]
 8007596:	eb0a 0903 	add.w	r9, sl, r3
 800759a:	68a3      	ldr	r3, [r4, #8]
 800759c:	4607      	mov	r7, r0
 800759e:	4616      	mov	r6, r2
 80075a0:	f109 0501 	add.w	r5, r9, #1
 80075a4:	42ab      	cmp	r3, r5
 80075a6:	db32      	blt.n	800760e <__lshift+0x86>
 80075a8:	4638      	mov	r0, r7
 80075aa:	f7ff fe2c 	bl	8007206 <_Balloc>
 80075ae:	2300      	movs	r3, #0
 80075b0:	4680      	mov	r8, r0
 80075b2:	f100 0114 	add.w	r1, r0, #20
 80075b6:	461a      	mov	r2, r3
 80075b8:	4553      	cmp	r3, sl
 80075ba:	db2b      	blt.n	8007614 <__lshift+0x8c>
 80075bc:	6920      	ldr	r0, [r4, #16]
 80075be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075c2:	f104 0314 	add.w	r3, r4, #20
 80075c6:	f016 021f 	ands.w	r2, r6, #31
 80075ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075d2:	d025      	beq.n	8007620 <__lshift+0x98>
 80075d4:	f1c2 0e20 	rsb	lr, r2, #32
 80075d8:	2000      	movs	r0, #0
 80075da:	681e      	ldr	r6, [r3, #0]
 80075dc:	468a      	mov	sl, r1
 80075de:	4096      	lsls	r6, r2
 80075e0:	4330      	orrs	r0, r6
 80075e2:	f84a 0b04 	str.w	r0, [sl], #4
 80075e6:	f853 0b04 	ldr.w	r0, [r3], #4
 80075ea:	459c      	cmp	ip, r3
 80075ec:	fa20 f00e 	lsr.w	r0, r0, lr
 80075f0:	d814      	bhi.n	800761c <__lshift+0x94>
 80075f2:	6048      	str	r0, [r1, #4]
 80075f4:	b108      	cbz	r0, 80075fa <__lshift+0x72>
 80075f6:	f109 0502 	add.w	r5, r9, #2
 80075fa:	3d01      	subs	r5, #1
 80075fc:	4638      	mov	r0, r7
 80075fe:	f8c8 5010 	str.w	r5, [r8, #16]
 8007602:	4621      	mov	r1, r4
 8007604:	f7ff fe33 	bl	800726e <_Bfree>
 8007608:	4640      	mov	r0, r8
 800760a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760e:	3101      	adds	r1, #1
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	e7c7      	b.n	80075a4 <__lshift+0x1c>
 8007614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007618:	3301      	adds	r3, #1
 800761a:	e7cd      	b.n	80075b8 <__lshift+0x30>
 800761c:	4651      	mov	r1, sl
 800761e:	e7dc      	b.n	80075da <__lshift+0x52>
 8007620:	3904      	subs	r1, #4
 8007622:	f853 2b04 	ldr.w	r2, [r3], #4
 8007626:	f841 2f04 	str.w	r2, [r1, #4]!
 800762a:	459c      	cmp	ip, r3
 800762c:	d8f9      	bhi.n	8007622 <__lshift+0x9a>
 800762e:	e7e4      	b.n	80075fa <__lshift+0x72>

08007630 <__mcmp>:
 8007630:	6903      	ldr	r3, [r0, #16]
 8007632:	690a      	ldr	r2, [r1, #16]
 8007634:	1a9b      	subs	r3, r3, r2
 8007636:	b530      	push	{r4, r5, lr}
 8007638:	d10c      	bne.n	8007654 <__mcmp+0x24>
 800763a:	0092      	lsls	r2, r2, #2
 800763c:	3014      	adds	r0, #20
 800763e:	3114      	adds	r1, #20
 8007640:	1884      	adds	r4, r0, r2
 8007642:	4411      	add	r1, r2
 8007644:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007648:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800764c:	4295      	cmp	r5, r2
 800764e:	d003      	beq.n	8007658 <__mcmp+0x28>
 8007650:	d305      	bcc.n	800765e <__mcmp+0x2e>
 8007652:	2301      	movs	r3, #1
 8007654:	4618      	mov	r0, r3
 8007656:	bd30      	pop	{r4, r5, pc}
 8007658:	42a0      	cmp	r0, r4
 800765a:	d3f3      	bcc.n	8007644 <__mcmp+0x14>
 800765c:	e7fa      	b.n	8007654 <__mcmp+0x24>
 800765e:	f04f 33ff 	mov.w	r3, #4294967295
 8007662:	e7f7      	b.n	8007654 <__mcmp+0x24>

08007664 <__mdiff>:
 8007664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	460d      	mov	r5, r1
 800766a:	4607      	mov	r7, r0
 800766c:	4611      	mov	r1, r2
 800766e:	4628      	mov	r0, r5
 8007670:	4614      	mov	r4, r2
 8007672:	f7ff ffdd 	bl	8007630 <__mcmp>
 8007676:	1e06      	subs	r6, r0, #0
 8007678:	d108      	bne.n	800768c <__mdiff+0x28>
 800767a:	4631      	mov	r1, r6
 800767c:	4638      	mov	r0, r7
 800767e:	f7ff fdc2 	bl	8007206 <_Balloc>
 8007682:	2301      	movs	r3, #1
 8007684:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768c:	bfa4      	itt	ge
 800768e:	4623      	movge	r3, r4
 8007690:	462c      	movge	r4, r5
 8007692:	4638      	mov	r0, r7
 8007694:	6861      	ldr	r1, [r4, #4]
 8007696:	bfa6      	itte	ge
 8007698:	461d      	movge	r5, r3
 800769a:	2600      	movge	r6, #0
 800769c:	2601      	movlt	r6, #1
 800769e:	f7ff fdb2 	bl	8007206 <_Balloc>
 80076a2:	692b      	ldr	r3, [r5, #16]
 80076a4:	60c6      	str	r6, [r0, #12]
 80076a6:	6926      	ldr	r6, [r4, #16]
 80076a8:	f105 0914 	add.w	r9, r5, #20
 80076ac:	f104 0214 	add.w	r2, r4, #20
 80076b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80076b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80076b8:	f100 0514 	add.w	r5, r0, #20
 80076bc:	f04f 0e00 	mov.w	lr, #0
 80076c0:	f852 ab04 	ldr.w	sl, [r2], #4
 80076c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80076c8:	fa1e f18a 	uxtah	r1, lr, sl
 80076cc:	b2a3      	uxth	r3, r4
 80076ce:	1ac9      	subs	r1, r1, r3
 80076d0:	0c23      	lsrs	r3, r4, #16
 80076d2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80076d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80076da:	b289      	uxth	r1, r1
 80076dc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80076e0:	45c8      	cmp	r8, r9
 80076e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80076e6:	4694      	mov	ip, r2
 80076e8:	f845 3b04 	str.w	r3, [r5], #4
 80076ec:	d8e8      	bhi.n	80076c0 <__mdiff+0x5c>
 80076ee:	45bc      	cmp	ip, r7
 80076f0:	d304      	bcc.n	80076fc <__mdiff+0x98>
 80076f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80076f6:	b183      	cbz	r3, 800771a <__mdiff+0xb6>
 80076f8:	6106      	str	r6, [r0, #16]
 80076fa:	e7c5      	b.n	8007688 <__mdiff+0x24>
 80076fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007700:	fa1e f381 	uxtah	r3, lr, r1
 8007704:	141a      	asrs	r2, r3, #16
 8007706:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800770a:	b29b      	uxth	r3, r3
 800770c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007710:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007714:	f845 3b04 	str.w	r3, [r5], #4
 8007718:	e7e9      	b.n	80076ee <__mdiff+0x8a>
 800771a:	3e01      	subs	r6, #1
 800771c:	e7e9      	b.n	80076f2 <__mdiff+0x8e>

0800771e <__d2b>:
 800771e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007722:	460e      	mov	r6, r1
 8007724:	2101      	movs	r1, #1
 8007726:	ec59 8b10 	vmov	r8, r9, d0
 800772a:	4615      	mov	r5, r2
 800772c:	f7ff fd6b 	bl	8007206 <_Balloc>
 8007730:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007734:	4607      	mov	r7, r0
 8007736:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800773a:	bb34      	cbnz	r4, 800778a <__d2b+0x6c>
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	f1b8 0300 	subs.w	r3, r8, #0
 8007742:	d027      	beq.n	8007794 <__d2b+0x76>
 8007744:	a802      	add	r0, sp, #8
 8007746:	f840 3d08 	str.w	r3, [r0, #-8]!
 800774a:	f7ff fe01 	bl	8007350 <__lo0bits>
 800774e:	9900      	ldr	r1, [sp, #0]
 8007750:	b1f0      	cbz	r0, 8007790 <__d2b+0x72>
 8007752:	9a01      	ldr	r2, [sp, #4]
 8007754:	f1c0 0320 	rsb	r3, r0, #32
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	430b      	orrs	r3, r1
 800775e:	40c2      	lsrs	r2, r0
 8007760:	617b      	str	r3, [r7, #20]
 8007762:	9201      	str	r2, [sp, #4]
 8007764:	9b01      	ldr	r3, [sp, #4]
 8007766:	61bb      	str	r3, [r7, #24]
 8007768:	2b00      	cmp	r3, #0
 800776a:	bf14      	ite	ne
 800776c:	2102      	movne	r1, #2
 800776e:	2101      	moveq	r1, #1
 8007770:	6139      	str	r1, [r7, #16]
 8007772:	b1c4      	cbz	r4, 80077a6 <__d2b+0x88>
 8007774:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007778:	4404      	add	r4, r0
 800777a:	6034      	str	r4, [r6, #0]
 800777c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007780:	6028      	str	r0, [r5, #0]
 8007782:	4638      	mov	r0, r7
 8007784:	b003      	add	sp, #12
 8007786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800778a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800778e:	e7d5      	b.n	800773c <__d2b+0x1e>
 8007790:	6179      	str	r1, [r7, #20]
 8007792:	e7e7      	b.n	8007764 <__d2b+0x46>
 8007794:	a801      	add	r0, sp, #4
 8007796:	f7ff fddb 	bl	8007350 <__lo0bits>
 800779a:	9b01      	ldr	r3, [sp, #4]
 800779c:	617b      	str	r3, [r7, #20]
 800779e:	2101      	movs	r1, #1
 80077a0:	6139      	str	r1, [r7, #16]
 80077a2:	3020      	adds	r0, #32
 80077a4:	e7e5      	b.n	8007772 <__d2b+0x54>
 80077a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80077aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077ae:	6030      	str	r0, [r6, #0]
 80077b0:	6918      	ldr	r0, [r3, #16]
 80077b2:	f7ff fdae 	bl	8007312 <__hi0bits>
 80077b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80077ba:	e7e1      	b.n	8007780 <__d2b+0x62>

080077bc <_calloc_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	fb02 f401 	mul.w	r4, r2, r1
 80077c2:	4621      	mov	r1, r4
 80077c4:	f000 f856 	bl	8007874 <_malloc_r>
 80077c8:	4605      	mov	r5, r0
 80077ca:	b118      	cbz	r0, 80077d4 <_calloc_r+0x18>
 80077cc:	4622      	mov	r2, r4
 80077ce:	2100      	movs	r1, #0
 80077d0:	f7fd ff02 	bl	80055d8 <memset>
 80077d4:	4628      	mov	r0, r5
 80077d6:	bd38      	pop	{r3, r4, r5, pc}

080077d8 <_free_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4605      	mov	r5, r0
 80077dc:	2900      	cmp	r1, #0
 80077de:	d045      	beq.n	800786c <_free_r+0x94>
 80077e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077e4:	1f0c      	subs	r4, r1, #4
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bfb8      	it	lt
 80077ea:	18e4      	addlt	r4, r4, r3
 80077ec:	f000 fc39 	bl	8008062 <__malloc_lock>
 80077f0:	4a1f      	ldr	r2, [pc, #124]	; (8007870 <_free_r+0x98>)
 80077f2:	6813      	ldr	r3, [r2, #0]
 80077f4:	4610      	mov	r0, r2
 80077f6:	b933      	cbnz	r3, 8007806 <_free_r+0x2e>
 80077f8:	6063      	str	r3, [r4, #4]
 80077fa:	6014      	str	r4, [r2, #0]
 80077fc:	4628      	mov	r0, r5
 80077fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007802:	f000 bc2f 	b.w	8008064 <__malloc_unlock>
 8007806:	42a3      	cmp	r3, r4
 8007808:	d90c      	bls.n	8007824 <_free_r+0x4c>
 800780a:	6821      	ldr	r1, [r4, #0]
 800780c:	1862      	adds	r2, r4, r1
 800780e:	4293      	cmp	r3, r2
 8007810:	bf04      	itt	eq
 8007812:	681a      	ldreq	r2, [r3, #0]
 8007814:	685b      	ldreq	r3, [r3, #4]
 8007816:	6063      	str	r3, [r4, #4]
 8007818:	bf04      	itt	eq
 800781a:	1852      	addeq	r2, r2, r1
 800781c:	6022      	streq	r2, [r4, #0]
 800781e:	6004      	str	r4, [r0, #0]
 8007820:	e7ec      	b.n	80077fc <_free_r+0x24>
 8007822:	4613      	mov	r3, r2
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	b10a      	cbz	r2, 800782c <_free_r+0x54>
 8007828:	42a2      	cmp	r2, r4
 800782a:	d9fa      	bls.n	8007822 <_free_r+0x4a>
 800782c:	6819      	ldr	r1, [r3, #0]
 800782e:	1858      	adds	r0, r3, r1
 8007830:	42a0      	cmp	r0, r4
 8007832:	d10b      	bne.n	800784c <_free_r+0x74>
 8007834:	6820      	ldr	r0, [r4, #0]
 8007836:	4401      	add	r1, r0
 8007838:	1858      	adds	r0, r3, r1
 800783a:	4282      	cmp	r2, r0
 800783c:	6019      	str	r1, [r3, #0]
 800783e:	d1dd      	bne.n	80077fc <_free_r+0x24>
 8007840:	6810      	ldr	r0, [r2, #0]
 8007842:	6852      	ldr	r2, [r2, #4]
 8007844:	605a      	str	r2, [r3, #4]
 8007846:	4401      	add	r1, r0
 8007848:	6019      	str	r1, [r3, #0]
 800784a:	e7d7      	b.n	80077fc <_free_r+0x24>
 800784c:	d902      	bls.n	8007854 <_free_r+0x7c>
 800784e:	230c      	movs	r3, #12
 8007850:	602b      	str	r3, [r5, #0]
 8007852:	e7d3      	b.n	80077fc <_free_r+0x24>
 8007854:	6820      	ldr	r0, [r4, #0]
 8007856:	1821      	adds	r1, r4, r0
 8007858:	428a      	cmp	r2, r1
 800785a:	bf04      	itt	eq
 800785c:	6811      	ldreq	r1, [r2, #0]
 800785e:	6852      	ldreq	r2, [r2, #4]
 8007860:	6062      	str	r2, [r4, #4]
 8007862:	bf04      	itt	eq
 8007864:	1809      	addeq	r1, r1, r0
 8007866:	6021      	streq	r1, [r4, #0]
 8007868:	605c      	str	r4, [r3, #4]
 800786a:	e7c7      	b.n	80077fc <_free_r+0x24>
 800786c:	bd38      	pop	{r3, r4, r5, pc}
 800786e:	bf00      	nop
 8007870:	20000200 	.word	0x20000200

08007874 <_malloc_r>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	1ccd      	adds	r5, r1, #3
 8007878:	f025 0503 	bic.w	r5, r5, #3
 800787c:	3508      	adds	r5, #8
 800787e:	2d0c      	cmp	r5, #12
 8007880:	bf38      	it	cc
 8007882:	250c      	movcc	r5, #12
 8007884:	2d00      	cmp	r5, #0
 8007886:	4606      	mov	r6, r0
 8007888:	db01      	blt.n	800788e <_malloc_r+0x1a>
 800788a:	42a9      	cmp	r1, r5
 800788c:	d903      	bls.n	8007896 <_malloc_r+0x22>
 800788e:	230c      	movs	r3, #12
 8007890:	6033      	str	r3, [r6, #0]
 8007892:	2000      	movs	r0, #0
 8007894:	bd70      	pop	{r4, r5, r6, pc}
 8007896:	f000 fbe4 	bl	8008062 <__malloc_lock>
 800789a:	4a21      	ldr	r2, [pc, #132]	; (8007920 <_malloc_r+0xac>)
 800789c:	6814      	ldr	r4, [r2, #0]
 800789e:	4621      	mov	r1, r4
 80078a0:	b991      	cbnz	r1, 80078c8 <_malloc_r+0x54>
 80078a2:	4c20      	ldr	r4, [pc, #128]	; (8007924 <_malloc_r+0xb0>)
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	b91b      	cbnz	r3, 80078b0 <_malloc_r+0x3c>
 80078a8:	4630      	mov	r0, r6
 80078aa:	f000 fb05 	bl	8007eb8 <_sbrk_r>
 80078ae:	6020      	str	r0, [r4, #0]
 80078b0:	4629      	mov	r1, r5
 80078b2:	4630      	mov	r0, r6
 80078b4:	f000 fb00 	bl	8007eb8 <_sbrk_r>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d124      	bne.n	8007906 <_malloc_r+0x92>
 80078bc:	230c      	movs	r3, #12
 80078be:	6033      	str	r3, [r6, #0]
 80078c0:	4630      	mov	r0, r6
 80078c2:	f000 fbcf 	bl	8008064 <__malloc_unlock>
 80078c6:	e7e4      	b.n	8007892 <_malloc_r+0x1e>
 80078c8:	680b      	ldr	r3, [r1, #0]
 80078ca:	1b5b      	subs	r3, r3, r5
 80078cc:	d418      	bmi.n	8007900 <_malloc_r+0x8c>
 80078ce:	2b0b      	cmp	r3, #11
 80078d0:	d90f      	bls.n	80078f2 <_malloc_r+0x7e>
 80078d2:	600b      	str	r3, [r1, #0]
 80078d4:	50cd      	str	r5, [r1, r3]
 80078d6:	18cc      	adds	r4, r1, r3
 80078d8:	4630      	mov	r0, r6
 80078da:	f000 fbc3 	bl	8008064 <__malloc_unlock>
 80078de:	f104 000b 	add.w	r0, r4, #11
 80078e2:	1d23      	adds	r3, r4, #4
 80078e4:	f020 0007 	bic.w	r0, r0, #7
 80078e8:	1ac3      	subs	r3, r0, r3
 80078ea:	d0d3      	beq.n	8007894 <_malloc_r+0x20>
 80078ec:	425a      	negs	r2, r3
 80078ee:	50e2      	str	r2, [r4, r3]
 80078f0:	e7d0      	b.n	8007894 <_malloc_r+0x20>
 80078f2:	428c      	cmp	r4, r1
 80078f4:	684b      	ldr	r3, [r1, #4]
 80078f6:	bf16      	itet	ne
 80078f8:	6063      	strne	r3, [r4, #4]
 80078fa:	6013      	streq	r3, [r2, #0]
 80078fc:	460c      	movne	r4, r1
 80078fe:	e7eb      	b.n	80078d8 <_malloc_r+0x64>
 8007900:	460c      	mov	r4, r1
 8007902:	6849      	ldr	r1, [r1, #4]
 8007904:	e7cc      	b.n	80078a0 <_malloc_r+0x2c>
 8007906:	1cc4      	adds	r4, r0, #3
 8007908:	f024 0403 	bic.w	r4, r4, #3
 800790c:	42a0      	cmp	r0, r4
 800790e:	d005      	beq.n	800791c <_malloc_r+0xa8>
 8007910:	1a21      	subs	r1, r4, r0
 8007912:	4630      	mov	r0, r6
 8007914:	f000 fad0 	bl	8007eb8 <_sbrk_r>
 8007918:	3001      	adds	r0, #1
 800791a:	d0cf      	beq.n	80078bc <_malloc_r+0x48>
 800791c:	6025      	str	r5, [r4, #0]
 800791e:	e7db      	b.n	80078d8 <_malloc_r+0x64>
 8007920:	20000200 	.word	0x20000200
 8007924:	20000204 	.word	0x20000204

08007928 <__ssputs_r>:
 8007928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800792c:	688e      	ldr	r6, [r1, #8]
 800792e:	429e      	cmp	r6, r3
 8007930:	4682      	mov	sl, r0
 8007932:	460c      	mov	r4, r1
 8007934:	4690      	mov	r8, r2
 8007936:	4699      	mov	r9, r3
 8007938:	d837      	bhi.n	80079aa <__ssputs_r+0x82>
 800793a:	898a      	ldrh	r2, [r1, #12]
 800793c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007940:	d031      	beq.n	80079a6 <__ssputs_r+0x7e>
 8007942:	6825      	ldr	r5, [r4, #0]
 8007944:	6909      	ldr	r1, [r1, #16]
 8007946:	1a6f      	subs	r7, r5, r1
 8007948:	6965      	ldr	r5, [r4, #20]
 800794a:	2302      	movs	r3, #2
 800794c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007950:	fb95 f5f3 	sdiv	r5, r5, r3
 8007954:	f109 0301 	add.w	r3, r9, #1
 8007958:	443b      	add	r3, r7
 800795a:	429d      	cmp	r5, r3
 800795c:	bf38      	it	cc
 800795e:	461d      	movcc	r5, r3
 8007960:	0553      	lsls	r3, r2, #21
 8007962:	d530      	bpl.n	80079c6 <__ssputs_r+0x9e>
 8007964:	4629      	mov	r1, r5
 8007966:	f7ff ff85 	bl	8007874 <_malloc_r>
 800796a:	4606      	mov	r6, r0
 800796c:	b950      	cbnz	r0, 8007984 <__ssputs_r+0x5c>
 800796e:	230c      	movs	r3, #12
 8007970:	f8ca 3000 	str.w	r3, [sl]
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800797a:	81a3      	strh	r3, [r4, #12]
 800797c:	f04f 30ff 	mov.w	r0, #4294967295
 8007980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007984:	463a      	mov	r2, r7
 8007986:	6921      	ldr	r1, [r4, #16]
 8007988:	f7ff fc32 	bl	80071f0 <memcpy>
 800798c:	89a3      	ldrh	r3, [r4, #12]
 800798e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007996:	81a3      	strh	r3, [r4, #12]
 8007998:	6126      	str	r6, [r4, #16]
 800799a:	6165      	str	r5, [r4, #20]
 800799c:	443e      	add	r6, r7
 800799e:	1bed      	subs	r5, r5, r7
 80079a0:	6026      	str	r6, [r4, #0]
 80079a2:	60a5      	str	r5, [r4, #8]
 80079a4:	464e      	mov	r6, r9
 80079a6:	454e      	cmp	r6, r9
 80079a8:	d900      	bls.n	80079ac <__ssputs_r+0x84>
 80079aa:	464e      	mov	r6, r9
 80079ac:	4632      	mov	r2, r6
 80079ae:	4641      	mov	r1, r8
 80079b0:	6820      	ldr	r0, [r4, #0]
 80079b2:	f000 fb3d 	bl	8008030 <memmove>
 80079b6:	68a3      	ldr	r3, [r4, #8]
 80079b8:	1b9b      	subs	r3, r3, r6
 80079ba:	60a3      	str	r3, [r4, #8]
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	441e      	add	r6, r3
 80079c0:	6026      	str	r6, [r4, #0]
 80079c2:	2000      	movs	r0, #0
 80079c4:	e7dc      	b.n	8007980 <__ssputs_r+0x58>
 80079c6:	462a      	mov	r2, r5
 80079c8:	f000 fb4d 	bl	8008066 <_realloc_r>
 80079cc:	4606      	mov	r6, r0
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d1e2      	bne.n	8007998 <__ssputs_r+0x70>
 80079d2:	6921      	ldr	r1, [r4, #16]
 80079d4:	4650      	mov	r0, sl
 80079d6:	f7ff feff 	bl	80077d8 <_free_r>
 80079da:	e7c8      	b.n	800796e <__ssputs_r+0x46>

080079dc <_svfiprintf_r>:
 80079dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e0:	461d      	mov	r5, r3
 80079e2:	898b      	ldrh	r3, [r1, #12]
 80079e4:	061f      	lsls	r7, r3, #24
 80079e6:	b09d      	sub	sp, #116	; 0x74
 80079e8:	4680      	mov	r8, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	4616      	mov	r6, r2
 80079ee:	d50f      	bpl.n	8007a10 <_svfiprintf_r+0x34>
 80079f0:	690b      	ldr	r3, [r1, #16]
 80079f2:	b96b      	cbnz	r3, 8007a10 <_svfiprintf_r+0x34>
 80079f4:	2140      	movs	r1, #64	; 0x40
 80079f6:	f7ff ff3d 	bl	8007874 <_malloc_r>
 80079fa:	6020      	str	r0, [r4, #0]
 80079fc:	6120      	str	r0, [r4, #16]
 80079fe:	b928      	cbnz	r0, 8007a0c <_svfiprintf_r+0x30>
 8007a00:	230c      	movs	r3, #12
 8007a02:	f8c8 3000 	str.w	r3, [r8]
 8007a06:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0a:	e0c8      	b.n	8007b9e <_svfiprintf_r+0x1c2>
 8007a0c:	2340      	movs	r3, #64	; 0x40
 8007a0e:	6163      	str	r3, [r4, #20]
 8007a10:	2300      	movs	r3, #0
 8007a12:	9309      	str	r3, [sp, #36]	; 0x24
 8007a14:	2320      	movs	r3, #32
 8007a16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a1a:	2330      	movs	r3, #48	; 0x30
 8007a1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a20:	9503      	str	r5, [sp, #12]
 8007a22:	f04f 0b01 	mov.w	fp, #1
 8007a26:	4637      	mov	r7, r6
 8007a28:	463d      	mov	r5, r7
 8007a2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007a2e:	b10b      	cbz	r3, 8007a34 <_svfiprintf_r+0x58>
 8007a30:	2b25      	cmp	r3, #37	; 0x25
 8007a32:	d13e      	bne.n	8007ab2 <_svfiprintf_r+0xd6>
 8007a34:	ebb7 0a06 	subs.w	sl, r7, r6
 8007a38:	d00b      	beq.n	8007a52 <_svfiprintf_r+0x76>
 8007a3a:	4653      	mov	r3, sl
 8007a3c:	4632      	mov	r2, r6
 8007a3e:	4621      	mov	r1, r4
 8007a40:	4640      	mov	r0, r8
 8007a42:	f7ff ff71 	bl	8007928 <__ssputs_r>
 8007a46:	3001      	adds	r0, #1
 8007a48:	f000 80a4 	beq.w	8007b94 <_svfiprintf_r+0x1b8>
 8007a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4e:	4453      	add	r3, sl
 8007a50:	9309      	str	r3, [sp, #36]	; 0x24
 8007a52:	783b      	ldrb	r3, [r7, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 809d 	beq.w	8007b94 <_svfiprintf_r+0x1b8>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a64:	9304      	str	r3, [sp, #16]
 8007a66:	9307      	str	r3, [sp, #28]
 8007a68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a6c:	931a      	str	r3, [sp, #104]	; 0x68
 8007a6e:	462f      	mov	r7, r5
 8007a70:	2205      	movs	r2, #5
 8007a72:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007a76:	4850      	ldr	r0, [pc, #320]	; (8007bb8 <_svfiprintf_r+0x1dc>)
 8007a78:	f7f8 fbd2 	bl	8000220 <memchr>
 8007a7c:	9b04      	ldr	r3, [sp, #16]
 8007a7e:	b9d0      	cbnz	r0, 8007ab6 <_svfiprintf_r+0xda>
 8007a80:	06d9      	lsls	r1, r3, #27
 8007a82:	bf44      	itt	mi
 8007a84:	2220      	movmi	r2, #32
 8007a86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a8a:	071a      	lsls	r2, r3, #28
 8007a8c:	bf44      	itt	mi
 8007a8e:	222b      	movmi	r2, #43	; 0x2b
 8007a90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a94:	782a      	ldrb	r2, [r5, #0]
 8007a96:	2a2a      	cmp	r2, #42	; 0x2a
 8007a98:	d015      	beq.n	8007ac6 <_svfiprintf_r+0xea>
 8007a9a:	9a07      	ldr	r2, [sp, #28]
 8007a9c:	462f      	mov	r7, r5
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	250a      	movs	r5, #10
 8007aa2:	4639      	mov	r1, r7
 8007aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aa8:	3b30      	subs	r3, #48	; 0x30
 8007aaa:	2b09      	cmp	r3, #9
 8007aac:	d94d      	bls.n	8007b4a <_svfiprintf_r+0x16e>
 8007aae:	b1b8      	cbz	r0, 8007ae0 <_svfiprintf_r+0x104>
 8007ab0:	e00f      	b.n	8007ad2 <_svfiprintf_r+0xf6>
 8007ab2:	462f      	mov	r7, r5
 8007ab4:	e7b8      	b.n	8007a28 <_svfiprintf_r+0x4c>
 8007ab6:	4a40      	ldr	r2, [pc, #256]	; (8007bb8 <_svfiprintf_r+0x1dc>)
 8007ab8:	1a80      	subs	r0, r0, r2
 8007aba:	fa0b f000 	lsl.w	r0, fp, r0
 8007abe:	4318      	orrs	r0, r3
 8007ac0:	9004      	str	r0, [sp, #16]
 8007ac2:	463d      	mov	r5, r7
 8007ac4:	e7d3      	b.n	8007a6e <_svfiprintf_r+0x92>
 8007ac6:	9a03      	ldr	r2, [sp, #12]
 8007ac8:	1d11      	adds	r1, r2, #4
 8007aca:	6812      	ldr	r2, [r2, #0]
 8007acc:	9103      	str	r1, [sp, #12]
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	db01      	blt.n	8007ad6 <_svfiprintf_r+0xfa>
 8007ad2:	9207      	str	r2, [sp, #28]
 8007ad4:	e004      	b.n	8007ae0 <_svfiprintf_r+0x104>
 8007ad6:	4252      	negs	r2, r2
 8007ad8:	f043 0302 	orr.w	r3, r3, #2
 8007adc:	9207      	str	r2, [sp, #28]
 8007ade:	9304      	str	r3, [sp, #16]
 8007ae0:	783b      	ldrb	r3, [r7, #0]
 8007ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ae4:	d10c      	bne.n	8007b00 <_svfiprintf_r+0x124>
 8007ae6:	787b      	ldrb	r3, [r7, #1]
 8007ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8007aea:	d133      	bne.n	8007b54 <_svfiprintf_r+0x178>
 8007aec:	9b03      	ldr	r3, [sp, #12]
 8007aee:	1d1a      	adds	r2, r3, #4
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	9203      	str	r2, [sp, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bfb8      	it	lt
 8007af8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007afc:	3702      	adds	r7, #2
 8007afe:	9305      	str	r3, [sp, #20]
 8007b00:	4d2e      	ldr	r5, [pc, #184]	; (8007bbc <_svfiprintf_r+0x1e0>)
 8007b02:	7839      	ldrb	r1, [r7, #0]
 8007b04:	2203      	movs	r2, #3
 8007b06:	4628      	mov	r0, r5
 8007b08:	f7f8 fb8a 	bl	8000220 <memchr>
 8007b0c:	b138      	cbz	r0, 8007b1e <_svfiprintf_r+0x142>
 8007b0e:	2340      	movs	r3, #64	; 0x40
 8007b10:	1b40      	subs	r0, r0, r5
 8007b12:	fa03 f000 	lsl.w	r0, r3, r0
 8007b16:	9b04      	ldr	r3, [sp, #16]
 8007b18:	4303      	orrs	r3, r0
 8007b1a:	3701      	adds	r7, #1
 8007b1c:	9304      	str	r3, [sp, #16]
 8007b1e:	7839      	ldrb	r1, [r7, #0]
 8007b20:	4827      	ldr	r0, [pc, #156]	; (8007bc0 <_svfiprintf_r+0x1e4>)
 8007b22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b26:	2206      	movs	r2, #6
 8007b28:	1c7e      	adds	r6, r7, #1
 8007b2a:	f7f8 fb79 	bl	8000220 <memchr>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d038      	beq.n	8007ba4 <_svfiprintf_r+0x1c8>
 8007b32:	4b24      	ldr	r3, [pc, #144]	; (8007bc4 <_svfiprintf_r+0x1e8>)
 8007b34:	bb13      	cbnz	r3, 8007b7c <_svfiprintf_r+0x1a0>
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	3307      	adds	r3, #7
 8007b3a:	f023 0307 	bic.w	r3, r3, #7
 8007b3e:	3308      	adds	r3, #8
 8007b40:	9303      	str	r3, [sp, #12]
 8007b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b44:	444b      	add	r3, r9
 8007b46:	9309      	str	r3, [sp, #36]	; 0x24
 8007b48:	e76d      	b.n	8007a26 <_svfiprintf_r+0x4a>
 8007b4a:	fb05 3202 	mla	r2, r5, r2, r3
 8007b4e:	2001      	movs	r0, #1
 8007b50:	460f      	mov	r7, r1
 8007b52:	e7a6      	b.n	8007aa2 <_svfiprintf_r+0xc6>
 8007b54:	2300      	movs	r3, #0
 8007b56:	3701      	adds	r7, #1
 8007b58:	9305      	str	r3, [sp, #20]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	250a      	movs	r5, #10
 8007b5e:	4638      	mov	r0, r7
 8007b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b64:	3a30      	subs	r2, #48	; 0x30
 8007b66:	2a09      	cmp	r2, #9
 8007b68:	d903      	bls.n	8007b72 <_svfiprintf_r+0x196>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d0c8      	beq.n	8007b00 <_svfiprintf_r+0x124>
 8007b6e:	9105      	str	r1, [sp, #20]
 8007b70:	e7c6      	b.n	8007b00 <_svfiprintf_r+0x124>
 8007b72:	fb05 2101 	mla	r1, r5, r1, r2
 8007b76:	2301      	movs	r3, #1
 8007b78:	4607      	mov	r7, r0
 8007b7a:	e7f0      	b.n	8007b5e <_svfiprintf_r+0x182>
 8007b7c:	ab03      	add	r3, sp, #12
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	4622      	mov	r2, r4
 8007b82:	4b11      	ldr	r3, [pc, #68]	; (8007bc8 <_svfiprintf_r+0x1ec>)
 8007b84:	a904      	add	r1, sp, #16
 8007b86:	4640      	mov	r0, r8
 8007b88:	f7fd fdc2 	bl	8005710 <_printf_float>
 8007b8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b90:	4681      	mov	r9, r0
 8007b92:	d1d6      	bne.n	8007b42 <_svfiprintf_r+0x166>
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	065b      	lsls	r3, r3, #25
 8007b98:	f53f af35 	bmi.w	8007a06 <_svfiprintf_r+0x2a>
 8007b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b9e:	b01d      	add	sp, #116	; 0x74
 8007ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba4:	ab03      	add	r3, sp, #12
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	4622      	mov	r2, r4
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <_svfiprintf_r+0x1ec>)
 8007bac:	a904      	add	r1, sp, #16
 8007bae:	4640      	mov	r0, r8
 8007bb0:	f7fe f864 	bl	8005c7c <_printf_i>
 8007bb4:	e7ea      	b.n	8007b8c <_svfiprintf_r+0x1b0>
 8007bb6:	bf00      	nop
 8007bb8:	08008674 	.word	0x08008674
 8007bbc:	0800867a 	.word	0x0800867a
 8007bc0:	0800867e 	.word	0x0800867e
 8007bc4:	08005711 	.word	0x08005711
 8007bc8:	08007929 	.word	0x08007929

08007bcc <__sfputc_r>:
 8007bcc:	6893      	ldr	r3, [r2, #8]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	b410      	push	{r4}
 8007bd4:	6093      	str	r3, [r2, #8]
 8007bd6:	da08      	bge.n	8007bea <__sfputc_r+0x1e>
 8007bd8:	6994      	ldr	r4, [r2, #24]
 8007bda:	42a3      	cmp	r3, r4
 8007bdc:	db01      	blt.n	8007be2 <__sfputc_r+0x16>
 8007bde:	290a      	cmp	r1, #10
 8007be0:	d103      	bne.n	8007bea <__sfputc_r+0x1e>
 8007be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007be6:	f7fe ba0b 	b.w	8006000 <__swbuf_r>
 8007bea:	6813      	ldr	r3, [r2, #0]
 8007bec:	1c58      	adds	r0, r3, #1
 8007bee:	6010      	str	r0, [r2, #0]
 8007bf0:	7019      	strb	r1, [r3, #0]
 8007bf2:	4608      	mov	r0, r1
 8007bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <__sfputs_r>:
 8007bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	460f      	mov	r7, r1
 8007c00:	4614      	mov	r4, r2
 8007c02:	18d5      	adds	r5, r2, r3
 8007c04:	42ac      	cmp	r4, r5
 8007c06:	d101      	bne.n	8007c0c <__sfputs_r+0x12>
 8007c08:	2000      	movs	r0, #0
 8007c0a:	e007      	b.n	8007c1c <__sfputs_r+0x22>
 8007c0c:	463a      	mov	r2, r7
 8007c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7ff ffda 	bl	8007bcc <__sfputc_r>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	d1f3      	bne.n	8007c04 <__sfputs_r+0xa>
 8007c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c20 <_vfiprintf_r>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	460c      	mov	r4, r1
 8007c26:	b09d      	sub	sp, #116	; 0x74
 8007c28:	4617      	mov	r7, r2
 8007c2a:	461d      	mov	r5, r3
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	b118      	cbz	r0, 8007c38 <_vfiprintf_r+0x18>
 8007c30:	6983      	ldr	r3, [r0, #24]
 8007c32:	b90b      	cbnz	r3, 8007c38 <_vfiprintf_r+0x18>
 8007c34:	f7ff f9d8 	bl	8006fe8 <__sinit>
 8007c38:	4b7c      	ldr	r3, [pc, #496]	; (8007e2c <_vfiprintf_r+0x20c>)
 8007c3a:	429c      	cmp	r4, r3
 8007c3c:	d158      	bne.n	8007cf0 <_vfiprintf_r+0xd0>
 8007c3e:	6874      	ldr	r4, [r6, #4]
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	0718      	lsls	r0, r3, #28
 8007c44:	d55e      	bpl.n	8007d04 <_vfiprintf_r+0xe4>
 8007c46:	6923      	ldr	r3, [r4, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d05b      	beq.n	8007d04 <_vfiprintf_r+0xe4>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c50:	2320      	movs	r3, #32
 8007c52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c56:	2330      	movs	r3, #48	; 0x30
 8007c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c5c:	9503      	str	r5, [sp, #12]
 8007c5e:	f04f 0b01 	mov.w	fp, #1
 8007c62:	46b8      	mov	r8, r7
 8007c64:	4645      	mov	r5, r8
 8007c66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007c6a:	b10b      	cbz	r3, 8007c70 <_vfiprintf_r+0x50>
 8007c6c:	2b25      	cmp	r3, #37	; 0x25
 8007c6e:	d154      	bne.n	8007d1a <_vfiprintf_r+0xfa>
 8007c70:	ebb8 0a07 	subs.w	sl, r8, r7
 8007c74:	d00b      	beq.n	8007c8e <_vfiprintf_r+0x6e>
 8007c76:	4653      	mov	r3, sl
 8007c78:	463a      	mov	r2, r7
 8007c7a:	4621      	mov	r1, r4
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f7ff ffbc 	bl	8007bfa <__sfputs_r>
 8007c82:	3001      	adds	r0, #1
 8007c84:	f000 80c2 	beq.w	8007e0c <_vfiprintf_r+0x1ec>
 8007c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c8a:	4453      	add	r3, sl
 8007c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8e:	f898 3000 	ldrb.w	r3, [r8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 80ba 	beq.w	8007e0c <_vfiprintf_r+0x1ec>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ca2:	9304      	str	r3, [sp, #16]
 8007ca4:	9307      	str	r3, [sp, #28]
 8007ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007caa:	931a      	str	r3, [sp, #104]	; 0x68
 8007cac:	46a8      	mov	r8, r5
 8007cae:	2205      	movs	r2, #5
 8007cb0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007cb4:	485e      	ldr	r0, [pc, #376]	; (8007e30 <_vfiprintf_r+0x210>)
 8007cb6:	f7f8 fab3 	bl	8000220 <memchr>
 8007cba:	9b04      	ldr	r3, [sp, #16]
 8007cbc:	bb78      	cbnz	r0, 8007d1e <_vfiprintf_r+0xfe>
 8007cbe:	06d9      	lsls	r1, r3, #27
 8007cc0:	bf44      	itt	mi
 8007cc2:	2220      	movmi	r2, #32
 8007cc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007cc8:	071a      	lsls	r2, r3, #28
 8007cca:	bf44      	itt	mi
 8007ccc:	222b      	movmi	r2, #43	; 0x2b
 8007cce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007cd2:	782a      	ldrb	r2, [r5, #0]
 8007cd4:	2a2a      	cmp	r2, #42	; 0x2a
 8007cd6:	d02a      	beq.n	8007d2e <_vfiprintf_r+0x10e>
 8007cd8:	9a07      	ldr	r2, [sp, #28]
 8007cda:	46a8      	mov	r8, r5
 8007cdc:	2000      	movs	r0, #0
 8007cde:	250a      	movs	r5, #10
 8007ce0:	4641      	mov	r1, r8
 8007ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ce6:	3b30      	subs	r3, #48	; 0x30
 8007ce8:	2b09      	cmp	r3, #9
 8007cea:	d969      	bls.n	8007dc0 <_vfiprintf_r+0x1a0>
 8007cec:	b360      	cbz	r0, 8007d48 <_vfiprintf_r+0x128>
 8007cee:	e024      	b.n	8007d3a <_vfiprintf_r+0x11a>
 8007cf0:	4b50      	ldr	r3, [pc, #320]	; (8007e34 <_vfiprintf_r+0x214>)
 8007cf2:	429c      	cmp	r4, r3
 8007cf4:	d101      	bne.n	8007cfa <_vfiprintf_r+0xda>
 8007cf6:	68b4      	ldr	r4, [r6, #8]
 8007cf8:	e7a2      	b.n	8007c40 <_vfiprintf_r+0x20>
 8007cfa:	4b4f      	ldr	r3, [pc, #316]	; (8007e38 <_vfiprintf_r+0x218>)
 8007cfc:	429c      	cmp	r4, r3
 8007cfe:	bf08      	it	eq
 8007d00:	68f4      	ldreq	r4, [r6, #12]
 8007d02:	e79d      	b.n	8007c40 <_vfiprintf_r+0x20>
 8007d04:	4621      	mov	r1, r4
 8007d06:	4630      	mov	r0, r6
 8007d08:	f7fe f9cc 	bl	80060a4 <__swsetup_r>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d09d      	beq.n	8007c4c <_vfiprintf_r+0x2c>
 8007d10:	f04f 30ff 	mov.w	r0, #4294967295
 8007d14:	b01d      	add	sp, #116	; 0x74
 8007d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1a:	46a8      	mov	r8, r5
 8007d1c:	e7a2      	b.n	8007c64 <_vfiprintf_r+0x44>
 8007d1e:	4a44      	ldr	r2, [pc, #272]	; (8007e30 <_vfiprintf_r+0x210>)
 8007d20:	1a80      	subs	r0, r0, r2
 8007d22:	fa0b f000 	lsl.w	r0, fp, r0
 8007d26:	4318      	orrs	r0, r3
 8007d28:	9004      	str	r0, [sp, #16]
 8007d2a:	4645      	mov	r5, r8
 8007d2c:	e7be      	b.n	8007cac <_vfiprintf_r+0x8c>
 8007d2e:	9a03      	ldr	r2, [sp, #12]
 8007d30:	1d11      	adds	r1, r2, #4
 8007d32:	6812      	ldr	r2, [r2, #0]
 8007d34:	9103      	str	r1, [sp, #12]
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	db01      	blt.n	8007d3e <_vfiprintf_r+0x11e>
 8007d3a:	9207      	str	r2, [sp, #28]
 8007d3c:	e004      	b.n	8007d48 <_vfiprintf_r+0x128>
 8007d3e:	4252      	negs	r2, r2
 8007d40:	f043 0302 	orr.w	r3, r3, #2
 8007d44:	9207      	str	r2, [sp, #28]
 8007d46:	9304      	str	r3, [sp, #16]
 8007d48:	f898 3000 	ldrb.w	r3, [r8]
 8007d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d4e:	d10e      	bne.n	8007d6e <_vfiprintf_r+0x14e>
 8007d50:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007d54:	2b2a      	cmp	r3, #42	; 0x2a
 8007d56:	d138      	bne.n	8007dca <_vfiprintf_r+0x1aa>
 8007d58:	9b03      	ldr	r3, [sp, #12]
 8007d5a:	1d1a      	adds	r2, r3, #4
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	9203      	str	r2, [sp, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bfb8      	it	lt
 8007d64:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d68:	f108 0802 	add.w	r8, r8, #2
 8007d6c:	9305      	str	r3, [sp, #20]
 8007d6e:	4d33      	ldr	r5, [pc, #204]	; (8007e3c <_vfiprintf_r+0x21c>)
 8007d70:	f898 1000 	ldrb.w	r1, [r8]
 8007d74:	2203      	movs	r2, #3
 8007d76:	4628      	mov	r0, r5
 8007d78:	f7f8 fa52 	bl	8000220 <memchr>
 8007d7c:	b140      	cbz	r0, 8007d90 <_vfiprintf_r+0x170>
 8007d7e:	2340      	movs	r3, #64	; 0x40
 8007d80:	1b40      	subs	r0, r0, r5
 8007d82:	fa03 f000 	lsl.w	r0, r3, r0
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	4303      	orrs	r3, r0
 8007d8a:	f108 0801 	add.w	r8, r8, #1
 8007d8e:	9304      	str	r3, [sp, #16]
 8007d90:	f898 1000 	ldrb.w	r1, [r8]
 8007d94:	482a      	ldr	r0, [pc, #168]	; (8007e40 <_vfiprintf_r+0x220>)
 8007d96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d9a:	2206      	movs	r2, #6
 8007d9c:	f108 0701 	add.w	r7, r8, #1
 8007da0:	f7f8 fa3e 	bl	8000220 <memchr>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d037      	beq.n	8007e18 <_vfiprintf_r+0x1f8>
 8007da8:	4b26      	ldr	r3, [pc, #152]	; (8007e44 <_vfiprintf_r+0x224>)
 8007daa:	bb1b      	cbnz	r3, 8007df4 <_vfiprintf_r+0x1d4>
 8007dac:	9b03      	ldr	r3, [sp, #12]
 8007dae:	3307      	adds	r3, #7
 8007db0:	f023 0307 	bic.w	r3, r3, #7
 8007db4:	3308      	adds	r3, #8
 8007db6:	9303      	str	r3, [sp, #12]
 8007db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dba:	444b      	add	r3, r9
 8007dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dbe:	e750      	b.n	8007c62 <_vfiprintf_r+0x42>
 8007dc0:	fb05 3202 	mla	r2, r5, r2, r3
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	4688      	mov	r8, r1
 8007dc8:	e78a      	b.n	8007ce0 <_vfiprintf_r+0xc0>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f108 0801 	add.w	r8, r8, #1
 8007dd0:	9305      	str	r3, [sp, #20]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	250a      	movs	r5, #10
 8007dd6:	4640      	mov	r0, r8
 8007dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ddc:	3a30      	subs	r2, #48	; 0x30
 8007dde:	2a09      	cmp	r2, #9
 8007de0:	d903      	bls.n	8007dea <_vfiprintf_r+0x1ca>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0c3      	beq.n	8007d6e <_vfiprintf_r+0x14e>
 8007de6:	9105      	str	r1, [sp, #20]
 8007de8:	e7c1      	b.n	8007d6e <_vfiprintf_r+0x14e>
 8007dea:	fb05 2101 	mla	r1, r5, r1, r2
 8007dee:	2301      	movs	r3, #1
 8007df0:	4680      	mov	r8, r0
 8007df2:	e7f0      	b.n	8007dd6 <_vfiprintf_r+0x1b6>
 8007df4:	ab03      	add	r3, sp, #12
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	4622      	mov	r2, r4
 8007dfa:	4b13      	ldr	r3, [pc, #76]	; (8007e48 <_vfiprintf_r+0x228>)
 8007dfc:	a904      	add	r1, sp, #16
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f7fd fc86 	bl	8005710 <_printf_float>
 8007e04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e08:	4681      	mov	r9, r0
 8007e0a:	d1d5      	bne.n	8007db8 <_vfiprintf_r+0x198>
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	065b      	lsls	r3, r3, #25
 8007e10:	f53f af7e 	bmi.w	8007d10 <_vfiprintf_r+0xf0>
 8007e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e16:	e77d      	b.n	8007d14 <_vfiprintf_r+0xf4>
 8007e18:	ab03      	add	r3, sp, #12
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	4b0a      	ldr	r3, [pc, #40]	; (8007e48 <_vfiprintf_r+0x228>)
 8007e20:	a904      	add	r1, sp, #16
 8007e22:	4630      	mov	r0, r6
 8007e24:	f7fd ff2a 	bl	8005c7c <_printf_i>
 8007e28:	e7ec      	b.n	8007e04 <_vfiprintf_r+0x1e4>
 8007e2a:	bf00      	nop
 8007e2c:	08008534 	.word	0x08008534
 8007e30:	08008674 	.word	0x08008674
 8007e34:	08008554 	.word	0x08008554
 8007e38:	08008514 	.word	0x08008514
 8007e3c:	0800867a 	.word	0x0800867a
 8007e40:	0800867e 	.word	0x0800867e
 8007e44:	08005711 	.word	0x08005711
 8007e48:	08007bfb 	.word	0x08007bfb

08007e4c <_putc_r>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	460d      	mov	r5, r1
 8007e50:	4614      	mov	r4, r2
 8007e52:	4606      	mov	r6, r0
 8007e54:	b118      	cbz	r0, 8007e5e <_putc_r+0x12>
 8007e56:	6983      	ldr	r3, [r0, #24]
 8007e58:	b90b      	cbnz	r3, 8007e5e <_putc_r+0x12>
 8007e5a:	f7ff f8c5 	bl	8006fe8 <__sinit>
 8007e5e:	4b13      	ldr	r3, [pc, #76]	; (8007eac <_putc_r+0x60>)
 8007e60:	429c      	cmp	r4, r3
 8007e62:	d112      	bne.n	8007e8a <_putc_r+0x3e>
 8007e64:	6874      	ldr	r4, [r6, #4]
 8007e66:	68a3      	ldr	r3, [r4, #8]
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	60a3      	str	r3, [r4, #8]
 8007e6e:	da16      	bge.n	8007e9e <_putc_r+0x52>
 8007e70:	69a2      	ldr	r2, [r4, #24]
 8007e72:	4293      	cmp	r3, r2
 8007e74:	db02      	blt.n	8007e7c <_putc_r+0x30>
 8007e76:	b2eb      	uxtb	r3, r5
 8007e78:	2b0a      	cmp	r3, #10
 8007e7a:	d110      	bne.n	8007e9e <_putc_r+0x52>
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	4629      	mov	r1, r5
 8007e80:	4630      	mov	r0, r6
 8007e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e86:	f7fe b8bb 	b.w	8006000 <__swbuf_r>
 8007e8a:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <_putc_r+0x64>)
 8007e8c:	429c      	cmp	r4, r3
 8007e8e:	d101      	bne.n	8007e94 <_putc_r+0x48>
 8007e90:	68b4      	ldr	r4, [r6, #8]
 8007e92:	e7e8      	b.n	8007e66 <_putc_r+0x1a>
 8007e94:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <_putc_r+0x68>)
 8007e96:	429c      	cmp	r4, r3
 8007e98:	bf08      	it	eq
 8007e9a:	68f4      	ldreq	r4, [r6, #12]
 8007e9c:	e7e3      	b.n	8007e66 <_putc_r+0x1a>
 8007e9e:	6823      	ldr	r3, [r4, #0]
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	6022      	str	r2, [r4, #0]
 8007ea4:	701d      	strb	r5, [r3, #0]
 8007ea6:	b2e8      	uxtb	r0, r5
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
 8007eaa:	bf00      	nop
 8007eac:	08008534 	.word	0x08008534
 8007eb0:	08008554 	.word	0x08008554
 8007eb4:	08008514 	.word	0x08008514

08007eb8 <_sbrk_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4c06      	ldr	r4, [pc, #24]	; (8007ed4 <_sbrk_r+0x1c>)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	6023      	str	r3, [r4, #0]
 8007ec4:	f7f9 fe66 	bl	8001b94 <_sbrk>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	d102      	bne.n	8007ed2 <_sbrk_r+0x1a>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	b103      	cbz	r3, 8007ed2 <_sbrk_r+0x1a>
 8007ed0:	602b      	str	r3, [r5, #0]
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	200003a8 	.word	0x200003a8

08007ed8 <__sread>:
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	460c      	mov	r4, r1
 8007edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee0:	f000 f8e8 	bl	80080b4 <_read_r>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	bfab      	itete	ge
 8007ee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eea:	89a3      	ldrhlt	r3, [r4, #12]
 8007eec:	181b      	addge	r3, r3, r0
 8007eee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ef2:	bfac      	ite	ge
 8007ef4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ef6:	81a3      	strhlt	r3, [r4, #12]
 8007ef8:	bd10      	pop	{r4, pc}

08007efa <__swrite>:
 8007efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efe:	461f      	mov	r7, r3
 8007f00:	898b      	ldrh	r3, [r1, #12]
 8007f02:	05db      	lsls	r3, r3, #23
 8007f04:	4605      	mov	r5, r0
 8007f06:	460c      	mov	r4, r1
 8007f08:	4616      	mov	r6, r2
 8007f0a:	d505      	bpl.n	8007f18 <__swrite+0x1e>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f14:	f000 f868 	bl	8007fe8 <_lseek_r>
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f22:	81a3      	strh	r3, [r4, #12]
 8007f24:	4632      	mov	r2, r6
 8007f26:	463b      	mov	r3, r7
 8007f28:	4628      	mov	r0, r5
 8007f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2e:	f000 b817 	b.w	8007f60 <_write_r>

08007f32 <__sseek>:
 8007f32:	b510      	push	{r4, lr}
 8007f34:	460c      	mov	r4, r1
 8007f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3a:	f000 f855 	bl	8007fe8 <_lseek_r>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	bf15      	itete	ne
 8007f44:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f4e:	81a3      	strheq	r3, [r4, #12]
 8007f50:	bf18      	it	ne
 8007f52:	81a3      	strhne	r3, [r4, #12]
 8007f54:	bd10      	pop	{r4, pc}

08007f56 <__sclose>:
 8007f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5a:	f000 b813 	b.w	8007f84 <_close_r>
	...

08007f60 <_write_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4c07      	ldr	r4, [pc, #28]	; (8007f80 <_write_r+0x20>)
 8007f64:	4605      	mov	r5, r0
 8007f66:	4608      	mov	r0, r1
 8007f68:	4611      	mov	r1, r2
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	6022      	str	r2, [r4, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f7f9 fdbf 	bl	8001af2 <_write>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_write_r+0x1e>
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_write_r+0x1e>
 8007f7c:	602b      	str	r3, [r5, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	200003a8 	.word	0x200003a8

08007f84 <_close_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4c06      	ldr	r4, [pc, #24]	; (8007fa0 <_close_r+0x1c>)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4605      	mov	r5, r0
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	6023      	str	r3, [r4, #0]
 8007f90:	f7f9 fdcb 	bl	8001b2a <_close>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d102      	bne.n	8007f9e <_close_r+0x1a>
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	b103      	cbz	r3, 8007f9e <_close_r+0x1a>
 8007f9c:	602b      	str	r3, [r5, #0]
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
 8007fa0:	200003a8 	.word	0x200003a8

08007fa4 <_fstat_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4c07      	ldr	r4, [pc, #28]	; (8007fc4 <_fstat_r+0x20>)
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4605      	mov	r5, r0
 8007fac:	4608      	mov	r0, r1
 8007fae:	4611      	mov	r1, r2
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	f7f9 fdc6 	bl	8001b42 <_fstat>
 8007fb6:	1c43      	adds	r3, r0, #1
 8007fb8:	d102      	bne.n	8007fc0 <_fstat_r+0x1c>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	b103      	cbz	r3, 8007fc0 <_fstat_r+0x1c>
 8007fbe:	602b      	str	r3, [r5, #0]
 8007fc0:	bd38      	pop	{r3, r4, r5, pc}
 8007fc2:	bf00      	nop
 8007fc4:	200003a8 	.word	0x200003a8

08007fc8 <_isatty_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4c06      	ldr	r4, [pc, #24]	; (8007fe4 <_isatty_r+0x1c>)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4605      	mov	r5, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	6023      	str	r3, [r4, #0]
 8007fd4:	f7f9 fdc5 	bl	8001b62 <_isatty>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_isatty_r+0x1a>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_isatty_r+0x1a>
 8007fe0:	602b      	str	r3, [r5, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	200003a8 	.word	0x200003a8

08007fe8 <_lseek_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4c07      	ldr	r4, [pc, #28]	; (8008008 <_lseek_r+0x20>)
 8007fec:	4605      	mov	r5, r0
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	6022      	str	r2, [r4, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f7f9 fdbe 	bl	8001b78 <_lseek>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_lseek_r+0x1e>
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	b103      	cbz	r3, 8008006 <_lseek_r+0x1e>
 8008004:	602b      	str	r3, [r5, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	200003a8 	.word	0x200003a8

0800800c <__ascii_mbtowc>:
 800800c:	b082      	sub	sp, #8
 800800e:	b901      	cbnz	r1, 8008012 <__ascii_mbtowc+0x6>
 8008010:	a901      	add	r1, sp, #4
 8008012:	b142      	cbz	r2, 8008026 <__ascii_mbtowc+0x1a>
 8008014:	b14b      	cbz	r3, 800802a <__ascii_mbtowc+0x1e>
 8008016:	7813      	ldrb	r3, [r2, #0]
 8008018:	600b      	str	r3, [r1, #0]
 800801a:	7812      	ldrb	r2, [r2, #0]
 800801c:	1c10      	adds	r0, r2, #0
 800801e:	bf18      	it	ne
 8008020:	2001      	movne	r0, #1
 8008022:	b002      	add	sp, #8
 8008024:	4770      	bx	lr
 8008026:	4610      	mov	r0, r2
 8008028:	e7fb      	b.n	8008022 <__ascii_mbtowc+0x16>
 800802a:	f06f 0001 	mvn.w	r0, #1
 800802e:	e7f8      	b.n	8008022 <__ascii_mbtowc+0x16>

08008030 <memmove>:
 8008030:	4288      	cmp	r0, r1
 8008032:	b510      	push	{r4, lr}
 8008034:	eb01 0302 	add.w	r3, r1, r2
 8008038:	d807      	bhi.n	800804a <memmove+0x1a>
 800803a:	1e42      	subs	r2, r0, #1
 800803c:	4299      	cmp	r1, r3
 800803e:	d00a      	beq.n	8008056 <memmove+0x26>
 8008040:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008044:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008048:	e7f8      	b.n	800803c <memmove+0xc>
 800804a:	4283      	cmp	r3, r0
 800804c:	d9f5      	bls.n	800803a <memmove+0xa>
 800804e:	1881      	adds	r1, r0, r2
 8008050:	1ad2      	subs	r2, r2, r3
 8008052:	42d3      	cmn	r3, r2
 8008054:	d100      	bne.n	8008058 <memmove+0x28>
 8008056:	bd10      	pop	{r4, pc}
 8008058:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800805c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008060:	e7f7      	b.n	8008052 <memmove+0x22>

08008062 <__malloc_lock>:
 8008062:	4770      	bx	lr

08008064 <__malloc_unlock>:
 8008064:	4770      	bx	lr

08008066 <_realloc_r>:
 8008066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008068:	4607      	mov	r7, r0
 800806a:	4614      	mov	r4, r2
 800806c:	460e      	mov	r6, r1
 800806e:	b921      	cbnz	r1, 800807a <_realloc_r+0x14>
 8008070:	4611      	mov	r1, r2
 8008072:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008076:	f7ff bbfd 	b.w	8007874 <_malloc_r>
 800807a:	b922      	cbnz	r2, 8008086 <_realloc_r+0x20>
 800807c:	f7ff fbac 	bl	80077d8 <_free_r>
 8008080:	4625      	mov	r5, r4
 8008082:	4628      	mov	r0, r5
 8008084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008086:	f000 f834 	bl	80080f2 <_malloc_usable_size_r>
 800808a:	42a0      	cmp	r0, r4
 800808c:	d20f      	bcs.n	80080ae <_realloc_r+0x48>
 800808e:	4621      	mov	r1, r4
 8008090:	4638      	mov	r0, r7
 8008092:	f7ff fbef 	bl	8007874 <_malloc_r>
 8008096:	4605      	mov	r5, r0
 8008098:	2800      	cmp	r0, #0
 800809a:	d0f2      	beq.n	8008082 <_realloc_r+0x1c>
 800809c:	4631      	mov	r1, r6
 800809e:	4622      	mov	r2, r4
 80080a0:	f7ff f8a6 	bl	80071f0 <memcpy>
 80080a4:	4631      	mov	r1, r6
 80080a6:	4638      	mov	r0, r7
 80080a8:	f7ff fb96 	bl	80077d8 <_free_r>
 80080ac:	e7e9      	b.n	8008082 <_realloc_r+0x1c>
 80080ae:	4635      	mov	r5, r6
 80080b0:	e7e7      	b.n	8008082 <_realloc_r+0x1c>
	...

080080b4 <_read_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4c07      	ldr	r4, [pc, #28]	; (80080d4 <_read_r+0x20>)
 80080b8:	4605      	mov	r5, r0
 80080ba:	4608      	mov	r0, r1
 80080bc:	4611      	mov	r1, r2
 80080be:	2200      	movs	r2, #0
 80080c0:	6022      	str	r2, [r4, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	f7f9 fcf8 	bl	8001ab8 <_read>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d102      	bne.n	80080d2 <_read_r+0x1e>
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	b103      	cbz	r3, 80080d2 <_read_r+0x1e>
 80080d0:	602b      	str	r3, [r5, #0]
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	200003a8 	.word	0x200003a8

080080d8 <__ascii_wctomb>:
 80080d8:	b149      	cbz	r1, 80080ee <__ascii_wctomb+0x16>
 80080da:	2aff      	cmp	r2, #255	; 0xff
 80080dc:	bf85      	ittet	hi
 80080de:	238a      	movhi	r3, #138	; 0x8a
 80080e0:	6003      	strhi	r3, [r0, #0]
 80080e2:	700a      	strbls	r2, [r1, #0]
 80080e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80080e8:	bf98      	it	ls
 80080ea:	2001      	movls	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	4608      	mov	r0, r1
 80080f0:	4770      	bx	lr

080080f2 <_malloc_usable_size_r>:
 80080f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f6:	1f18      	subs	r0, r3, #4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	bfbc      	itt	lt
 80080fc:	580b      	ldrlt	r3, [r1, r0]
 80080fe:	18c0      	addlt	r0, r0, r3
 8008100:	4770      	bx	lr
	...

08008104 <fmod>:
 8008104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008108:	ed2d 8b02 	vpush	{d8}
 800810c:	b08b      	sub	sp, #44	; 0x2c
 800810e:	ec55 4b10 	vmov	r4, r5, d0
 8008112:	ec57 6b11 	vmov	r6, r7, d1
 8008116:	f000 f859 	bl	80081cc <__ieee754_fmod>
 800811a:	4b2a      	ldr	r3, [pc, #168]	; (80081c4 <fmod+0xc0>)
 800811c:	eeb0 8a40 	vmov.f32	s16, s0
 8008120:	eef0 8a60 	vmov.f32	s17, s1
 8008124:	f993 8000 	ldrsb.w	r8, [r3]
 8008128:	f1b8 3fff 	cmp.w	r8, #4294967295
 800812c:	d030      	beq.n	8008190 <fmod+0x8c>
 800812e:	4632      	mov	r2, r6
 8008130:	463b      	mov	r3, r7
 8008132:	4630      	mov	r0, r6
 8008134:	4639      	mov	r1, r7
 8008136:	f7f8 fd19 	bl	8000b6c <__aeabi_dcmpun>
 800813a:	bb48      	cbnz	r0, 8008190 <fmod+0x8c>
 800813c:	4622      	mov	r2, r4
 800813e:	462b      	mov	r3, r5
 8008140:	4620      	mov	r0, r4
 8008142:	4629      	mov	r1, r5
 8008144:	f7f8 fd12 	bl	8000b6c <__aeabi_dcmpun>
 8008148:	4681      	mov	r9, r0
 800814a:	bb08      	cbnz	r0, 8008190 <fmod+0x8c>
 800814c:	2200      	movs	r2, #0
 800814e:	2300      	movs	r3, #0
 8008150:	4630      	mov	r0, r6
 8008152:	4639      	mov	r1, r7
 8008154:	f7f8 fcd8 	bl	8000b08 <__aeabi_dcmpeq>
 8008158:	b1d0      	cbz	r0, 8008190 <fmod+0x8c>
 800815a:	2301      	movs	r3, #1
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	4b1a      	ldr	r3, [pc, #104]	; (80081c8 <fmod+0xc4>)
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008166:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800816a:	f8cd 9020 	str.w	r9, [sp, #32]
 800816e:	f1b8 0f00 	cmp.w	r8, #0
 8008172:	d116      	bne.n	80081a2 <fmod+0x9e>
 8008174:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008178:	4668      	mov	r0, sp
 800817a:	f000 f939 	bl	80083f0 <matherr>
 800817e:	b1d8      	cbz	r0, 80081b8 <fmod+0xb4>
 8008180:	9b08      	ldr	r3, [sp, #32]
 8008182:	b11b      	cbz	r3, 800818c <fmod+0x88>
 8008184:	f7fd f9fe 	bl	8005584 <__errno>
 8008188:	9b08      	ldr	r3, [sp, #32]
 800818a:	6003      	str	r3, [r0, #0]
 800818c:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008190:	eeb0 0a48 	vmov.f32	s0, s16
 8008194:	eef0 0a68 	vmov.f32	s1, s17
 8008198:	b00b      	add	sp, #44	; 0x2c
 800819a:	ecbd 8b02 	vpop	{d8}
 800819e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081a2:	2200      	movs	r2, #0
 80081a4:	2300      	movs	r3, #0
 80081a6:	4610      	mov	r0, r2
 80081a8:	4619      	mov	r1, r3
 80081aa:	f7f8 fb6f 	bl	800088c <__aeabi_ddiv>
 80081ae:	f1b8 0f02 	cmp.w	r8, #2
 80081b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80081b6:	d1df      	bne.n	8008178 <fmod+0x74>
 80081b8:	f7fd f9e4 	bl	8005584 <__errno>
 80081bc:	2321      	movs	r3, #33	; 0x21
 80081be:	6003      	str	r3, [r0, #0]
 80081c0:	e7de      	b.n	8008180 <fmod+0x7c>
 80081c2:	bf00      	nop
 80081c4:	200001dc 	.word	0x200001dc
 80081c8:	08008790 	.word	0x08008790

080081cc <__ieee754_fmod>:
 80081cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d0:	ec53 2b11 	vmov	r2, r3, d1
 80081d4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 80081d8:	ea5e 0402 	orrs.w	r4, lr, r2
 80081dc:	ec51 0b10 	vmov	r0, r1, d0
 80081e0:	461e      	mov	r6, r3
 80081e2:	ee11 5a10 	vmov	r5, s2
 80081e6:	4694      	mov	ip, r2
 80081e8:	d00c      	beq.n	8008204 <__ieee754_fmod+0x38>
 80081ea:	4c7a      	ldr	r4, [pc, #488]	; (80083d4 <__ieee754_fmod+0x208>)
 80081ec:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80081f0:	45a0      	cmp	r8, r4
 80081f2:	4689      	mov	r9, r1
 80081f4:	dc06      	bgt.n	8008204 <__ieee754_fmod+0x38>
 80081f6:	4254      	negs	r4, r2
 80081f8:	4314      	orrs	r4, r2
 80081fa:	4f77      	ldr	r7, [pc, #476]	; (80083d8 <__ieee754_fmod+0x20c>)
 80081fc:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8008200:	42bc      	cmp	r4, r7
 8008202:	d909      	bls.n	8008218 <__ieee754_fmod+0x4c>
 8008204:	f7f8 fa18 	bl	8000638 <__aeabi_dmul>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	f7f8 fb3e 	bl	800088c <__aeabi_ddiv>
 8008210:	ec41 0b10 	vmov	d0, r0, r1
 8008214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008218:	45f0      	cmp	r8, lr
 800821a:	ee10 2a10 	vmov	r2, s0
 800821e:	4607      	mov	r7, r0
 8008220:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8008224:	dc0a      	bgt.n	800823c <__ieee754_fmod+0x70>
 8008226:	dbf3      	blt.n	8008210 <__ieee754_fmod+0x44>
 8008228:	42a8      	cmp	r0, r5
 800822a:	d3f1      	bcc.n	8008210 <__ieee754_fmod+0x44>
 800822c:	d106      	bne.n	800823c <__ieee754_fmod+0x70>
 800822e:	496b      	ldr	r1, [pc, #428]	; (80083dc <__ieee754_fmod+0x210>)
 8008230:	0fe4      	lsrs	r4, r4, #31
 8008232:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8008236:	e9d4 0100 	ldrd	r0, r1, [r4]
 800823a:	e7e9      	b.n	8008210 <__ieee754_fmod+0x44>
 800823c:	4b68      	ldr	r3, [pc, #416]	; (80083e0 <__ieee754_fmod+0x214>)
 800823e:	4598      	cmp	r8, r3
 8008240:	dc49      	bgt.n	80082d6 <__ieee754_fmod+0x10a>
 8008242:	f1b8 0f00 	cmp.w	r8, #0
 8008246:	d13d      	bne.n	80082c4 <__ieee754_fmod+0xf8>
 8008248:	4866      	ldr	r0, [pc, #408]	; (80083e4 <__ieee754_fmod+0x218>)
 800824a:	4611      	mov	r1, r2
 800824c:	2900      	cmp	r1, #0
 800824e:	dc36      	bgt.n	80082be <__ieee754_fmod+0xf2>
 8008250:	459e      	cmp	lr, r3
 8008252:	dc51      	bgt.n	80082f8 <__ieee754_fmod+0x12c>
 8008254:	f1be 0f00 	cmp.w	lr, #0
 8008258:	d145      	bne.n	80082e6 <__ieee754_fmod+0x11a>
 800825a:	4b62      	ldr	r3, [pc, #392]	; (80083e4 <__ieee754_fmod+0x218>)
 800825c:	4629      	mov	r1, r5
 800825e:	2900      	cmp	r1, #0
 8008260:	dc3e      	bgt.n	80082e0 <__ieee754_fmod+0x114>
 8008262:	4961      	ldr	r1, [pc, #388]	; (80083e8 <__ieee754_fmod+0x21c>)
 8008264:	4288      	cmp	r0, r1
 8008266:	db4c      	blt.n	8008302 <__ieee754_fmod+0x136>
 8008268:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800826c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008270:	4a5d      	ldr	r2, [pc, #372]	; (80083e8 <__ieee754_fmod+0x21c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	db59      	blt.n	800832a <__ieee754_fmod+0x15e>
 8008276:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800827a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800827e:	1ac0      	subs	r0, r0, r3
 8008280:	1b8a      	subs	r2, r1, r6
 8008282:	eba7 050c 	sub.w	r5, r7, ip
 8008286:	2800      	cmp	r0, #0
 8008288:	d166      	bne.n	8008358 <__ieee754_fmod+0x18c>
 800828a:	4567      	cmp	r7, ip
 800828c:	bf38      	it	cc
 800828e:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8008292:	2a00      	cmp	r2, #0
 8008294:	bfbc      	itt	lt
 8008296:	463d      	movlt	r5, r7
 8008298:	460a      	movlt	r2, r1
 800829a:	ea52 0105 	orrs.w	r1, r2, r5
 800829e:	d0c6      	beq.n	800822e <__ieee754_fmod+0x62>
 80082a0:	494f      	ldr	r1, [pc, #316]	; (80083e0 <__ieee754_fmod+0x214>)
 80082a2:	428a      	cmp	r2, r1
 80082a4:	dd6d      	ble.n	8008382 <__ieee754_fmod+0x1b6>
 80082a6:	4950      	ldr	r1, [pc, #320]	; (80083e8 <__ieee754_fmod+0x21c>)
 80082a8:	428b      	cmp	r3, r1
 80082aa:	db70      	blt.n	800838e <__ieee754_fmod+0x1c2>
 80082ac:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 80082b0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80082b4:	4314      	orrs	r4, r2
 80082b6:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 80082ba:	4628      	mov	r0, r5
 80082bc:	e7a8      	b.n	8008210 <__ieee754_fmod+0x44>
 80082be:	3801      	subs	r0, #1
 80082c0:	0049      	lsls	r1, r1, #1
 80082c2:	e7c3      	b.n	800824c <__ieee754_fmod+0x80>
 80082c4:	4848      	ldr	r0, [pc, #288]	; (80083e8 <__ieee754_fmod+0x21c>)
 80082c6:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 80082ca:	0049      	lsls	r1, r1, #1
 80082cc:	2900      	cmp	r1, #0
 80082ce:	f100 30ff 	add.w	r0, r0, #4294967295
 80082d2:	dcfa      	bgt.n	80082ca <__ieee754_fmod+0xfe>
 80082d4:	e7bc      	b.n	8008250 <__ieee754_fmod+0x84>
 80082d6:	ea4f 5028 	mov.w	r0, r8, asr #20
 80082da:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80082de:	e7b7      	b.n	8008250 <__ieee754_fmod+0x84>
 80082e0:	3b01      	subs	r3, #1
 80082e2:	0049      	lsls	r1, r1, #1
 80082e4:	e7bb      	b.n	800825e <__ieee754_fmod+0x92>
 80082e6:	4b40      	ldr	r3, [pc, #256]	; (80083e8 <__ieee754_fmod+0x21c>)
 80082e8:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 80082ec:	0049      	lsls	r1, r1, #1
 80082ee:	2900      	cmp	r1, #0
 80082f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80082f4:	dcfa      	bgt.n	80082ec <__ieee754_fmod+0x120>
 80082f6:	e7b4      	b.n	8008262 <__ieee754_fmod+0x96>
 80082f8:	ea4f 532e 	mov.w	r3, lr, asr #20
 80082fc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008300:	e7af      	b.n	8008262 <__ieee754_fmod+0x96>
 8008302:	1a0f      	subs	r7, r1, r0
 8008304:	2f1f      	cmp	r7, #31
 8008306:	dc0a      	bgt.n	800831e <__ieee754_fmod+0x152>
 8008308:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800830c:	fa08 f807 	lsl.w	r8, r8, r7
 8008310:	fa22 f101 	lsr.w	r1, r2, r1
 8008314:	ea41 0108 	orr.w	r1, r1, r8
 8008318:	fa02 f707 	lsl.w	r7, r2, r7
 800831c:	e7a8      	b.n	8008270 <__ieee754_fmod+0xa4>
 800831e:	4933      	ldr	r1, [pc, #204]	; (80083ec <__ieee754_fmod+0x220>)
 8008320:	1a09      	subs	r1, r1, r0
 8008322:	fa02 f101 	lsl.w	r1, r2, r1
 8008326:	2700      	movs	r7, #0
 8008328:	e7a2      	b.n	8008270 <__ieee754_fmod+0xa4>
 800832a:	eba2 0c03 	sub.w	ip, r2, r3
 800832e:	f1bc 0f1f 	cmp.w	ip, #31
 8008332:	dc0a      	bgt.n	800834a <__ieee754_fmod+0x17e>
 8008334:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8008338:	fa0e fe0c 	lsl.w	lr, lr, ip
 800833c:	fa25 f606 	lsr.w	r6, r5, r6
 8008340:	ea46 060e 	orr.w	r6, r6, lr
 8008344:	fa05 fc0c 	lsl.w	ip, r5, ip
 8008348:	e799      	b.n	800827e <__ieee754_fmod+0xb2>
 800834a:	4e28      	ldr	r6, [pc, #160]	; (80083ec <__ieee754_fmod+0x220>)
 800834c:	1af6      	subs	r6, r6, r3
 800834e:	fa05 f606 	lsl.w	r6, r5, r6
 8008352:	f04f 0c00 	mov.w	ip, #0
 8008356:	e792      	b.n	800827e <__ieee754_fmod+0xb2>
 8008358:	4567      	cmp	r7, ip
 800835a:	bf38      	it	cc
 800835c:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8008360:	2a00      	cmp	r2, #0
 8008362:	da05      	bge.n	8008370 <__ieee754_fmod+0x1a4>
 8008364:	0ffa      	lsrs	r2, r7, #31
 8008366:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800836a:	007f      	lsls	r7, r7, #1
 800836c:	3801      	subs	r0, #1
 800836e:	e787      	b.n	8008280 <__ieee754_fmod+0xb4>
 8008370:	ea52 0105 	orrs.w	r1, r2, r5
 8008374:	f43f af5b 	beq.w	800822e <__ieee754_fmod+0x62>
 8008378:	0fe9      	lsrs	r1, r5, #31
 800837a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800837e:	006f      	lsls	r7, r5, #1
 8008380:	e7f4      	b.n	800836c <__ieee754_fmod+0x1a0>
 8008382:	0fe8      	lsrs	r0, r5, #31
 8008384:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8008388:	006d      	lsls	r5, r5, #1
 800838a:	3b01      	subs	r3, #1
 800838c:	e789      	b.n	80082a2 <__ieee754_fmod+0xd6>
 800838e:	1ac9      	subs	r1, r1, r3
 8008390:	2914      	cmp	r1, #20
 8008392:	dc0a      	bgt.n	80083aa <__ieee754_fmod+0x1de>
 8008394:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8008398:	fa02 f303 	lsl.w	r3, r2, r3
 800839c:	40cd      	lsrs	r5, r1
 800839e:	432b      	orrs	r3, r5
 80083a0:	410a      	asrs	r2, r1
 80083a2:	ea42 0104 	orr.w	r1, r2, r4
 80083a6:	4618      	mov	r0, r3
 80083a8:	e732      	b.n	8008210 <__ieee754_fmod+0x44>
 80083aa:	291f      	cmp	r1, #31
 80083ac:	dc07      	bgt.n	80083be <__ieee754_fmod+0x1f2>
 80083ae:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80083b2:	40cd      	lsrs	r5, r1
 80083b4:	fa02 f303 	lsl.w	r3, r2, r3
 80083b8:	432b      	orrs	r3, r5
 80083ba:	4622      	mov	r2, r4
 80083bc:	e7f1      	b.n	80083a2 <__ieee754_fmod+0x1d6>
 80083be:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80083c2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80083c6:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80083ca:	33e2      	adds	r3, #226	; 0xe2
 80083cc:	fa42 f303 	asr.w	r3, r2, r3
 80083d0:	e7f3      	b.n	80083ba <__ieee754_fmod+0x1ee>
 80083d2:	bf00      	nop
 80083d4:	7fefffff 	.word	0x7fefffff
 80083d8:	7ff00000 	.word	0x7ff00000
 80083dc:	08008798 	.word	0x08008798
 80083e0:	000fffff 	.word	0x000fffff
 80083e4:	fffffbed 	.word	0xfffffbed
 80083e8:	fffffc02 	.word	0xfffffc02
 80083ec:	fffffbe2 	.word	0xfffffbe2

080083f0 <matherr>:
 80083f0:	2000      	movs	r0, #0
 80083f2:	4770      	bx	lr

080083f4 <_init>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	bf00      	nop
 80083f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fa:	bc08      	pop	{r3}
 80083fc:	469e      	mov	lr, r3
 80083fe:	4770      	bx	lr

08008400 <_fini>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	bf00      	nop
 8008404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008406:	bc08      	pop	{r3}
 8008408:	469e      	mov	lr, r3
 800840a:	4770      	bx	lr
